
GLCD_Project_Train.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003834  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000326  00800060  00003834  000038c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800386  00800386  00003bee  2**0
                  ALLOC
  3 .stab         000028c8  00000000  00000000  00003bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000104c  00000000  00000000  000064b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00007504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  000076e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  00007916  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000a1a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000b7cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000cbb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000cdb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000d0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000db15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <main>
      8a:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e9       	ldi	r26, 0x9E	; 158
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8b 1b 	jmp	0x3716	; 0x3716 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e9       	ldi	r24, 0x9E	; 158
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8b 1b 	jmp	0x3716	; 0x3716 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e9       	ldi	r22, 0x9E	; 158
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 93 1b 	jmp	0x3726	; 0x3726 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 94 1b 	jmp	0x3728	; 0x3728 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 7f 1b 	jmp	0x36fe	; 0x36fe <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 9b 1b 	jmp	0x3736	; 0x3736 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 93 1b 	jmp	0x3726	; 0x3726 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	ea 55       	subi	r30, 0x5A	; 90
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <DIO_VidSetPinDirection>:
#include "DIO_Private.h"
#include "DIO_Interface.h"

/*Set Pin Direction*/
void DIO_VidSetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinDirection)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <DIO_VidSetPinDirection+0x6>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <DIO_VidSetPinDirection+0x8>
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	6a 83       	std	Y+2, r22	; 0x02
     f5c:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	3d 83       	std	Y+5, r19	; 0x05
     f66:	2c 83       	std	Y+4, r18	; 0x04
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	9d 81       	ldd	r25, Y+5	; 0x05
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	91 05       	cpc	r25, r1
     f70:	09 f4       	brne	.+2      	; 0xf74 <DIO_VidSetPinDirection+0x2a>
     f72:	47 c0       	rjmp	.+142    	; 0x1002 <DIO_VidSetPinDirection+0xb8>
     f74:	2c 81       	ldd	r18, Y+4	; 0x04
     f76:	3d 81       	ldd	r19, Y+5	; 0x05
     f78:	22 30       	cpi	r18, 0x02	; 2
     f7a:	31 05       	cpc	r19, r1
     f7c:	2c f4       	brge	.+10     	; 0xf88 <DIO_VidSetPinDirection+0x3e>
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	9d 81       	ldd	r25, Y+5	; 0x05
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	71 f0       	breq	.+28     	; 0xfa2 <DIO_VidSetPinDirection+0x58>
     f86:	cb c0       	rjmp	.+406    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
     f88:	2c 81       	ldd	r18, Y+4	; 0x04
     f8a:	3d 81       	ldd	r19, Y+5	; 0x05
     f8c:	22 30       	cpi	r18, 0x02	; 2
     f8e:	31 05       	cpc	r19, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <DIO_VidSetPinDirection+0x4a>
     f92:	67 c0       	rjmp	.+206    	; 0x1062 <DIO_VidSetPinDirection+0x118>
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	9d 81       	ldd	r25, Y+5	; 0x05
     f98:	83 30       	cpi	r24, 0x03	; 3
     f9a:	91 05       	cpc	r25, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <DIO_VidSetPinDirection+0x56>
     f9e:	91 c0       	rjmp	.+290    	; 0x10c2 <DIO_VidSetPinDirection+0x178>
     fa0:	be c0       	rjmp	.+380    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
	{
	case DIO_PORTA:
		if(Copy_u8PinDirection == PIN_OUTPUT)
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	a1 f4       	brne	.+40     	; 0xfd0 <DIO_VidSetPinDirection+0x86>
		{
			SET_BIT(DDRA,Copy_u8PinNumber);
     fa8:	aa e3       	ldi	r26, 0x3A	; 58
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	ea e3       	ldi	r30, 0x3A	; 58
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_VidSetPinDirection+0x7c>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_VidSetPinDirection+0x78>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	a7 c0       	rjmp	.+334    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == PIN_INPUT)
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	88 23       	and	r24, r24
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <DIO_VidSetPinDirection+0x8e>
     fd6:	a3 c0       	rjmp	.+326    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		{
			CLR_BIT(DDRA,Copy_u8PinNumber);
     fd8:	aa e3       	ldi	r26, 0x3A	; 58
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	ea e3       	ldi	r30, 0x3A	; 58
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_VidSetPinDirection+0xac>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_VidSetPinDirection+0xa8>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	8e c0       	rjmp	.+284    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		}
		break;
	case DIO_PORTB:
		if(Copy_u8PinDirection == PIN_OUTPUT)
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	a1 f4       	brne	.+40     	; 0x1030 <DIO_VidSetPinDirection+0xe6>
		{
			SET_BIT(DDRB,Copy_u8PinNumber);
    1008:	a7 e3       	ldi	r26, 0x37	; 55
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e7 e3       	ldi	r30, 0x37	; 55
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_VidSetPinDirection+0xdc>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_VidSetPinDirection+0xd8>
    102a:	84 2b       	or	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	77 c0       	rjmp	.+238    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == PIN_INPUT)
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	88 23       	and	r24, r24
    1034:	09 f0       	breq	.+2      	; 0x1038 <DIO_VidSetPinDirection+0xee>
    1036:	73 c0       	rjmp	.+230    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		{
			CLR_BIT(DDRB,Copy_u8PinNumber);
    1038:	a7 e3       	ldi	r26, 0x37	; 55
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e7 e3       	ldi	r30, 0x37	; 55
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_VidSetPinDirection+0x10c>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_VidSetPinDirection+0x108>
    105a:	80 95       	com	r24
    105c:	84 23       	and	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	5e c0       	rjmp	.+188    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		}
		break;
	case DIO_PORTC:
		if(Copy_u8PinDirection == PIN_OUTPUT)
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	a1 f4       	brne	.+40     	; 0x1090 <DIO_VidSetPinDirection+0x146>
		{
			SET_BIT(DDRC,Copy_u8PinNumber);
    1068:	a4 e3       	ldi	r26, 0x34	; 52
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e4 e3       	ldi	r30, 0x34	; 52
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_VidSetPinDirection+0x13c>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_VidSetPinDirection+0x138>
    108a:	84 2b       	or	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	47 c0       	rjmp	.+142    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == PIN_INPUT)
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	88 23       	and	r24, r24
    1094:	09 f0       	breq	.+2      	; 0x1098 <DIO_VidSetPinDirection+0x14e>
    1096:	43 c0       	rjmp	.+134    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		{
			CLR_BIT(DDRC,Copy_u8PinNumber);
    1098:	a4 e3       	ldi	r26, 0x34	; 52
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e4 e3       	ldi	r30, 0x34	; 52
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_VidSetPinDirection+0x16c>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_VidSetPinDirection+0x168>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	2e c0       	rjmp	.+92     	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		}
		break;
	case DIO_PORTD:
		if(Copy_u8PinDirection == PIN_OUTPUT)
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	a1 f4       	brne	.+40     	; 0x10f0 <DIO_VidSetPinDirection+0x1a6>
		{
			SET_BIT(DDRD,Copy_u8PinNumber);
    10c8:	a1 e3       	ldi	r26, 0x31	; 49
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e1 e3       	ldi	r30, 0x31	; 49
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_VidSetPinDirection+0x19c>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_VidSetPinDirection+0x198>
    10ea:	84 2b       	or	r24, r20
    10ec:	8c 93       	st	X, r24
    10ee:	17 c0       	rjmp	.+46     	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == PIN_INPUT)
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	88 23       	and	r24, r24
    10f4:	a1 f4       	brne	.+40     	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		{
			CLR_BIT(DDRD,Copy_u8PinNumber);
    10f6:	a1 e3       	ldi	r26, 0x31	; 49
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e1 e3       	ldi	r30, 0x31	; 49
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_VidSetPinDirection+0x1ca>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_VidSetPinDirection+0x1c6>
    1118:	80 95       	com	r24
    111a:	84 23       	and	r24, r20
    111c:	8c 93       	st	X, r24
		}
		break;
	}

}
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <DIO_VidSetPinValue>:
/*Set Pin Value*/
void DIO_VidSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <DIO_VidSetPinValue+0x6>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <DIO_VidSetPinValue+0x8>
    1136:	0f 92       	push	r0
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	6a 83       	std	Y+2, r22	; 0x02
    1140:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	3d 83       	std	Y+5, r19	; 0x05
    114a:	2c 83       	std	Y+4, r18	; 0x04
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	9d 81       	ldd	r25, Y+5	; 0x05
    1150:	81 30       	cpi	r24, 0x01	; 1
    1152:	91 05       	cpc	r25, r1
    1154:	09 f4       	brne	.+2      	; 0x1158 <DIO_VidSetPinValue+0x2a>
    1156:	47 c0       	rjmp	.+142    	; 0x11e6 <DIO_VidSetPinValue+0xb8>
    1158:	2c 81       	ldd	r18, Y+4	; 0x04
    115a:	3d 81       	ldd	r19, Y+5	; 0x05
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	2c f4       	brge	.+10     	; 0x116c <DIO_VidSetPinValue+0x3e>
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	71 f0       	breq	.+28     	; 0x1186 <DIO_VidSetPinValue+0x58>
    116a:	cb c0       	rjmp	.+406    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
    116c:	2c 81       	ldd	r18, Y+4	; 0x04
    116e:	3d 81       	ldd	r19, Y+5	; 0x05
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <DIO_VidSetPinValue+0x4a>
    1176:	67 c0       	rjmp	.+206    	; 0x1246 <DIO_VidSetPinValue+0x118>
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	83 30       	cpi	r24, 0x03	; 3
    117e:	91 05       	cpc	r25, r1
    1180:	09 f4       	brne	.+2      	; 0x1184 <DIO_VidSetPinValue+0x56>
    1182:	91 c0       	rjmp	.+290    	; 0x12a6 <DIO_VidSetPinValue+0x178>
    1184:	be c0       	rjmp	.+380    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
	{
	case DIO_PORTA:
		if(Copy_u8PinValue == PIN_HIGH)
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	a1 f4       	brne	.+40     	; 0x11b4 <DIO_VidSetPinValue+0x86>
		{
			SET_BIT(PORTA,Copy_u8PinNumber);
    118c:	ab e3       	ldi	r26, 0x3B	; 59
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	eb e3       	ldi	r30, 0x3B	; 59
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_VidSetPinValue+0x7c>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_VidSetPinValue+0x78>
    11ae:	84 2b       	or	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	a7 c0       	rjmp	.+334    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == PIN_LOW)
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	88 23       	and	r24, r24
    11b8:	09 f0       	breq	.+2      	; 0x11bc <DIO_VidSetPinValue+0x8e>
    11ba:	a3 c0       	rjmp	.+326    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		{
			CLR_BIT(PORTA,Copy_u8PinNumber);
    11bc:	ab e3       	ldi	r26, 0x3B	; 59
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	eb e3       	ldi	r30, 0x3B	; 59
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <DIO_VidSetPinValue+0xac>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <DIO_VidSetPinValue+0xa8>
    11de:	80 95       	com	r24
    11e0:	84 23       	and	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	8e c0       	rjmp	.+284    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		}
		break;
	case DIO_PORTB:
		if(Copy_u8PinValue == PIN_HIGH)
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	a1 f4       	brne	.+40     	; 0x1214 <DIO_VidSetPinValue+0xe6>
		{
			SET_BIT(PORTB,Copy_u8PinNumber);
    11ec:	a8 e3       	ldi	r26, 0x38	; 56
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e8 e3       	ldi	r30, 0x38	; 56
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_VidSetPinValue+0xdc>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_VidSetPinValue+0xd8>
    120e:	84 2b       	or	r24, r20
    1210:	8c 93       	st	X, r24
    1212:	77 c0       	rjmp	.+238    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == PIN_LOW)
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	88 23       	and	r24, r24
    1218:	09 f0       	breq	.+2      	; 0x121c <DIO_VidSetPinValue+0xee>
    121a:	73 c0       	rjmp	.+230    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		{
			CLR_BIT(PORTB,Copy_u8PinNumber);
    121c:	a8 e3       	ldi	r26, 0x38	; 56
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e8 e3       	ldi	r30, 0x38	; 56
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	48 2f       	mov	r20, r24
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 2e       	mov	r0, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <DIO_VidSetPinValue+0x10c>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	0a 94       	dec	r0
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <DIO_VidSetPinValue+0x108>
    123e:	80 95       	com	r24
    1240:	84 23       	and	r24, r20
    1242:	8c 93       	st	X, r24
    1244:	5e c0       	rjmp	.+188    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		}
		break;
	case DIO_PORTC:
		if(Copy_u8PinValue == PIN_HIGH)
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	a1 f4       	brne	.+40     	; 0x1274 <DIO_VidSetPinValue+0x146>
		{
			SET_BIT(PORTC,Copy_u8PinNumber);
    124c:	a5 e3       	ldi	r26, 0x35	; 53
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e5 e3       	ldi	r30, 0x35	; 53
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_VidSetPinValue+0x13c>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_VidSetPinValue+0x138>
    126e:	84 2b       	or	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	47 c0       	rjmp	.+142    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == PIN_LOW)
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	88 23       	and	r24, r24
    1278:	09 f0       	breq	.+2      	; 0x127c <DIO_VidSetPinValue+0x14e>
    127a:	43 c0       	rjmp	.+134    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		{
			CLR_BIT(PORTC,Copy_u8PinNumber);
    127c:	a5 e3       	ldi	r26, 0x35	; 53
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e5 e3       	ldi	r30, 0x35	; 53
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_VidSetPinValue+0x16c>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_VidSetPinValue+0x168>
    129e:	80 95       	com	r24
    12a0:	84 23       	and	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	2e c0       	rjmp	.+92     	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		}
		break;
	case DIO_PORTD:
		if(Copy_u8PinValue == PIN_HIGH)
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	a1 f4       	brne	.+40     	; 0x12d4 <DIO_VidSetPinValue+0x1a6>
		{
			SET_BIT(PORTD,Copy_u8PinNumber);
    12ac:	a2 e3       	ldi	r26, 0x32	; 50
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e2 e3       	ldi	r30, 0x32	; 50
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_VidSetPinValue+0x19c>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_VidSetPinValue+0x198>
    12ce:	84 2b       	or	r24, r20
    12d0:	8c 93       	st	X, r24
    12d2:	17 c0       	rjmp	.+46     	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == PIN_LOW)
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	88 23       	and	r24, r24
    12d8:	a1 f4       	brne	.+40     	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		{
			CLR_BIT(PORTD,Copy_u8PinNumber);
    12da:	a2 e3       	ldi	r26, 0x32	; 50
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e2 e3       	ldi	r30, 0x32	; 50
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	48 2f       	mov	r20, r24
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	02 2e       	mov	r0, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <DIO_VidSetPinValue+0x1ca>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	0a 94       	dec	r0
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <DIO_VidSetPinValue+0x1c6>
    12fc:	80 95       	com	r24
    12fe:	84 23       	and	r24, r20
    1300:	8c 93       	st	X, r24
		}
		break;
	}
}
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <DIO_u8GetPinValue>:
/*Get Pin Value*/
u8 DIO_u8GetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber)
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	00 d0       	rcall	.+0      	; 0x1318 <DIO_u8GetPinValue+0x6>
    1318:	00 d0       	rcall	.+0      	; 0x131a <DIO_u8GetPinValue+0x8>
    131a:	0f 92       	push	r0
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	8a 83       	std	Y+2, r24	; 0x02
    1322:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8PinState = 0;
    1324:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName)
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3d 83       	std	Y+5, r19	; 0x05
    132e:	2c 83       	std	Y+4, r18	; 0x04
    1330:	4c 81       	ldd	r20, Y+4	; 0x04
    1332:	5d 81       	ldd	r21, Y+5	; 0x05
    1334:	41 30       	cpi	r20, 0x01	; 1
    1336:	51 05       	cpc	r21, r1
    1338:	41 f1       	breq	.+80     	; 0x138a <DIO_u8GetPinValue+0x78>
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	9d 81       	ldd	r25, Y+5	; 0x05
    133e:	82 30       	cpi	r24, 0x02	; 2
    1340:	91 05       	cpc	r25, r1
    1342:	34 f4       	brge	.+12     	; 0x1350 <DIO_u8GetPinValue+0x3e>
    1344:	2c 81       	ldd	r18, Y+4	; 0x04
    1346:	3d 81       	ldd	r19, Y+5	; 0x05
    1348:	21 15       	cp	r18, r1
    134a:	31 05       	cpc	r19, r1
    134c:	61 f0       	breq	.+24     	; 0x1366 <DIO_u8GetPinValue+0x54>
    134e:	52 c0       	rjmp	.+164    	; 0x13f4 <DIO_u8GetPinValue+0xe2>
    1350:	4c 81       	ldd	r20, Y+4	; 0x04
    1352:	5d 81       	ldd	r21, Y+5	; 0x05
    1354:	42 30       	cpi	r20, 0x02	; 2
    1356:	51 05       	cpc	r21, r1
    1358:	51 f1       	breq	.+84     	; 0x13ae <DIO_u8GetPinValue+0x9c>
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	9d 81       	ldd	r25, Y+5	; 0x05
    135e:	83 30       	cpi	r24, 0x03	; 3
    1360:	91 05       	cpc	r25, r1
    1362:	b9 f1       	breq	.+110    	; 0x13d2 <DIO_u8GetPinValue+0xc0>
    1364:	47 c0       	rjmp	.+142    	; 0x13f4 <DIO_u8GetPinValue+0xe2>
	{
	case DIO_PORTA:
		LOC_u8PinState = GET_BIT(PINA, Copy_u8PinNumber);
    1366:	e9 e3       	ldi	r30, 0x39	; 57
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	88 2f       	mov	r24, r24
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	a9 01       	movw	r20, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_u8GetPinValue+0x6c>
    137a:	55 95       	asr	r21
    137c:	47 95       	ror	r20
    137e:	8a 95       	dec	r24
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_u8GetPinValue+0x68>
    1382:	ca 01       	movw	r24, r20
    1384:	81 70       	andi	r24, 0x01	; 1
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	35 c0       	rjmp	.+106    	; 0x13f4 <DIO_u8GetPinValue+0xe2>
		break;
	case DIO_PORTB:
		LOC_u8PinState = GET_BIT(PINB, Copy_u8PinNumber);
    138a:	e6 e3       	ldi	r30, 0x36	; 54
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_u8GetPinValue+0x90>
    139e:	55 95       	asr	r21
    13a0:	47 95       	ror	r20
    13a2:	8a 95       	dec	r24
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_u8GetPinValue+0x8c>
    13a6:	ca 01       	movw	r24, r20
    13a8:	81 70       	andi	r24, 0x01	; 1
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	23 c0       	rjmp	.+70     	; 0x13f4 <DIO_u8GetPinValue+0xe2>
		break;
	case DIO_PORTC:
		LOC_u8PinState = GET_BIT(PINC, Copy_u8PinNumber);
    13ae:	e3 e3       	ldi	r30, 0x33	; 51
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a9 01       	movw	r20, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_u8GetPinValue+0xb4>
    13c2:	55 95       	asr	r21
    13c4:	47 95       	ror	r20
    13c6:	8a 95       	dec	r24
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_u8GetPinValue+0xb0>
    13ca:	ca 01       	movw	r24, r20
    13cc:	81 70       	andi	r24, 0x01	; 1
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	11 c0       	rjmp	.+34     	; 0x13f4 <DIO_u8GetPinValue+0xe2>
		break;
	case DIO_PORTD:
		LOC_u8PinState = GET_BIT(PIND, Copy_u8PinNumber);
    13d2:	e0 e3       	ldi	r30, 0x30	; 48
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a9 01       	movw	r20, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_u8GetPinValue+0xd8>
    13e6:	55 95       	asr	r21
    13e8:	47 95       	ror	r20
    13ea:	8a 95       	dec	r24
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_u8GetPinValue+0xd4>
    13ee:	ca 01       	movw	r24, r20
    13f0:	81 70       	andi	r24, 0x01	; 1
    13f2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return LOC_u8PinState;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <DIO_VidSetPortDirection>:
/*Set Port Direction*/
void DIO_VidSetPortDirection(u8 Copy_u8PortName,u8 Copy_u8PortDirection)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	00 d0       	rcall	.+0      	; 0x140c <DIO_VidSetPortDirection+0x6>
    140c:	00 d0       	rcall	.+0      	; 0x140e <DIO_VidSetPortDirection+0x8>
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	3c 83       	std	Y+4, r19	; 0x04
    141e:	2b 83       	std	Y+3, r18	; 0x03
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	91 05       	cpc	r25, r1
    1428:	d1 f0       	breq	.+52     	; 0x145e <DIO_VidSetPortDirection+0x58>
    142a:	2b 81       	ldd	r18, Y+3	; 0x03
    142c:	3c 81       	ldd	r19, Y+4	; 0x04
    142e:	22 30       	cpi	r18, 0x02	; 2
    1430:	31 05       	cpc	r19, r1
    1432:	2c f4       	brge	.+10     	; 0x143e <DIO_VidSetPortDirection+0x38>
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	61 f0       	breq	.+24     	; 0x1454 <DIO_VidSetPortDirection+0x4e>
    143c:	1e c0       	rjmp	.+60     	; 0x147a <DIO_VidSetPortDirection+0x74>
    143e:	2b 81       	ldd	r18, Y+3	; 0x03
    1440:	3c 81       	ldd	r19, Y+4	; 0x04
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	81 f0       	breq	.+32     	; 0x1468 <DIO_VidSetPortDirection+0x62>
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	83 30       	cpi	r24, 0x03	; 3
    144e:	91 05       	cpc	r25, r1
    1450:	81 f0       	breq	.+32     	; 0x1472 <DIO_VidSetPortDirection+0x6c>
    1452:	13 c0       	rjmp	.+38     	; 0x147a <DIO_VidSetPortDirection+0x74>
	{
	case DIO_PORTA:
		DDRA = Copy_u8PortDirection;
    1454:	ea e3       	ldi	r30, 0x3A	; 58
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	80 83       	st	Z, r24
    145c:	0e c0       	rjmp	.+28     	; 0x147a <DIO_VidSetPortDirection+0x74>
		break;
	case DIO_PORTB:
		DDRB = Copy_u8PortDirection;
    145e:	e7 e3       	ldi	r30, 0x37	; 55
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	80 83       	st	Z, r24
    1466:	09 c0       	rjmp	.+18     	; 0x147a <DIO_VidSetPortDirection+0x74>
		break;
	case DIO_PORTC:
		DDRC = Copy_u8PortDirection;
    1468:	e4 e3       	ldi	r30, 0x34	; 52
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	80 83       	st	Z, r24
    1470:	04 c0       	rjmp	.+8      	; 0x147a <DIO_VidSetPortDirection+0x74>
		break;
	case DIO_PORTD:
		DDRD = Copy_u8PortDirection;
    1472:	e1 e3       	ldi	r30, 0x31	; 49
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	80 83       	st	Z, r24
		break;
	}
}
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <DIO_VidSetPortValue>:
/*Set Port Value*/
void DIO_VidSetPortValue(u8 Copy_u8PortName,u8 Copy_u8PortValue)
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	00 d0       	rcall	.+0      	; 0x148e <DIO_VidSetPortValue+0x6>
    148e:	00 d0       	rcall	.+0      	; 0x1490 <DIO_VidSetPortValue+0x8>
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	3c 83       	std	Y+4, r19	; 0x04
    14a0:	2b 83       	std	Y+3, r18	; 0x03
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	91 05       	cpc	r25, r1
    14aa:	d1 f0       	breq	.+52     	; 0x14e0 <DIO_VidSetPortValue+0x58>
    14ac:	2b 81       	ldd	r18, Y+3	; 0x03
    14ae:	3c 81       	ldd	r19, Y+4	; 0x04
    14b0:	22 30       	cpi	r18, 0x02	; 2
    14b2:	31 05       	cpc	r19, r1
    14b4:	2c f4       	brge	.+10     	; 0x14c0 <DIO_VidSetPortValue+0x38>
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	61 f0       	breq	.+24     	; 0x14d6 <DIO_VidSetPortValue+0x4e>
    14be:	1e c0       	rjmp	.+60     	; 0x14fc <DIO_VidSetPortValue+0x74>
    14c0:	2b 81       	ldd	r18, Y+3	; 0x03
    14c2:	3c 81       	ldd	r19, Y+4	; 0x04
    14c4:	22 30       	cpi	r18, 0x02	; 2
    14c6:	31 05       	cpc	r19, r1
    14c8:	81 f0       	breq	.+32     	; 0x14ea <DIO_VidSetPortValue+0x62>
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	9c 81       	ldd	r25, Y+4	; 0x04
    14ce:	83 30       	cpi	r24, 0x03	; 3
    14d0:	91 05       	cpc	r25, r1
    14d2:	81 f0       	breq	.+32     	; 0x14f4 <DIO_VidSetPortValue+0x6c>
    14d4:	13 c0       	rjmp	.+38     	; 0x14fc <DIO_VidSetPortValue+0x74>
	{
	case DIO_PORTA:
		PORTA = Copy_u8PortValue;
    14d6:	eb e3       	ldi	r30, 0x3B	; 59
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	80 83       	st	Z, r24
    14de:	0e c0       	rjmp	.+28     	; 0x14fc <DIO_VidSetPortValue+0x74>
		break;
	case DIO_PORTB:
		PORTB = Copy_u8PortValue;
    14e0:	e8 e3       	ldi	r30, 0x38	; 56
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	80 83       	st	Z, r24
    14e8:	09 c0       	rjmp	.+18     	; 0x14fc <DIO_VidSetPortValue+0x74>
		break;
	case DIO_PORTC:
		PORTC = Copy_u8PortValue;
    14ea:	e5 e3       	ldi	r30, 0x35	; 53
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	80 83       	st	Z, r24
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <DIO_VidSetPortValue+0x74>
		break;
	case DIO_PORTD:
		PORTD = Copy_u8PortValue;
    14f4:	e2 e3       	ldi	r30, 0x32	; 50
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	80 83       	st	Z, r24
		break;
	}
}
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <DIO_VidSet4MSBDirection>:
/*Set 4MSB Direction*/
void DIO_VidSet4MSBDirection(u8 Copy_u8PortName,u8 Copy_u8PinsDirection)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <DIO_VidSet4MSBDirection+0x6>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <DIO_VidSet4MSBDirection+0x8>
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	3c 83       	std	Y+4, r19	; 0x04
    1522:	2b 83       	std	Y+3, r18	; 0x03
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	91 05       	cpc	r25, r1
    152c:	79 f1       	breq	.+94     	; 0x158c <DIO_VidSet4MSBDirection+0x82>
    152e:	2b 81       	ldd	r18, Y+3	; 0x03
    1530:	3c 81       	ldd	r19, Y+4	; 0x04
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	2c f4       	brge	.+10     	; 0x1542 <DIO_VidSet4MSBDirection+0x38>
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	69 f0       	breq	.+26     	; 0x155a <DIO_VidSet4MSBDirection+0x50>
    1540:	6f c0       	rjmp	.+222    	; 0x1620 <DIO_VidSet4MSBDirection+0x116>
    1542:	2b 81       	ldd	r18, Y+3	; 0x03
    1544:	3c 81       	ldd	r19, Y+4	; 0x04
    1546:	22 30       	cpi	r18, 0x02	; 2
    1548:	31 05       	cpc	r19, r1
    154a:	c9 f1       	breq	.+114    	; 0x15be <DIO_VidSet4MSBDirection+0xb4>
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	83 30       	cpi	r24, 0x03	; 3
    1552:	91 05       	cpc	r25, r1
    1554:	09 f4       	brne	.+2      	; 0x1558 <DIO_VidSet4MSBDirection+0x4e>
    1556:	4c c0       	rjmp	.+152    	; 0x15f0 <DIO_VidSet4MSBDirection+0xe6>
    1558:	63 c0       	rjmp	.+198    	; 0x1620 <DIO_VidSet4MSBDirection+0x116>
	{
	case DIO_PORTA:
		DDRA&=0x0F;
    155a:	aa e3       	ldi	r26, 0x3A	; 58
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ea e3       	ldi	r30, 0x3A	; 58
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	8f 70       	andi	r24, 0x0F	; 15
    1566:	8c 93       	st	X, r24
		DDRA|=(Copy_u8PinsDirection<<4);
    1568:	aa e3       	ldi	r26, 0x3A	; 58
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ea e3       	ldi	r30, 0x3A	; 58
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	28 2f       	mov	r18, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	82 95       	swap	r24
    157c:	92 95       	swap	r25
    157e:	90 7f       	andi	r25, 0xF0	; 240
    1580:	98 27       	eor	r25, r24
    1582:	80 7f       	andi	r24, 0xF0	; 240
    1584:	98 27       	eor	r25, r24
    1586:	82 2b       	or	r24, r18
    1588:	8c 93       	st	X, r24
    158a:	4a c0       	rjmp	.+148    	; 0x1620 <DIO_VidSet4MSBDirection+0x116>
		break;
	case DIO_PORTB:
		DDRB&=0x0F;
    158c:	a7 e3       	ldi	r26, 0x37	; 55
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e7 e3       	ldi	r30, 0x37	; 55
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	8f 70       	andi	r24, 0x0F	; 15
    1598:	8c 93       	st	X, r24
		DDRB|=(Copy_u8PinsDirection<<4);
    159a:	a7 e3       	ldi	r26, 0x37	; 55
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e7 e3       	ldi	r30, 0x37	; 55
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	28 2f       	mov	r18, r24
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	82 95       	swap	r24
    15ae:	92 95       	swap	r25
    15b0:	90 7f       	andi	r25, 0xF0	; 240
    15b2:	98 27       	eor	r25, r24
    15b4:	80 7f       	andi	r24, 0xF0	; 240
    15b6:	98 27       	eor	r25, r24
    15b8:	82 2b       	or	r24, r18
    15ba:	8c 93       	st	X, r24
    15bc:	31 c0       	rjmp	.+98     	; 0x1620 <DIO_VidSet4MSBDirection+0x116>
		break;
	case DIO_PORTC:
		DDRC&=0x0F;
    15be:	a4 e3       	ldi	r26, 0x34	; 52
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e4 e3       	ldi	r30, 0x34	; 52
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	8f 70       	andi	r24, 0x0F	; 15
    15ca:	8c 93       	st	X, r24
		DDRC|=(Copy_u8PinsDirection<<4);
    15cc:	a4 e3       	ldi	r26, 0x34	; 52
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e4 e3       	ldi	r30, 0x34	; 52
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	28 2f       	mov	r18, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	88 2f       	mov	r24, r24
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	82 95       	swap	r24
    15e0:	92 95       	swap	r25
    15e2:	90 7f       	andi	r25, 0xF0	; 240
    15e4:	98 27       	eor	r25, r24
    15e6:	80 7f       	andi	r24, 0xF0	; 240
    15e8:	98 27       	eor	r25, r24
    15ea:	82 2b       	or	r24, r18
    15ec:	8c 93       	st	X, r24
    15ee:	18 c0       	rjmp	.+48     	; 0x1620 <DIO_VidSet4MSBDirection+0x116>
		break;
	case DIO_PORTD:
		DDRD&=0x0F;
    15f0:	a1 e3       	ldi	r26, 0x31	; 49
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e1 e3       	ldi	r30, 0x31	; 49
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	8f 70       	andi	r24, 0x0F	; 15
    15fc:	8c 93       	st	X, r24
		DDRD|=(Copy_u8PinsDirection<<4);
    15fe:	a1 e3       	ldi	r26, 0x31	; 49
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e1 e3       	ldi	r30, 0x31	; 49
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	28 2f       	mov	r18, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	88 2f       	mov	r24, r24
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	82 95       	swap	r24
    1612:	92 95       	swap	r25
    1614:	90 7f       	andi	r25, 0xF0	; 240
    1616:	98 27       	eor	r25, r24
    1618:	80 7f       	andi	r24, 0xF0	; 240
    161a:	98 27       	eor	r25, r24
    161c:	82 2b       	or	r24, r18
    161e:	8c 93       	st	X, r24
		break;
	}
}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <DIO_VidSet4LSBDirection>:
/*Set 4LSB Direction*/
void DIO_VidSet4LSBDirection(u8 Copy_u8PortName,u8 Copy_u8PinsDirection)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <DIO_VidSet4LSBDirection+0x6>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <DIO_VidSet4LSBDirection+0x8>
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3c 83       	std	Y+4, r19	; 0x04
    1646:	2b 83       	std	Y+3, r18	; 0x03
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	29 f1       	breq	.+74     	; 0x169c <DIO_VidSet4LSBDirection+0x6e>
    1652:	2b 81       	ldd	r18, Y+3	; 0x03
    1654:	3c 81       	ldd	r19, Y+4	; 0x04
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	2c f4       	brge	.+10     	; 0x1666 <DIO_VidSet4LSBDirection+0x38>
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	61 f0       	breq	.+24     	; 0x167c <DIO_VidSet4LSBDirection+0x4e>
    1664:	4a c0       	rjmp	.+148    	; 0x16fa <DIO_VidSet4LSBDirection+0xcc>
    1666:	2b 81       	ldd	r18, Y+3	; 0x03
    1668:	3c 81       	ldd	r19, Y+4	; 0x04
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	31 f1       	breq	.+76     	; 0x16bc <DIO_VidSet4LSBDirection+0x8e>
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	91 05       	cpc	r25, r1
    1678:	89 f1       	breq	.+98     	; 0x16dc <DIO_VidSet4LSBDirection+0xae>
    167a:	3f c0       	rjmp	.+126    	; 0x16fa <DIO_VidSet4LSBDirection+0xcc>
	{
	case DIO_PORTA:
		DDRA&=0xF0;
    167c:	aa e3       	ldi	r26, 0x3A	; 58
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	ea e3       	ldi	r30, 0x3A	; 58
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	80 7f       	andi	r24, 0xF0	; 240
    1688:	8c 93       	st	X, r24
		DDRA|=Copy_u8PinsDirection;
    168a:	aa e3       	ldi	r26, 0x3A	; 58
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	ea e3       	ldi	r30, 0x3A	; 58
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	90 81       	ld	r25, Z
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	89 2b       	or	r24, r25
    1698:	8c 93       	st	X, r24
    169a:	2f c0       	rjmp	.+94     	; 0x16fa <DIO_VidSet4LSBDirection+0xcc>
		break;
	case DIO_PORTB:
		DDRB&=0xF0;
    169c:	a7 e3       	ldi	r26, 0x37	; 55
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e7 e3       	ldi	r30, 0x37	; 55
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	80 7f       	andi	r24, 0xF0	; 240
    16a8:	8c 93       	st	X, r24
		DDRB|=Copy_u8PinsDirection;
    16aa:	a7 e3       	ldi	r26, 0x37	; 55
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e7 e3       	ldi	r30, 0x37	; 55
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	90 81       	ld	r25, Z
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	89 2b       	or	r24, r25
    16b8:	8c 93       	st	X, r24
    16ba:	1f c0       	rjmp	.+62     	; 0x16fa <DIO_VidSet4LSBDirection+0xcc>
		break;
	case DIO_PORTC:
		DDRC&=0xF0;
    16bc:	a4 e3       	ldi	r26, 0x34	; 52
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e4 e3       	ldi	r30, 0x34	; 52
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	80 7f       	andi	r24, 0xF0	; 240
    16c8:	8c 93       	st	X, r24
		DDRC|=Copy_u8PinsDirection;
    16ca:	a4 e3       	ldi	r26, 0x34	; 52
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e4 e3       	ldi	r30, 0x34	; 52
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	90 81       	ld	r25, Z
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	89 2b       	or	r24, r25
    16d8:	8c 93       	st	X, r24
    16da:	0f c0       	rjmp	.+30     	; 0x16fa <DIO_VidSet4LSBDirection+0xcc>
		break;
	case DIO_PORTD:
		DDRD&=0xF0;
    16dc:	a1 e3       	ldi	r26, 0x31	; 49
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e1 e3       	ldi	r30, 0x31	; 49
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	80 7f       	andi	r24, 0xF0	; 240
    16e8:	8c 93       	st	X, r24
		DDRD|=Copy_u8PinsDirection;
    16ea:	a1 e3       	ldi	r26, 0x31	; 49
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e1 e3       	ldi	r30, 0x31	; 49
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	90 81       	ld	r25, Z
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	89 2b       	or	r24, r25
    16f8:	8c 93       	st	X, r24
		break;
	}
}
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <DIO_VidSet4MSBValue>:
/*Set 4MSB Value*/
void DIO_VidSet4MSBValue(u8 Copy_u8PortName,u8 Copy_u8PinsValue)
{
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	00 d0       	rcall	.+0      	; 0x170e <DIO_VidSet4MSBValue+0x6>
    170e:	00 d0       	rcall	.+0      	; 0x1710 <DIO_VidSet4MSBValue+0x8>
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	3c 83       	std	Y+4, r19	; 0x04
    1720:	2b 83       	std	Y+3, r18	; 0x03
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	91 05       	cpc	r25, r1
    172a:	79 f1       	breq	.+94     	; 0x178a <DIO_VidSet4MSBValue+0x82>
    172c:	2b 81       	ldd	r18, Y+3	; 0x03
    172e:	3c 81       	ldd	r19, Y+4	; 0x04
    1730:	22 30       	cpi	r18, 0x02	; 2
    1732:	31 05       	cpc	r19, r1
    1734:	2c f4       	brge	.+10     	; 0x1740 <DIO_VidSet4MSBValue+0x38>
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	69 f0       	breq	.+26     	; 0x1758 <DIO_VidSet4MSBValue+0x50>
    173e:	6f c0       	rjmp	.+222    	; 0x181e <DIO_VidSet4MSBValue+0x116>
    1740:	2b 81       	ldd	r18, Y+3	; 0x03
    1742:	3c 81       	ldd	r19, Y+4	; 0x04
    1744:	22 30       	cpi	r18, 0x02	; 2
    1746:	31 05       	cpc	r19, r1
    1748:	c9 f1       	breq	.+114    	; 0x17bc <DIO_VidSet4MSBValue+0xb4>
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	9c 81       	ldd	r25, Y+4	; 0x04
    174e:	83 30       	cpi	r24, 0x03	; 3
    1750:	91 05       	cpc	r25, r1
    1752:	09 f4       	brne	.+2      	; 0x1756 <DIO_VidSet4MSBValue+0x4e>
    1754:	4c c0       	rjmp	.+152    	; 0x17ee <DIO_VidSet4MSBValue+0xe6>
    1756:	63 c0       	rjmp	.+198    	; 0x181e <DIO_VidSet4MSBValue+0x116>
	{
	case DIO_PORTA:
		PORTA&=0x0F;
    1758:	ab e3       	ldi	r26, 0x3B	; 59
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	eb e3       	ldi	r30, 0x3B	; 59
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	8f 70       	andi	r24, 0x0F	; 15
    1764:	8c 93       	st	X, r24
		PORTA|=(Copy_u8PinsValue<<4);
    1766:	ab e3       	ldi	r26, 0x3B	; 59
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	eb e3       	ldi	r30, 0x3B	; 59
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	28 2f       	mov	r18, r24
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	82 95       	swap	r24
    177a:	92 95       	swap	r25
    177c:	90 7f       	andi	r25, 0xF0	; 240
    177e:	98 27       	eor	r25, r24
    1780:	80 7f       	andi	r24, 0xF0	; 240
    1782:	98 27       	eor	r25, r24
    1784:	82 2b       	or	r24, r18
    1786:	8c 93       	st	X, r24
    1788:	4a c0       	rjmp	.+148    	; 0x181e <DIO_VidSet4MSBValue+0x116>
		break;
	case DIO_PORTB:
		PORTB&=0x0F;
    178a:	a8 e3       	ldi	r26, 0x38	; 56
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e8 e3       	ldi	r30, 0x38	; 56
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8f 70       	andi	r24, 0x0F	; 15
    1796:	8c 93       	st	X, r24
		PORTB|=(Copy_u8PinsValue<<4);
    1798:	a8 e3       	ldi	r26, 0x38	; 56
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e8 e3       	ldi	r30, 0x38	; 56
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	28 2f       	mov	r18, r24
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	82 95       	swap	r24
    17ac:	92 95       	swap	r25
    17ae:	90 7f       	andi	r25, 0xF0	; 240
    17b0:	98 27       	eor	r25, r24
    17b2:	80 7f       	andi	r24, 0xF0	; 240
    17b4:	98 27       	eor	r25, r24
    17b6:	82 2b       	or	r24, r18
    17b8:	8c 93       	st	X, r24
    17ba:	31 c0       	rjmp	.+98     	; 0x181e <DIO_VidSet4MSBValue+0x116>
		break;
	case DIO_PORTC:
		PORTC&=0x0F;
    17bc:	a5 e3       	ldi	r26, 0x35	; 53
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e5 e3       	ldi	r30, 0x35	; 53
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8f 70       	andi	r24, 0x0F	; 15
    17c8:	8c 93       	st	X, r24
		PORTC|=(Copy_u8PinsValue<<4);
    17ca:	a5 e3       	ldi	r26, 0x35	; 53
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e5 e3       	ldi	r30, 0x35	; 53
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	28 2f       	mov	r18, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	82 95       	swap	r24
    17de:	92 95       	swap	r25
    17e0:	90 7f       	andi	r25, 0xF0	; 240
    17e2:	98 27       	eor	r25, r24
    17e4:	80 7f       	andi	r24, 0xF0	; 240
    17e6:	98 27       	eor	r25, r24
    17e8:	82 2b       	or	r24, r18
    17ea:	8c 93       	st	X, r24
    17ec:	18 c0       	rjmp	.+48     	; 0x181e <DIO_VidSet4MSBValue+0x116>
		break;
	case DIO_PORTD:
		PORTD&=0x0F;
    17ee:	a2 e3       	ldi	r26, 0x32	; 50
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e2 e3       	ldi	r30, 0x32	; 50
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	8f 70       	andi	r24, 0x0F	; 15
    17fa:	8c 93       	st	X, r24
		PORTD|=(Copy_u8PinsValue<<4);
    17fc:	a2 e3       	ldi	r26, 0x32	; 50
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e2 e3       	ldi	r30, 0x32	; 50
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	28 2f       	mov	r18, r24
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	88 2f       	mov	r24, r24
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	82 95       	swap	r24
    1810:	92 95       	swap	r25
    1812:	90 7f       	andi	r25, 0xF0	; 240
    1814:	98 27       	eor	r25, r24
    1816:	80 7f       	andi	r24, 0xF0	; 240
    1818:	98 27       	eor	r25, r24
    181a:	82 2b       	or	r24, r18
    181c:	8c 93       	st	X, r24
		break;
	}
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <DIO_VidSetLSBValue>:
/*Set 4LSB Value*/
void DIO_VidSetLSBValue(u8 Copy_u8PortName,u8 Copy_u8PinsValue)
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <DIO_VidSetLSBValue+0x6>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <DIO_VidSetLSBValue+0x8>
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	3c 83       	std	Y+4, r19	; 0x04
    1844:	2b 83       	std	Y+3, r18	; 0x03
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	91 05       	cpc	r25, r1
    184e:	29 f1       	breq	.+74     	; 0x189a <DIO_VidSetLSBValue+0x6e>
    1850:	2b 81       	ldd	r18, Y+3	; 0x03
    1852:	3c 81       	ldd	r19, Y+4	; 0x04
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	2c f4       	brge	.+10     	; 0x1864 <DIO_VidSetLSBValue+0x38>
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	61 f0       	breq	.+24     	; 0x187a <DIO_VidSetLSBValue+0x4e>
    1862:	4a c0       	rjmp	.+148    	; 0x18f8 <DIO_VidSetLSBValue+0xcc>
    1864:	2b 81       	ldd	r18, Y+3	; 0x03
    1866:	3c 81       	ldd	r19, Y+4	; 0x04
    1868:	22 30       	cpi	r18, 0x02	; 2
    186a:	31 05       	cpc	r19, r1
    186c:	31 f1       	breq	.+76     	; 0x18ba <DIO_VidSetLSBValue+0x8e>
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	9c 81       	ldd	r25, Y+4	; 0x04
    1872:	83 30       	cpi	r24, 0x03	; 3
    1874:	91 05       	cpc	r25, r1
    1876:	89 f1       	breq	.+98     	; 0x18da <DIO_VidSetLSBValue+0xae>
    1878:	3f c0       	rjmp	.+126    	; 0x18f8 <DIO_VidSetLSBValue+0xcc>
	{
	case DIO_PORTA:
		PORTA&=0xF0;
    187a:	ab e3       	ldi	r26, 0x3B	; 59
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	eb e3       	ldi	r30, 0x3B	; 59
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	80 7f       	andi	r24, 0xF0	; 240
    1886:	8c 93       	st	X, r24
		PORTA|=Copy_u8PinsValue;
    1888:	ab e3       	ldi	r26, 0x3B	; 59
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	eb e3       	ldi	r30, 0x3B	; 59
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	90 81       	ld	r25, Z
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	89 2b       	or	r24, r25
    1896:	8c 93       	st	X, r24
    1898:	2f c0       	rjmp	.+94     	; 0x18f8 <DIO_VidSetLSBValue+0xcc>
		break;
	case DIO_PORTB:
		PORTB&=0xF0;
    189a:	a8 e3       	ldi	r26, 0x38	; 56
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e8 e3       	ldi	r30, 0x38	; 56
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	80 7f       	andi	r24, 0xF0	; 240
    18a6:	8c 93       	st	X, r24
		PORTB|=Copy_u8PinsValue;
    18a8:	a8 e3       	ldi	r26, 0x38	; 56
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e8 e3       	ldi	r30, 0x38	; 56
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	90 81       	ld	r25, Z
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	89 2b       	or	r24, r25
    18b6:	8c 93       	st	X, r24
    18b8:	1f c0       	rjmp	.+62     	; 0x18f8 <DIO_VidSetLSBValue+0xcc>
		break;
	case DIO_PORTC:
		PORTC&=0xF0;
    18ba:	a5 e3       	ldi	r26, 0x35	; 53
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e5 e3       	ldi	r30, 0x35	; 53
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	80 7f       	andi	r24, 0xF0	; 240
    18c6:	8c 93       	st	X, r24
		PORTC|=Copy_u8PinsValue;
    18c8:	a5 e3       	ldi	r26, 0x35	; 53
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e5 e3       	ldi	r30, 0x35	; 53
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	90 81       	ld	r25, Z
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	89 2b       	or	r24, r25
    18d6:	8c 93       	st	X, r24
    18d8:	0f c0       	rjmp	.+30     	; 0x18f8 <DIO_VidSetLSBValue+0xcc>
		break;
	case DIO_PORTD:
		PORTD&=0xF0;
    18da:	a2 e3       	ldi	r26, 0x32	; 50
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e2 e3       	ldi	r30, 0x32	; 50
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	80 7f       	andi	r24, 0xF0	; 240
    18e6:	8c 93       	st	X, r24
		PORTD|=Copy_u8PinsValue;
    18e8:	a2 e3       	ldi	r26, 0x32	; 50
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e2 e3       	ldi	r30, 0x32	; 50
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	90 81       	ld	r25, Z
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	89 2b       	or	r24, r25
    18f6:	8c 93       	st	X, r24
		break;
	}
}
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <GIE_VidEnable>:
#include "BIT_MATH.h"
#include "GIE_Private.h"

//Enable Global Interrupt
void GIE_VidEnable(void)
{
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    190e:	af e5       	ldi	r26, 0x5F	; 95
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	ef e5       	ldi	r30, 0x5F	; 95
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	80 68       	ori	r24, 0x80	; 128
    191a:	8c 93       	st	X, r24
}
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <GIE_VidDisable>:
//Disable Global Interrupt
void GIE_VidDisable(void)
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    192a:	af e5       	ldi	r26, 0x5F	; 95
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	ef e5       	ldi	r30, 0x5F	; 95
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8f 77       	andi	r24, 0x7F	; 127
    1936:	8c 93       	st	X, r24
}
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <GLCD_VidSendCommand>:
u8 Y = 0;   //Global Variable to Track Column Address
u8 X = 0;   //Global Variable to Track Page

//Send Command
void GLCD_VidSendCommand(u8 Copy_u8Command)
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	e1 97       	sbiw	r28, 0x31	; 49
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	89 ab       	std	Y+49, r24	; 0x31
	//Choose Write Mode (RW)
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN1,PIN_LOW);
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	61 e0       	ldi	r22, 0x01	; 1
    1958:	40 e0       	ldi	r20, 0x00	; 0
    195a:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	//Select Command Register (RS)
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN0,PIN_LOW);
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	40 e0       	ldi	r20, 0x00	; 0
    1964:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	//Send Command
	DIO_VidSetPortValue(GLCD_DATA_PORT,Copy_u8Command);
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	69 a9       	ldd	r22, Y+49	; 0x31
    196c:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_VidSetPortValue>
	//Enable
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN2,PIN_HIGH);
    1970:	82 e0       	ldi	r24, 0x02	; 2
    1972:	62 e0       	ldi	r22, 0x02	; 2
    1974:	41 e0       	ldi	r20, 0x01	; 1
    1976:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a0 ea       	ldi	r26, 0xA0	; 160
    1980:	b0 e4       	ldi	r27, 0x40	; 64
    1982:	8d a7       	std	Y+45, r24	; 0x2d
    1984:	9e a7       	std	Y+46, r25	; 0x2e
    1986:	af a7       	std	Y+47, r26	; 0x2f
    1988:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    198a:	6d a5       	ldd	r22, Y+45	; 0x2d
    198c:	7e a5       	ldd	r23, Y+46	; 0x2e
    198e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1990:	98 a9       	ldd	r25, Y+48	; 0x30
    1992:	2b ea       	ldi	r18, 0xAB	; 171
    1994:	3a ea       	ldi	r19, 0xAA	; 170
    1996:	4a e2       	ldi	r20, 0x2A	; 42
    1998:	5f e3       	ldi	r21, 0x3F	; 63
    199a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	89 a7       	std	Y+41, r24	; 0x29
    19a4:	9a a7       	std	Y+42, r25	; 0x2a
    19a6:	ab a7       	std	Y+43, r26	; 0x2b
    19a8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    19aa:	69 a5       	ldd	r22, Y+41	; 0x29
    19ac:	7a a5       	ldd	r23, Y+42	; 0x2a
    19ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    19b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e8       	ldi	r20, 0x80	; 128
    19b8:	5f e3       	ldi	r21, 0x3F	; 63
    19ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    19be:	88 23       	and	r24, r24
    19c0:	1c f4       	brge	.+6      	; 0x19c8 <GLCD_VidSendCommand+0x8a>
		__ticks = 1;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	88 a7       	std	Y+40, r24	; 0x28
    19c6:	91 c0       	rjmp	.+290    	; 0x1aea <GLCD_VidSendCommand+0x1ac>
	else if (__tmp > 255)
    19c8:	69 a5       	ldd	r22, Y+41	; 0x29
    19ca:	7a a5       	ldd	r23, Y+42	; 0x2a
    19cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    19ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	4f e7       	ldi	r20, 0x7F	; 127
    19d6:	53 e4       	ldi	r21, 0x43	; 67
    19d8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    19dc:	18 16       	cp	r1, r24
    19de:	0c f0       	brlt	.+2      	; 0x19e2 <GLCD_VidSendCommand+0xa4>
    19e0:	7b c0       	rjmp	.+246    	; 0x1ad8 <GLCD_VidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    19e2:	6d a5       	ldd	r22, Y+45	; 0x2d
    19e4:	7e a5       	ldd	r23, Y+46	; 0x2e
    19e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19e8:	98 a9       	ldd	r25, Y+48	; 0x30
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a e7       	ldi	r20, 0x7A	; 122
    19f0:	54 e4       	ldi	r21, 0x44	; 68
    19f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	8c a3       	std	Y+36, r24	; 0x24
    19fc:	9d a3       	std	Y+37, r25	; 0x25
    19fe:	ae a3       	std	Y+38, r26	; 0x26
    1a00:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a02:	6c a1       	ldd	r22, Y+36	; 0x24
    1a04:	7d a1       	ldd	r23, Y+37	; 0x25
    1a06:	8e a1       	ldd	r24, Y+38	; 0x26
    1a08:	9f a1       	ldd	r25, Y+39	; 0x27
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	4a ef       	ldi	r20, 0xFA	; 250
    1a10:	53 e4       	ldi	r21, 0x43	; 67
    1a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	88 a3       	std	Y+32, r24	; 0x20
    1a1c:	99 a3       	std	Y+33, r25	; 0x21
    1a1e:	aa a3       	std	Y+34, r26	; 0x22
    1a20:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1a22:	68 a1       	ldd	r22, Y+32	; 0x20
    1a24:	79 a1       	ldd	r23, Y+33	; 0x21
    1a26:	8a a1       	ldd	r24, Y+34	; 0x22
    1a28:	9b a1       	ldd	r25, Y+35	; 0x23
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e8       	ldi	r20, 0x80	; 128
    1a30:	5f e3       	ldi	r21, 0x3F	; 63
    1a32:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1a36:	88 23       	and	r24, r24
    1a38:	2c f4       	brge	.+10     	; 0x1a44 <GLCD_VidSendCommand+0x106>
		__ticks = 1;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	9f 8f       	std	Y+31, r25	; 0x1f
    1a40:	8e 8f       	std	Y+30, r24	; 0x1e
    1a42:	3f c0       	rjmp	.+126    	; 0x1ac2 <GLCD_VidSendCommand+0x184>
	else if (__tmp > 65535)
    1a44:	68 a1       	ldd	r22, Y+32	; 0x20
    1a46:	79 a1       	ldd	r23, Y+33	; 0x21
    1a48:	8a a1       	ldd	r24, Y+34	; 0x22
    1a4a:	9b a1       	ldd	r25, Y+35	; 0x23
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	3f ef       	ldi	r19, 0xFF	; 255
    1a50:	4f e7       	ldi	r20, 0x7F	; 127
    1a52:	57 e4       	ldi	r21, 0x47	; 71
    1a54:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1a58:	18 16       	cp	r1, r24
    1a5a:	4c f5       	brge	.+82     	; 0x1aae <GLCD_VidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5c:	6c a1       	ldd	r22, Y+36	; 0x24
    1a5e:	7d a1       	ldd	r23, Y+37	; 0x25
    1a60:	8e a1       	ldd	r24, Y+38	; 0x26
    1a62:	9f a1       	ldd	r25, Y+39	; 0x27
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e2       	ldi	r20, 0x20	; 32
    1a6a:	51 e4       	ldi	r21, 0x41	; 65
    1a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	bc 01       	movw	r22, r24
    1a76:	cd 01       	movw	r24, r26
    1a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9f 8f       	std	Y+31, r25	; 0x1f
    1a82:	8e 8f       	std	Y+30, r24	; 0x1e
    1a84:	0f c0       	rjmp	.+30     	; 0x1aa4 <GLCD_VidSendCommand+0x166>
    1a86:	82 e3       	ldi	r24, 0x32	; 50
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	9d 8f       	std	Y+29, r25	; 0x1d
    1a8c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a8e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a90:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <GLCD_VidSendCommand+0x154>
    1a96:	9d 8f       	std	Y+29, r25	; 0x1d
    1a98:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a9c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	9f 8f       	std	Y+31, r25	; 0x1f
    1aa2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aa6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	69 f7       	brne	.-38     	; 0x1a86 <GLCD_VidSendCommand+0x148>
    1aac:	24 c0       	rjmp	.+72     	; 0x1af6 <GLCD_VidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aae:	68 a1       	ldd	r22, Y+32	; 0x20
    1ab0:	79 a1       	ldd	r23, Y+33	; 0x21
    1ab2:	8a a1       	ldd	r24, Y+34	; 0x22
    1ab4:	9b a1       	ldd	r25, Y+35	; 0x23
    1ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	9f 8f       	std	Y+31, r25	; 0x1f
    1ac0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ac2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ac4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ac6:	9b 8f       	std	Y+27, r25	; 0x1b
    1ac8:	8a 8f       	std	Y+26, r24	; 0x1a
    1aca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1acc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <GLCD_VidSendCommand+0x190>
    1ad2:	9b 8f       	std	Y+27, r25	; 0x1b
    1ad4:	8a 8f       	std	Y+26, r24	; 0x1a
    1ad6:	0f c0       	rjmp	.+30     	; 0x1af6 <GLCD_VidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ad8:	69 a5       	ldd	r22, Y+41	; 0x29
    1ada:	7a a5       	ldd	r23, Y+42	; 0x2a
    1adc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ade:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	88 a7       	std	Y+40, r24	; 0x28
    1aea:	88 a5       	ldd	r24, Y+40	; 0x28
    1aec:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1aee:	89 8d       	ldd	r24, Y+25	; 0x19
    1af0:	8a 95       	dec	r24
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <GLCD_VidSendCommand+0x1b2>
    1af4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN2,PIN_LOW);
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	62 e0       	ldi	r22, 0x02	; 2
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a0 ea       	ldi	r26, 0xA0	; 160
    1b06:	b0 e4       	ldi	r27, 0x40	; 64
    1b08:	8d 8b       	std	Y+21, r24	; 0x15
    1b0a:	9e 8b       	std	Y+22, r25	; 0x16
    1b0c:	af 8b       	std	Y+23, r26	; 0x17
    1b0e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b10:	6d 89       	ldd	r22, Y+21	; 0x15
    1b12:	7e 89       	ldd	r23, Y+22	; 0x16
    1b14:	8f 89       	ldd	r24, Y+23	; 0x17
    1b16:	98 8d       	ldd	r25, Y+24	; 0x18
    1b18:	2b ea       	ldi	r18, 0xAB	; 171
    1b1a:	3a ea       	ldi	r19, 0xAA	; 170
    1b1c:	4a e2       	ldi	r20, 0x2A	; 42
    1b1e:	5f e3       	ldi	r21, 0x3F	; 63
    1b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	89 8b       	std	Y+17, r24	; 0x11
    1b2a:	9a 8b       	std	Y+18, r25	; 0x12
    1b2c:	ab 8b       	std	Y+19, r26	; 0x13
    1b2e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1b30:	69 89       	ldd	r22, Y+17	; 0x11
    1b32:	7a 89       	ldd	r23, Y+18	; 0x12
    1b34:	8b 89       	ldd	r24, Y+19	; 0x13
    1b36:	9c 89       	ldd	r25, Y+20	; 0x14
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e8       	ldi	r20, 0x80	; 128
    1b3e:	5f e3       	ldi	r21, 0x3F	; 63
    1b40:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1b44:	88 23       	and	r24, r24
    1b46:	1c f4       	brge	.+6      	; 0x1b4e <GLCD_VidSendCommand+0x210>
		__ticks = 1;
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	88 8b       	std	Y+16, r24	; 0x10
    1b4c:	91 c0       	rjmp	.+290    	; 0x1c70 <GLCD_VidSendCommand+0x332>
	else if (__tmp > 255)
    1b4e:	69 89       	ldd	r22, Y+17	; 0x11
    1b50:	7a 89       	ldd	r23, Y+18	; 0x12
    1b52:	8b 89       	ldd	r24, Y+19	; 0x13
    1b54:	9c 89       	ldd	r25, Y+20	; 0x14
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	4f e7       	ldi	r20, 0x7F	; 127
    1b5c:	53 e4       	ldi	r21, 0x43	; 67
    1b5e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1b62:	18 16       	cp	r1, r24
    1b64:	0c f0       	brlt	.+2      	; 0x1b68 <GLCD_VidSendCommand+0x22a>
    1b66:	7b c0       	rjmp	.+246    	; 0x1c5e <GLCD_VidSendCommand+0x320>
	{
		_delay_ms(__us / 1000.0);
    1b68:	6d 89       	ldd	r22, Y+21	; 0x15
    1b6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	4a e7       	ldi	r20, 0x7A	; 122
    1b76:	54 e4       	ldi	r21, 0x44	; 68
    1b78:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	8c 87       	std	Y+12, r24	; 0x0c
    1b82:	9d 87       	std	Y+13, r25	; 0x0d
    1b84:	ae 87       	std	Y+14, r26	; 0x0e
    1b86:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b88:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b8a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	4a ef       	ldi	r20, 0xFA	; 250
    1b96:	53 e4       	ldi	r21, 0x43	; 67
    1b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	88 87       	std	Y+8, r24	; 0x08
    1ba2:	99 87       	std	Y+9, r25	; 0x09
    1ba4:	aa 87       	std	Y+10, r26	; 0x0a
    1ba6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ba8:	68 85       	ldd	r22, Y+8	; 0x08
    1baa:	79 85       	ldd	r23, Y+9	; 0x09
    1bac:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bae:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e8       	ldi	r20, 0x80	; 128
    1bb6:	5f e3       	ldi	r21, 0x3F	; 63
    1bb8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1bbc:	88 23       	and	r24, r24
    1bbe:	2c f4       	brge	.+10     	; 0x1bca <GLCD_VidSendCommand+0x28c>
		__ticks = 1;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9f 83       	std	Y+7, r25	; 0x07
    1bc6:	8e 83       	std	Y+6, r24	; 0x06
    1bc8:	3f c0       	rjmp	.+126    	; 0x1c48 <GLCD_VidSendCommand+0x30a>
	else if (__tmp > 65535)
    1bca:	68 85       	ldd	r22, Y+8	; 0x08
    1bcc:	79 85       	ldd	r23, Y+9	; 0x09
    1bce:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bd0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	3f ef       	ldi	r19, 0xFF	; 255
    1bd6:	4f e7       	ldi	r20, 0x7F	; 127
    1bd8:	57 e4       	ldi	r21, 0x47	; 71
    1bda:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1bde:	18 16       	cp	r1, r24
    1be0:	4c f5       	brge	.+82     	; 0x1c34 <GLCD_VidSendCommand+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1be4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1be6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1be8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e2       	ldi	r20, 0x20	; 32
    1bf0:	51 e4       	ldi	r21, 0x41	; 65
    1bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9f 83       	std	Y+7, r25	; 0x07
    1c08:	8e 83       	std	Y+6, r24	; 0x06
    1c0a:	0f c0       	rjmp	.+30     	; 0x1c2a <GLCD_VidSendCommand+0x2ec>
    1c0c:	82 e3       	ldi	r24, 0x32	; 50
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	9d 83       	std	Y+5, r25	; 0x05
    1c12:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c14:	8c 81       	ldd	r24, Y+4	; 0x04
    1c16:	9d 81       	ldd	r25, Y+5	; 0x05
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <GLCD_VidSendCommand+0x2da>
    1c1c:	9d 83       	std	Y+5, r25	; 0x05
    1c1e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c20:	8e 81       	ldd	r24, Y+6	; 0x06
    1c22:	9f 81       	ldd	r25, Y+7	; 0x07
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	9f 83       	std	Y+7, r25	; 0x07
    1c28:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	69 f7       	brne	.-38     	; 0x1c0c <GLCD_VidSendCommand+0x2ce>
    1c32:	24 c0       	rjmp	.+72     	; 0x1c7c <GLCD_VidSendCommand+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c34:	68 85       	ldd	r22, Y+8	; 0x08
    1c36:	79 85       	ldd	r23, Y+9	; 0x09
    1c38:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	9f 83       	std	Y+7, r25	; 0x07
    1c46:	8e 83       	std	Y+6, r24	; 0x06
    1c48:	8e 81       	ldd	r24, Y+6	; 0x06
    1c4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c4c:	9b 83       	std	Y+3, r25	; 0x03
    1c4e:	8a 83       	std	Y+2, r24	; 0x02
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	9b 81       	ldd	r25, Y+3	; 0x03
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <GLCD_VidSendCommand+0x316>
    1c58:	9b 83       	std	Y+3, r25	; 0x03
    1c5a:	8a 83       	std	Y+2, r24	; 0x02
    1c5c:	0f c0       	rjmp	.+30     	; 0x1c7c <GLCD_VidSendCommand+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c5e:	69 89       	ldd	r22, Y+17	; 0x11
    1c60:	7a 89       	ldd	r23, Y+18	; 0x12
    1c62:	8b 89       	ldd	r24, Y+19	; 0x13
    1c64:	9c 89       	ldd	r25, Y+20	; 0x14
    1c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	88 8b       	std	Y+16, r24	; 0x10
    1c70:	88 89       	ldd	r24, Y+16	; 0x10
    1c72:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	8a 95       	dec	r24
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <GLCD_VidSendCommand+0x338>
    1c7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    1c7c:	e1 96       	adiw	r28, 0x31	; 49
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <GLCD_VidInit>:
//GLCD Initialization
void GLCD_VidInit(void)
{
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	2e 97       	sbiw	r28, 0x0e	; 14
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
	//Select CS1, CS2 & Set Reset Pin to High
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_HIGH);
    1ca2:	82 e0       	ldi	r24, 0x02	; 2
    1ca4:	63 e0       	ldi	r22, 0x03	; 3
    1ca6:	41 e0       	ldi	r20, 0x01	; 1
    1ca8:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	64 e0       	ldi	r22, 0x04	; 4
    1cb0:	41 e0       	ldi	r20, 0x01	; 1
    1cb2:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN5,PIN_HIGH);
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	65 e0       	ldi	r22, 0x05	; 5
    1cba:	41 e0       	ldi	r20, 0x01	; 1
    1cbc:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a0 ea       	ldi	r26, 0xA0	; 160
    1cc6:	b1 e4       	ldi	r27, 0x41	; 65
    1cc8:	8b 87       	std	Y+11, r24	; 0x0b
    1cca:	9c 87       	std	Y+12, r25	; 0x0c
    1ccc:	ad 87       	std	Y+13, r26	; 0x0d
    1cce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	4a ef       	ldi	r20, 0xFA	; 250
    1cde:	53 e4       	ldi	r21, 0x43	; 67
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	8f 83       	std	Y+7, r24	; 0x07
    1cea:	98 87       	std	Y+8, r25	; 0x08
    1cec:	a9 87       	std	Y+9, r26	; 0x09
    1cee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf2:	78 85       	ldd	r23, Y+8	; 0x08
    1cf4:	89 85       	ldd	r24, Y+9	; 0x09
    1cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e8       	ldi	r20, 0x80	; 128
    1cfe:	5f e3       	ldi	r21, 0x3F	; 63
    1d00:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1d04:	88 23       	and	r24, r24
    1d06:	2c f4       	brge	.+10     	; 0x1d12 <GLCD_VidInit+0x84>
		__ticks = 1;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	8d 83       	std	Y+5, r24	; 0x05
    1d10:	3f c0       	rjmp	.+126    	; 0x1d90 <GLCD_VidInit+0x102>
	else if (__tmp > 65535)
    1d12:	6f 81       	ldd	r22, Y+7	; 0x07
    1d14:	78 85       	ldd	r23, Y+8	; 0x08
    1d16:	89 85       	ldd	r24, Y+9	; 0x09
    1d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	3f ef       	ldi	r19, 0xFF	; 255
    1d1e:	4f e7       	ldi	r20, 0x7F	; 127
    1d20:	57 e4       	ldi	r21, 0x47	; 71
    1d22:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1d26:	18 16       	cp	r1, r24
    1d28:	4c f5       	brge	.+82     	; 0x1d7c <GLCD_VidInit+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e2       	ldi	r20, 0x20	; 32
    1d38:	51 e4       	ldi	r21, 0x41	; 65
    1d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	bc 01       	movw	r22, r24
    1d44:	cd 01       	movw	r24, r26
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9e 83       	std	Y+6, r25	; 0x06
    1d50:	8d 83       	std	Y+5, r24	; 0x05
    1d52:	0f c0       	rjmp	.+30     	; 0x1d72 <GLCD_VidInit+0xe4>
    1d54:	82 e3       	ldi	r24, 0x32	; 50
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9c 83       	std	Y+4, r25	; 0x04
    1d5a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <GLCD_VidInit+0xd2>
    1d64:	9c 83       	std	Y+4, r25	; 0x04
    1d66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d68:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	9e 83       	std	Y+6, r25	; 0x06
    1d70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	69 f7       	brne	.-38     	; 0x1d54 <GLCD_VidInit+0xc6>
    1d7a:	14 c0       	rjmp	.+40     	; 0x1da4 <GLCD_VidInit+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7e:	78 85       	ldd	r23, Y+8	; 0x08
    1d80:	89 85       	ldd	r24, Y+9	; 0x09
    1d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <GLCD_VidInit+0x10e>
    1da0:	9a 83       	std	Y+2, r25	; 0x02
    1da2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	GLCD_VidSendCommand(GLCD_DISPLAY_OFF);   //Display Off
    1da4:	8e e3       	ldi	r24, 0x3E	; 62
    1da6:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
	GLCD_VidSendCommand(GLCD_START_COLUMN);  //Set Column to address 0x40
    1daa:	80 e4       	ldi	r24, 0x40	; 64
    1dac:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
	GLCD_VidSendCommand(GLCD_START_PAGE);    //Set Page to 0xB8
    1db0:	88 eb       	ldi	r24, 0xB8	; 184
    1db2:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
	GLCD_VidSendCommand(GLCD_START_LINE);    //Set Line to 0xC0
    1db6:	80 ec       	ldi	r24, 0xC0	; 192
    1db8:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
	GLCD_VidSendCommand(GLCD_DISPLAY_ON);    //Display On
    1dbc:	8f e3       	ldi	r24, 0x3F	; 63
    1dbe:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
}
    1dc2:	2e 96       	adiw	r28, 0x0e	; 14
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <GLCD_VidSendData>:
//Send Data
void GLCD_VidSendData(u8 Copy_u8Data)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	e1 97       	sbiw	r28, 0x31	; 49
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	89 ab       	std	Y+49, r24	; 0x31
	//Choose Write Mode (RW)
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN1,PIN_LOW);
    1dea:	82 e0       	ldi	r24, 0x02	; 2
    1dec:	61 e0       	ldi	r22, 0x01	; 1
    1dee:	40 e0       	ldi	r20, 0x00	; 0
    1df0:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	//Select Data Register (RS)
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN0,PIN_HIGH);
    1df4:	82 e0       	ldi	r24, 0x02	; 2
    1df6:	60 e0       	ldi	r22, 0x00	; 0
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	//Send Command
	DIO_VidSetPortValue(GLCD_DATA_PORT,Copy_u8Data);
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	69 a9       	ldd	r22, Y+49	; 0x31
    1e02:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_VidSetPortValue>
	//Enable
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN2,PIN_HIGH);
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	62 e0       	ldi	r22, 0x02	; 2
    1e0a:	41 e0       	ldi	r20, 0x01	; 1
    1e0c:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	a0 ea       	ldi	r26, 0xA0	; 160
    1e16:	b0 e4       	ldi	r27, 0x40	; 64
    1e18:	8d a7       	std	Y+45, r24	; 0x2d
    1e1a:	9e a7       	std	Y+46, r25	; 0x2e
    1e1c:	af a7       	std	Y+47, r26	; 0x2f
    1e1e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e20:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e22:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e26:	98 a9       	ldd	r25, Y+48	; 0x30
    1e28:	2b ea       	ldi	r18, 0xAB	; 171
    1e2a:	3a ea       	ldi	r19, 0xAA	; 170
    1e2c:	4a e2       	ldi	r20, 0x2A	; 42
    1e2e:	5f e3       	ldi	r21, 0x3F	; 63
    1e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	89 a7       	std	Y+41, r24	; 0x29
    1e3a:	9a a7       	std	Y+42, r25	; 0x2a
    1e3c:	ab a7       	std	Y+43, r26	; 0x2b
    1e3e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e40:	69 a5       	ldd	r22, Y+41	; 0x29
    1e42:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e44:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e46:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e8       	ldi	r20, 0x80	; 128
    1e4e:	5f e3       	ldi	r21, 0x3F	; 63
    1e50:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1e54:	88 23       	and	r24, r24
    1e56:	1c f4       	brge	.+6      	; 0x1e5e <GLCD_VidSendData+0x8a>
		__ticks = 1;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	88 a7       	std	Y+40, r24	; 0x28
    1e5c:	91 c0       	rjmp	.+290    	; 0x1f80 <GLCD_VidSendData+0x1ac>
	else if (__tmp > 255)
    1e5e:	69 a5       	ldd	r22, Y+41	; 0x29
    1e60:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e62:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e64:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	4f e7       	ldi	r20, 0x7F	; 127
    1e6c:	53 e4       	ldi	r21, 0x43	; 67
    1e6e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1e72:	18 16       	cp	r1, r24
    1e74:	0c f0       	brlt	.+2      	; 0x1e78 <GLCD_VidSendData+0xa4>
    1e76:	7b c0       	rjmp	.+246    	; 0x1f6e <GLCD_VidSendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1e78:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e7a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4a e7       	ldi	r20, 0x7A	; 122
    1e86:	54 e4       	ldi	r21, 0x44	; 68
    1e88:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8c a3       	std	Y+36, r24	; 0x24
    1e92:	9d a3       	std	Y+37, r25	; 0x25
    1e94:	ae a3       	std	Y+38, r26	; 0x26
    1e96:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e98:	6c a1       	ldd	r22, Y+36	; 0x24
    1e9a:	7d a1       	ldd	r23, Y+37	; 0x25
    1e9c:	8e a1       	ldd	r24, Y+38	; 0x26
    1e9e:	9f a1       	ldd	r25, Y+39	; 0x27
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	4a ef       	ldi	r20, 0xFA	; 250
    1ea6:	53 e4       	ldi	r21, 0x43	; 67
    1ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	88 a3       	std	Y+32, r24	; 0x20
    1eb2:	99 a3       	std	Y+33, r25	; 0x21
    1eb4:	aa a3       	std	Y+34, r26	; 0x22
    1eb6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1eb8:	68 a1       	ldd	r22, Y+32	; 0x20
    1eba:	79 a1       	ldd	r23, Y+33	; 0x21
    1ebc:	8a a1       	ldd	r24, Y+34	; 0x22
    1ebe:	9b a1       	ldd	r25, Y+35	; 0x23
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e8       	ldi	r20, 0x80	; 128
    1ec6:	5f e3       	ldi	r21, 0x3F	; 63
    1ec8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1ecc:	88 23       	and	r24, r24
    1ece:	2c f4       	brge	.+10     	; 0x1eda <GLCD_VidSendData+0x106>
		__ticks = 1;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9f 8f       	std	Y+31, r25	; 0x1f
    1ed6:	8e 8f       	std	Y+30, r24	; 0x1e
    1ed8:	3f c0       	rjmp	.+126    	; 0x1f58 <GLCD_VidSendData+0x184>
	else if (__tmp > 65535)
    1eda:	68 a1       	ldd	r22, Y+32	; 0x20
    1edc:	79 a1       	ldd	r23, Y+33	; 0x21
    1ede:	8a a1       	ldd	r24, Y+34	; 0x22
    1ee0:	9b a1       	ldd	r25, Y+35	; 0x23
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	3f ef       	ldi	r19, 0xFF	; 255
    1ee6:	4f e7       	ldi	r20, 0x7F	; 127
    1ee8:	57 e4       	ldi	r21, 0x47	; 71
    1eea:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1eee:	18 16       	cp	r1, r24
    1ef0:	4c f5       	brge	.+82     	; 0x1f44 <GLCD_VidSendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef2:	6c a1       	ldd	r22, Y+36	; 0x24
    1ef4:	7d a1       	ldd	r23, Y+37	; 0x25
    1ef6:	8e a1       	ldd	r24, Y+38	; 0x26
    1ef8:	9f a1       	ldd	r25, Y+39	; 0x27
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e2       	ldi	r20, 0x20	; 32
    1f00:	51 e4       	ldi	r21, 0x41	; 65
    1f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	bc 01       	movw	r22, r24
    1f0c:	cd 01       	movw	r24, r26
    1f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	9f 8f       	std	Y+31, r25	; 0x1f
    1f18:	8e 8f       	std	Y+30, r24	; 0x1e
    1f1a:	0f c0       	rjmp	.+30     	; 0x1f3a <GLCD_VidSendData+0x166>
    1f1c:	82 e3       	ldi	r24, 0x32	; 50
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	9d 8f       	std	Y+29, r25	; 0x1d
    1f22:	8c 8f       	std	Y+28, r24	; 0x1c
    1f24:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f26:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <GLCD_VidSendData+0x154>
    1f2c:	9d 8f       	std	Y+29, r25	; 0x1d
    1f2e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f32:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	9f 8f       	std	Y+31, r25	; 0x1f
    1f38:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f3c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	69 f7       	brne	.-38     	; 0x1f1c <GLCD_VidSendData+0x148>
    1f42:	24 c0       	rjmp	.+72     	; 0x1f8c <GLCD_VidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f44:	68 a1       	ldd	r22, Y+32	; 0x20
    1f46:	79 a1       	ldd	r23, Y+33	; 0x21
    1f48:	8a a1       	ldd	r24, Y+34	; 0x22
    1f4a:	9b a1       	ldd	r25, Y+35	; 0x23
    1f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	9f 8f       	std	Y+31, r25	; 0x1f
    1f56:	8e 8f       	std	Y+30, r24	; 0x1e
    1f58:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f5a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f5c:	9b 8f       	std	Y+27, r25	; 0x1b
    1f5e:	8a 8f       	std	Y+26, r24	; 0x1a
    1f60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f62:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <GLCD_VidSendData+0x190>
    1f68:	9b 8f       	std	Y+27, r25	; 0x1b
    1f6a:	8a 8f       	std	Y+26, r24	; 0x1a
    1f6c:	0f c0       	rjmp	.+30     	; 0x1f8c <GLCD_VidSendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f6e:	69 a5       	ldd	r22, Y+41	; 0x29
    1f70:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f72:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f74:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	88 a7       	std	Y+40, r24	; 0x28
    1f80:	88 a5       	ldd	r24, Y+40	; 0x28
    1f82:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f84:	89 8d       	ldd	r24, Y+25	; 0x19
    1f86:	8a 95       	dec	r24
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <GLCD_VidSendData+0x1b2>
    1f8a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN2,PIN_LOW);
    1f8c:	82 e0       	ldi	r24, 0x02	; 2
    1f8e:	62 e0       	ldi	r22, 0x02	; 2
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a0 ea       	ldi	r26, 0xA0	; 160
    1f9c:	b0 e4       	ldi	r27, 0x40	; 64
    1f9e:	8d 8b       	std	Y+21, r24	; 0x15
    1fa0:	9e 8b       	std	Y+22, r25	; 0x16
    1fa2:	af 8b       	std	Y+23, r26	; 0x17
    1fa4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fa6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa8:	7e 89       	ldd	r23, Y+22	; 0x16
    1faa:	8f 89       	ldd	r24, Y+23	; 0x17
    1fac:	98 8d       	ldd	r25, Y+24	; 0x18
    1fae:	2b ea       	ldi	r18, 0xAB	; 171
    1fb0:	3a ea       	ldi	r19, 0xAA	; 170
    1fb2:	4a e2       	ldi	r20, 0x2A	; 42
    1fb4:	5f e3       	ldi	r21, 0x3F	; 63
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	89 8b       	std	Y+17, r24	; 0x11
    1fc0:	9a 8b       	std	Y+18, r25	; 0x12
    1fc2:	ab 8b       	std	Y+19, r26	; 0x13
    1fc4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fc6:	69 89       	ldd	r22, Y+17	; 0x11
    1fc8:	7a 89       	ldd	r23, Y+18	; 0x12
    1fca:	8b 89       	ldd	r24, Y+19	; 0x13
    1fcc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e8       	ldi	r20, 0x80	; 128
    1fd4:	5f e3       	ldi	r21, 0x3F	; 63
    1fd6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1fda:	88 23       	and	r24, r24
    1fdc:	1c f4       	brge	.+6      	; 0x1fe4 <GLCD_VidSendData+0x210>
		__ticks = 1;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	88 8b       	std	Y+16, r24	; 0x10
    1fe2:	91 c0       	rjmp	.+290    	; 0x2106 <GLCD_VidSendData+0x332>
	else if (__tmp > 255)
    1fe4:	69 89       	ldd	r22, Y+17	; 0x11
    1fe6:	7a 89       	ldd	r23, Y+18	; 0x12
    1fe8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fea:	9c 89       	ldd	r25, Y+20	; 0x14
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	4f e7       	ldi	r20, 0x7F	; 127
    1ff2:	53 e4       	ldi	r21, 0x43	; 67
    1ff4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1ff8:	18 16       	cp	r1, r24
    1ffa:	0c f0       	brlt	.+2      	; 0x1ffe <GLCD_VidSendData+0x22a>
    1ffc:	7b c0       	rjmp	.+246    	; 0x20f4 <GLCD_VidSendData+0x320>
	{
		_delay_ms(__us / 1000.0);
    1ffe:	6d 89       	ldd	r22, Y+21	; 0x15
    2000:	7e 89       	ldd	r23, Y+22	; 0x16
    2002:	8f 89       	ldd	r24, Y+23	; 0x17
    2004:	98 8d       	ldd	r25, Y+24	; 0x18
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a e7       	ldi	r20, 0x7A	; 122
    200c:	54 e4       	ldi	r21, 0x44	; 68
    200e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	8c 87       	std	Y+12, r24	; 0x0c
    2018:	9d 87       	std	Y+13, r25	; 0x0d
    201a:	ae 87       	std	Y+14, r26	; 0x0e
    201c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2020:	7d 85       	ldd	r23, Y+13	; 0x0d
    2022:	8e 85       	ldd	r24, Y+14	; 0x0e
    2024:	9f 85       	ldd	r25, Y+15	; 0x0f
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	4a ef       	ldi	r20, 0xFA	; 250
    202c:	53 e4       	ldi	r21, 0x43	; 67
    202e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	88 87       	std	Y+8, r24	; 0x08
    2038:	99 87       	std	Y+9, r25	; 0x09
    203a:	aa 87       	std	Y+10, r26	; 0x0a
    203c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    203e:	68 85       	ldd	r22, Y+8	; 0x08
    2040:	79 85       	ldd	r23, Y+9	; 0x09
    2042:	8a 85       	ldd	r24, Y+10	; 0x0a
    2044:	9b 85       	ldd	r25, Y+11	; 0x0b
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e8       	ldi	r20, 0x80	; 128
    204c:	5f e3       	ldi	r21, 0x3F	; 63
    204e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2052:	88 23       	and	r24, r24
    2054:	2c f4       	brge	.+10     	; 0x2060 <GLCD_VidSendData+0x28c>
		__ticks = 1;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9f 83       	std	Y+7, r25	; 0x07
    205c:	8e 83       	std	Y+6, r24	; 0x06
    205e:	3f c0       	rjmp	.+126    	; 0x20de <GLCD_VidSendData+0x30a>
	else if (__tmp > 65535)
    2060:	68 85       	ldd	r22, Y+8	; 0x08
    2062:	79 85       	ldd	r23, Y+9	; 0x09
    2064:	8a 85       	ldd	r24, Y+10	; 0x0a
    2066:	9b 85       	ldd	r25, Y+11	; 0x0b
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	3f ef       	ldi	r19, 0xFF	; 255
    206c:	4f e7       	ldi	r20, 0x7F	; 127
    206e:	57 e4       	ldi	r21, 0x47	; 71
    2070:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2074:	18 16       	cp	r1, r24
    2076:	4c f5       	brge	.+82     	; 0x20ca <GLCD_VidSendData+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2078:	6c 85       	ldd	r22, Y+12	; 0x0c
    207a:	7d 85       	ldd	r23, Y+13	; 0x0d
    207c:	8e 85       	ldd	r24, Y+14	; 0x0e
    207e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 e2       	ldi	r20, 0x20	; 32
    2086:	51 e4       	ldi	r21, 0x41	; 65
    2088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	bc 01       	movw	r22, r24
    2092:	cd 01       	movw	r24, r26
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	9f 83       	std	Y+7, r25	; 0x07
    209e:	8e 83       	std	Y+6, r24	; 0x06
    20a0:	0f c0       	rjmp	.+30     	; 0x20c0 <GLCD_VidSendData+0x2ec>
    20a2:	82 e3       	ldi	r24, 0x32	; 50
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	9d 83       	std	Y+5, r25	; 0x05
    20a8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20aa:	8c 81       	ldd	r24, Y+4	; 0x04
    20ac:	9d 81       	ldd	r25, Y+5	; 0x05
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <GLCD_VidSendData+0x2da>
    20b2:	9d 83       	std	Y+5, r25	; 0x05
    20b4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b6:	8e 81       	ldd	r24, Y+6	; 0x06
    20b8:	9f 81       	ldd	r25, Y+7	; 0x07
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	9f 83       	std	Y+7, r25	; 0x07
    20be:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c0:	8e 81       	ldd	r24, Y+6	; 0x06
    20c2:	9f 81       	ldd	r25, Y+7	; 0x07
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	69 f7       	brne	.-38     	; 0x20a2 <GLCD_VidSendData+0x2ce>
    20c8:	24 c0       	rjmp	.+72     	; 0x2112 <GLCD_VidSendData+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ca:	68 85       	ldd	r22, Y+8	; 0x08
    20cc:	79 85       	ldd	r23, Y+9	; 0x09
    20ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	9f 83       	std	Y+7, r25	; 0x07
    20dc:	8e 83       	std	Y+6, r24	; 0x06
    20de:	8e 81       	ldd	r24, Y+6	; 0x06
    20e0:	9f 81       	ldd	r25, Y+7	; 0x07
    20e2:	9b 83       	std	Y+3, r25	; 0x03
    20e4:	8a 83       	std	Y+2, r24	; 0x02
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <GLCD_VidSendData+0x316>
    20ee:	9b 83       	std	Y+3, r25	; 0x03
    20f0:	8a 83       	std	Y+2, r24	; 0x02
    20f2:	0f c0       	rjmp	.+30     	; 0x2112 <GLCD_VidSendData+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20f4:	69 89       	ldd	r22, Y+17	; 0x11
    20f6:	7a 89       	ldd	r23, Y+18	; 0x12
    20f8:	8b 89       	ldd	r24, Y+19	; 0x13
    20fa:	9c 89       	ldd	r25, Y+20	; 0x14
    20fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	88 8b       	std	Y+16, r24	; 0x10
    2106:	88 89       	ldd	r24, Y+16	; 0x10
    2108:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	8a 95       	dec	r24
    210e:	f1 f7       	brne	.-4      	; 0x210c <GLCD_VidSendData+0x338>
    2110:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    2112:	e1 96       	adiw	r28, 0x31	; 49
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <GLCD_VidClear>:
//Clear Screen
void GLCD_VidClear(void)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <GLCD_VidClear+0x6>
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
	// Select CS1 & CS2 (Both Left & Right Sides)
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_HIGH);
    212e:	82 e0       	ldi	r24, 0x02	; 2
    2130:	63 e0       	ldi	r22, 0x03	; 3
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
    2138:	82 e0       	ldi	r24, 0x02	; 2
    213a:	64 e0       	ldi	r22, 0x04	; 4
    213c:	41 e0       	ldi	r20, 0x01	; 1
    213e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	//GLCD_VidSendCommand(0xB8);   //Set Page to 0xB8
	//GLCD_VidSendCommand(0x40);   //Set Column to address 0x40
	u8 i;
	u8 ii;

	for(i=0;i<8;i++)
    2142:	1a 82       	std	Y+2, r1	; 0x02
    2144:	12 c0       	rjmp	.+36     	; 0x216a <GLCD_VidClear+0x46>
	{
		GLCD_VidSendCommand(0xB8 + i);   //Increment Page
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	88 54       	subi	r24, 0x48	; 72
    214a:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
		for(ii=0;ii<64;ii++)
    214e:	19 82       	std	Y+1, r1	; 0x01
    2150:	06 c0       	rjmp	.+12     	; 0x215e <GLCD_VidClear+0x3a>
		{
			GLCD_VidSendData(0x00);   //Write Zeros to All 64 Column
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <GLCD_VidSendData>
	u8 ii;

	for(i=0;i<8;i++)
	{
		GLCD_VidSendCommand(0xB8 + i);   //Increment Page
		for(ii=0;ii<64;ii++)
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	8f 5f       	subi	r24, 0xFF	; 255
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	80 34       	cpi	r24, 0x40	; 64
    2162:	b8 f3       	brcs	.-18     	; 0x2152 <GLCD_VidClear+0x2e>
	//GLCD_VidSendCommand(0xB8);   //Set Page to 0xB8
	//GLCD_VidSendCommand(0x40);   //Set Column to address 0x40
	u8 i;
	u8 ii;

	for(i=0;i<8;i++)
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	8f 5f       	subi	r24, 0xFF	; 255
    2168:	8a 83       	std	Y+2, r24	; 0x02
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	88 30       	cpi	r24, 0x08	; 8
    216e:	58 f3       	brcs	.-42     	; 0x2146 <GLCD_VidClear+0x22>
		for(ii=0;ii<64;ii++)
		{
			GLCD_VidSendData(0x00);   //Write Zeros to All 64 Column
		}
	}
	GLCD_VidSendCommand(0xB8);   //Set Page to 0xB8
    2170:	88 eb       	ldi	r24, 0xB8	; 184
    2172:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
	GLCD_VidSendCommand(0x40);   //Set Column to address 0x40
    2176:	80 e4       	ldi	r24, 0x40	; 64
    2178:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
}
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <GLCD_VidSetPosition>:
//Set Position in GLCD
void GLCD_VidSetPosition(u8 Copy_u8Page, u8 Copy_u8Column)
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	00 d0       	rcall	.+0      	; 0x218c <GLCD_VidSetPosition+0x6>
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	6a 83       	std	Y+2, r22	; 0x02
	Y = Copy_u8Column;
    2194:	8a 81       	ldd	r24, Y+2	; 0x02
    2196:	80 93 86 03 	sts	0x0386, r24
	X = Copy_u8Page;
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	80 93 87 03 	sts	0x0387, r24

	if(Copy_u8Column < 64)
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	80 34       	cpi	r24, 0x40	; 64
    21a4:	98 f4       	brcc	.+38     	; 0x21cc <GLCD_VidSetPosition+0x46>
	{
		//Select CS1 (Left Side)
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_HIGH);
    21a6:	82 e0       	ldi	r24, 0x02	; 2
    21a8:	63 e0       	ldi	r22, 0x03	; 3
    21aa:	41 e0       	ldi	r20, 0x01	; 1
    21ac:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_LOW);
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	64 e0       	ldi	r22, 0x04	; 4
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
		GLCD_VidSendCommand(0xB8 + Copy_u8Page);     //Set Page
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	88 54       	subi	r24, 0x48	; 72
    21be:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
		GLCD_VidSendCommand(0x40 + Copy_u8Column);   //Set Column
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	80 5c       	subi	r24, 0xC0	; 192
    21c6:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
    21ca:	14 c0       	rjmp	.+40     	; 0x21f4 <GLCD_VidSetPosition+0x6e>
	}
	else if(Copy_u8Column >= 64)
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	80 34       	cpi	r24, 0x40	; 64
    21d0:	88 f0       	brcs	.+34     	; 0x21f4 <GLCD_VidSetPosition+0x6e>
	{
		//Select CS2 (Right Side)
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
    21d2:	82 e0       	ldi	r24, 0x02	; 2
    21d4:	64 e0       	ldi	r22, 0x04	; 4
    21d6:	41 e0       	ldi	r20, 0x01	; 1
    21d8:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_LOW);
    21dc:	82 e0       	ldi	r24, 0x02	; 2
    21de:	63 e0       	ldi	r22, 0x03	; 3
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
		GLCD_VidSendCommand(0xB8 + Copy_u8Page);   //Set Page
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	88 54       	subi	r24, 0x48	; 72
    21ea:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
		GLCD_VidSendCommand(Copy_u8Column);        //Set Column
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
	}
}
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <GLCD_VidSendString>:
//Send String
void GLCD_VidSendString(u8 *Copy_u8String)
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	00 d0       	rcall	.+0      	; 0x2204 <GLCD_VidSendString+0x6>
    2204:	00 d0       	rcall	.+0      	; 0x2206 <GLCD_VidSendString+0x8>
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	9c 83       	std	Y+4, r25	; 0x04
    220c:	8b 83       	std	Y+3, r24	; 0x03
	u8 i = 0;
    220e:	1a 82       	std	Y+2, r1	; 0x02
	u8 ii;

	if(Y < 64)
    2210:	80 91 86 03 	lds	r24, 0x0386
    2214:	80 34       	cpi	r24, 0x40	; 64
    2216:	58 f4       	brcc	.+22     	; 0x222e <GLCD_VidSendString+0x30>
	{
		//Select CS1 (Left Side)
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_HIGH);
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	63 e0       	ldi	r22, 0x03	; 3
    221c:	41 e0       	ldi	r20, 0x01	; 1
    221e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_LOW);
    2222:	82 e0       	ldi	r24, 0x02	; 2
    2224:	64 e0       	ldi	r22, 0x04	; 4
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
    222c:	d0 c0       	rjmp	.+416    	; 0x23ce <GLCD_VidSendString+0x1d0>
	}
	else if(Y >= 64)
    222e:	80 91 86 03 	lds	r24, 0x0386
    2232:	80 34       	cpi	r24, 0x40	; 64
    2234:	08 f4       	brcc	.+2      	; 0x2238 <GLCD_VidSendString+0x3a>
    2236:	cb c0       	rjmp	.+406    	; 0x23ce <GLCD_VidSendString+0x1d0>
	{
		//Select CS2 (Right Side)
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_LOW);
    2238:	82 e0       	ldi	r24, 0x02	; 2
    223a:	63 e0       	ldi	r22, 0x03	; 3
    223c:	40 e0       	ldi	r20, 0x00	; 0
    223e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
    2242:	82 e0       	ldi	r24, 0x02	; 2
    2244:	64 e0       	ldi	r22, 0x04	; 4
    2246:	41 e0       	ldi	r20, 0x01	; 1
    2248:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
    224c:	c0 c0       	rjmp	.+384    	; 0x23ce <GLCD_VidSendString+0x1d0>
	}

	while (Copy_u8String[i] != '\0')   //Print char in string till null
	{
		if((Y+6) > 128)   //Check if Column address reaches 128 (End of Right Side of GLCD) & There is Enough Columns For The Last Character
    224e:	80 91 86 03 	lds	r24, 0x0386
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	06 96       	adiw	r24, 0x06	; 6
    2258:	81 38       	cpi	r24, 0x81	; 129
    225a:	91 05       	cpc	r25, r1
    225c:	cc f0       	brlt	.+50     	; 0x2290 <GLCD_VidSendString+0x92>
		{
			//Select CS1 (Left Side)
			DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_HIGH);
    225e:	82 e0       	ldi	r24, 0x02	; 2
    2260:	63 e0       	ldi	r22, 0x03	; 3
    2262:	41 e0       	ldi	r20, 0x01	; 1
    2264:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_LOW);
    2268:	82 e0       	ldi	r24, 0x02	; 2
    226a:	64 e0       	ldi	r22, 0x04	; 4
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			GLCD_VidSendCommand(0xB8+X+1);   //Set Page & Increment to the next Page
    2272:	80 91 87 03 	lds	r24, 0x0387
    2276:	87 54       	subi	r24, 0x47	; 71
    2278:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			GLCD_VidSendCommand(0x40);       //Set Column to address 0x40
    227c:	80 e4       	ldi	r24, 0x40	; 64
    227e:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			X++;                             //Increment The Page Tracker Variable
    2282:	80 91 87 03 	lds	r24, 0x0387
    2286:	8f 5f       	subi	r24, 0xFF	; 255
    2288:	80 93 87 03 	sts	0x0387, r24
			Y = 0;                           //Reset The Column Tracker Variable
    228c:	10 92 86 03 	sts	0x0386, r1
		}
		for(ii = 0; ii < 5; ii++ )   //For Every Column in Font Array
    2290:	19 82       	std	Y+1, r1	; 0x01
    2292:	5b c0       	rjmp	.+182    	; 0x234a <GLCD_VidSendString+0x14c>
		{
			if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    2294:	80 91 86 03 	lds	r24, 0x0386
    2298:	80 34       	cpi	r24, 0x40	; 64
    229a:	91 f4       	brne	.+36     	; 0x22c0 <GLCD_VidSendString+0xc2>
			{
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_LOW);
    229c:	82 e0       	ldi	r24, 0x02	; 2
    229e:	63 e0       	ldi	r22, 0x03	; 3
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
    22a6:	82 e0       	ldi	r24, 0x02	; 2
    22a8:	64 e0       	ldi	r22, 0x04	; 4
    22aa:	41 e0       	ldi	r20, 0x01	; 1
    22ac:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				GLCD_VidSendCommand(0xB8+X);   //Set Page
    22b0:	80 91 87 03 	lds	r24, 0x0387
    22b4:	88 54       	subi	r24, 0x48	; 72
    22b6:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
				GLCD_VidSendCommand(0x40);     //Set Column to address 0x40
    22ba:	80 e4       	ldi	r24, 0x40	; 64
    22bc:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			}
			if(Y == 128)   //Check if Column address reaches 128 (End of Right Side of GLCD)
    22c0:	80 91 86 03 	lds	r24, 0x0386
    22c4:	80 38       	cpi	r24, 0x80	; 128
    22c6:	c9 f4       	brne	.+50     	; 0x22fa <GLCD_VidSendString+0xfc>
			{
				//Select CS1 (Left Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_HIGH);
    22c8:	82 e0       	ldi	r24, 0x02	; 2
    22ca:	63 e0       	ldi	r22, 0x03	; 3
    22cc:	41 e0       	ldi	r20, 0x01	; 1
    22ce:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_LOW);
    22d2:	82 e0       	ldi	r24, 0x02	; 2
    22d4:	64 e0       	ldi	r22, 0x04	; 4
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				GLCD_VidSendCommand(0xB8+X+1);   //Set Page & Increment to the next Page
    22dc:	80 91 87 03 	lds	r24, 0x0387
    22e0:	87 54       	subi	r24, 0x47	; 71
    22e2:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
				GLCD_VidSendCommand(0x40);       //Set Column to address 0x40
    22e6:	80 e4       	ldi	r24, 0x40	; 64
    22e8:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
				X++;                             //Increment The Page Tracker Variable
    22ec:	80 91 87 03 	lds	r24, 0x0387
    22f0:	8f 5f       	subi	r24, 0xFF	; 255
    22f2:	80 93 87 03 	sts	0x0387, r24
				Y = 0;                           //Reset The Column Tracker Variable
    22f6:	10 92 86 03 	sts	0x0386, r1
			}
			GLCD_VidSendData(font[Copy_u8String[i] - 32][ii]);   //Send First Column of the Char in Font Array
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	9c 81       	ldd	r25, Y+4	; 0x04
    2304:	fc 01       	movw	r30, r24
    2306:	e2 0f       	add	r30, r18
    2308:	f3 1f       	adc	r31, r19
    230a:	80 81       	ld	r24, Z
    230c:	88 2f       	mov	r24, r24
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	9c 01       	movw	r18, r24
    2312:	20 52       	subi	r18, 0x20	; 32
    2314:	30 40       	sbci	r19, 0x00	; 0
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	48 2f       	mov	r20, r24
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	c9 01       	movw	r24, r18
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	88 0f       	add	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	82 0f       	add	r24, r18
    2328:	93 1f       	adc	r25, r19
    232a:	84 0f       	add	r24, r20
    232c:	95 1f       	adc	r25, r21
    232e:	fc 01       	movw	r30, r24
    2330:	ea 55       	subi	r30, 0x5A	; 90
    2332:	fe 4f       	sbci	r31, 0xFE	; 254
    2334:	80 81       	ld	r24, Z
    2336:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <GLCD_VidSendData>
			Y++;                                                 //Increment The Column Tracker Variable
    233a:	80 91 86 03 	lds	r24, 0x0386
    233e:	8f 5f       	subi	r24, 0xFF	; 255
    2340:	80 93 86 03 	sts	0x0386, r24
			GLCD_VidSendCommand(0xB8+X+1);   //Set Page & Increment to the next Page
			GLCD_VidSendCommand(0x40);       //Set Column to address 0x40
			X++;                             //Increment The Page Tracker Variable
			Y = 0;                           //Reset The Column Tracker Variable
		}
		for(ii = 0; ii < 5; ii++ )   //For Every Column in Font Array
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	8f 5f       	subi	r24, 0xFF	; 255
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	85 30       	cpi	r24, 0x05	; 5
    234e:	08 f4       	brcc	.+2      	; 0x2352 <GLCD_VidSendString+0x154>
    2350:	a1 cf       	rjmp	.-190    	; 0x2294 <GLCD_VidSendString+0x96>
				Y = 0;                           //Reset The Column Tracker Variable
			}
			GLCD_VidSendData(font[Copy_u8String[i] - 32][ii]);   //Send First Column of the Char in Font Array
			Y++;                                                 //Increment The Column Tracker Variable
		}
		if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    2352:	80 91 86 03 	lds	r24, 0x0386
    2356:	80 34       	cpi	r24, 0x40	; 64
    2358:	91 f4       	brne	.+36     	; 0x237e <GLCD_VidSendString+0x180>
		{
			//Select CS2 (Right Side)
			DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_LOW);
    235a:	82 e0       	ldi	r24, 0x02	; 2
    235c:	63 e0       	ldi	r22, 0x03	; 3
    235e:	40 e0       	ldi	r20, 0x00	; 0
    2360:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
    2364:	82 e0       	ldi	r24, 0x02	; 2
    2366:	64 e0       	ldi	r22, 0x04	; 4
    2368:	41 e0       	ldi	r20, 0x01	; 1
    236a:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			GLCD_VidSendCommand(0xB8+X);   //Set Page
    236e:	80 91 87 03 	lds	r24, 0x0387
    2372:	88 54       	subi	r24, 0x48	; 72
    2374:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			GLCD_VidSendCommand(0x40);     //Set Column to address 0x40
    2378:	80 e4       	ldi	r24, 0x40	; 64
    237a:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
		}
		if((Copy_u8String[i+1] != 32) && (Copy_u8String[i] != 32) && (Y != 0))   //If The Char is Space or The Next Char is Space or The Character is at Column 0
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	88 2f       	mov	r24, r24
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9c 01       	movw	r18, r24
    2386:	2f 5f       	subi	r18, 0xFF	; 255
    2388:	3f 4f       	sbci	r19, 0xFF	; 255
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	9c 81       	ldd	r25, Y+4	; 0x04
    238e:	fc 01       	movw	r30, r24
    2390:	e2 0f       	add	r30, r18
    2392:	f3 1f       	adc	r31, r19
    2394:	80 81       	ld	r24, Z
    2396:	80 32       	cpi	r24, 0x20	; 32
    2398:	b9 f0       	breq	.+46     	; 0x23c8 <GLCD_VidSendString+0x1ca>
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	fc 01       	movw	r30, r24
    23a6:	e2 0f       	add	r30, r18
    23a8:	f3 1f       	adc	r31, r19
    23aa:	80 81       	ld	r24, Z
    23ac:	80 32       	cpi	r24, 0x20	; 32
    23ae:	61 f0       	breq	.+24     	; 0x23c8 <GLCD_VidSendString+0x1ca>
    23b0:	80 91 86 03 	lds	r24, 0x0386
    23b4:	88 23       	and	r24, r24
    23b6:	41 f0       	breq	.+16     	; 0x23c8 <GLCD_VidSendString+0x1ca>
		{
			GLCD_VidSendData(0x00);   //Send Zeroes to Display Space between Characters
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <GLCD_VidSendData>
			Y++;                      //Increment The Column Tracker Variable
    23be:	80 91 86 03 	lds	r24, 0x0386
    23c2:	8f 5f       	subi	r24, 0xFF	; 255
    23c4:	80 93 86 03 	sts	0x0386, r24
		}
		i++;   //Increment to the next Char in The String
    23c8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ca:	8f 5f       	subi	r24, 0xFF	; 255
    23cc:	8a 83       	std	Y+2, r24	; 0x02
		//Select CS2 (Right Side)
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_LOW);
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
	}

	while (Copy_u8String[i] != '\0')   //Print char in string till null
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	fc 01       	movw	r30, r24
    23da:	e2 0f       	add	r30, r18
    23dc:	f3 1f       	adc	r31, r19
    23de:	80 81       	ld	r24, Z
    23e0:	88 23       	and	r24, r24
    23e2:	09 f0       	breq	.+2      	; 0x23e6 <GLCD_VidSendString+0x1e8>
    23e4:	34 cf       	rjmp	.-408    	; 0x224e <GLCD_VidSendString+0x50>
			GLCD_VidSendData(0x00);   //Send Zeroes to Display Space between Characters
			Y++;                      //Increment The Column Tracker Variable
		}
		i++;   //Increment to the next Char in The String
	}
}
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <GLCD_VidSendingNumber>:
//Send Number to GLCD
void GLCD_VidSendingNumber(u8 Copy_u8Number)
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <GLCD_VidSendingNumber+0x6>
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	8a 83       	std	Y+2, r24	; 0x02
	u8 ii;

	for(ii = 0; ii < 5; ii++ )   //For Every Column in Font Array
    2400:	19 82       	std	Y+1, r1	; 0x01
    2402:	50 c0       	rjmp	.+160    	; 0x24a4 <GLCD_VidSendingNumber+0xb0>
	{
		if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    2404:	80 91 86 03 	lds	r24, 0x0386
    2408:	80 34       	cpi	r24, 0x40	; 64
    240a:	91 f4       	brne	.+36     	; 0x2430 <GLCD_VidSendingNumber+0x3c>
		{
			//Select CS2 (Right Side)
			DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_LOW);
    240c:	82 e0       	ldi	r24, 0x02	; 2
    240e:	63 e0       	ldi	r22, 0x03	; 3
    2410:	40 e0       	ldi	r20, 0x00	; 0
    2412:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
    2416:	82 e0       	ldi	r24, 0x02	; 2
    2418:	64 e0       	ldi	r22, 0x04	; 4
    241a:	41 e0       	ldi	r20, 0x01	; 1
    241c:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			GLCD_VidSendCommand(0xB8+X);   //Set Page
    2420:	80 91 87 03 	lds	r24, 0x0387
    2424:	88 54       	subi	r24, 0x48	; 72
    2426:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			GLCD_VidSendCommand(0x40);     //Set Column to address 0x40
    242a:	80 e4       	ldi	r24, 0x40	; 64
    242c:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
		}
		if(Y == 128)   //Check if Column address reaches 128 (End of Right Side of GLCD)
    2430:	80 91 86 03 	lds	r24, 0x0386
    2434:	80 38       	cpi	r24, 0x80	; 128
    2436:	c9 f4       	brne	.+50     	; 0x246a <GLCD_VidSendingNumber+0x76>
		{
			//Select CS1 (Left Side)
			DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_HIGH);
    2438:	82 e0       	ldi	r24, 0x02	; 2
    243a:	63 e0       	ldi	r22, 0x03	; 3
    243c:	41 e0       	ldi	r20, 0x01	; 1
    243e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_LOW);
    2442:	82 e0       	ldi	r24, 0x02	; 2
    2444:	64 e0       	ldi	r22, 0x04	; 4
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			GLCD_VidSendCommand(0xB8+X+1);   //Set Page & Increment to the next Page
    244c:	80 91 87 03 	lds	r24, 0x0387
    2450:	87 54       	subi	r24, 0x47	; 71
    2452:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			GLCD_VidSendCommand(0x40);       //Set Column to address 0x40
    2456:	80 e4       	ldi	r24, 0x40	; 64
    2458:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			X++;                             //Increment The Page Tracker Variable
    245c:	80 91 87 03 	lds	r24, 0x0387
    2460:	8f 5f       	subi	r24, 0xFF	; 255
    2462:	80 93 87 03 	sts	0x0387, r24
			Y = 0;                           //Reset The Column Tracker Variable
    2466:	10 92 86 03 	sts	0x0386, r1
		}
		GLCD_VidSendData(font[Copy_u8Number][ii]);   //Send Number
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	28 2f       	mov	r18, r24
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	48 2f       	mov	r20, r24
    2474:	50 e0       	ldi	r21, 0x00	; 0
    2476:	c9 01       	movw	r24, r18
    2478:	88 0f       	add	r24, r24
    247a:	99 1f       	adc	r25, r25
    247c:	88 0f       	add	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	82 0f       	add	r24, r18
    2482:	93 1f       	adc	r25, r19
    2484:	84 0f       	add	r24, r20
    2486:	95 1f       	adc	r25, r21
    2488:	fc 01       	movw	r30, r24
    248a:	ea 55       	subi	r30, 0x5A	; 90
    248c:	fe 4f       	sbci	r31, 0xFE	; 254
    248e:	80 81       	ld	r24, Z
    2490:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <GLCD_VidSendData>
		Y++;                                         //Increment The Column Tracker Variable
    2494:	80 91 86 03 	lds	r24, 0x0386
    2498:	8f 5f       	subi	r24, 0xFF	; 255
    249a:	80 93 86 03 	sts	0x0386, r24
//Send Number to GLCD
void GLCD_VidSendingNumber(u8 Copy_u8Number)
{
	u8 ii;

	for(ii = 0; ii < 5; ii++ )   //For Every Column in Font Array
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	8f 5f       	subi	r24, 0xFF	; 255
    24a2:	89 83       	std	Y+1, r24	; 0x01
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	85 30       	cpi	r24, 0x05	; 5
    24a8:	08 f4       	brcc	.+2      	; 0x24ac <GLCD_VidSendingNumber+0xb8>
    24aa:	ac cf       	rjmp	.-168    	; 0x2404 <GLCD_VidSendingNumber+0x10>
			Y = 0;                           //Reset The Column Tracker Variable
		}
		GLCD_VidSendData(font[Copy_u8Number][ii]);   //Send Number
		Y++;                                         //Increment The Column Tracker Variable
	}
}
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	08 95       	ret

000024b6 <GLCD_VidSendNumber>:
//Convert Number to Character
void GLCD_VidSendNumber(f32 Copy_u32Number)
{
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	a4 97       	sbiw	r28, 0x24	; 36
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	69 a3       	std	Y+33, r22	; 0x21
    24d0:	7a a3       	std	Y+34, r23	; 0x22
    24d2:	8b a3       	std	Y+35, r24	; 0x23
    24d4:	9c a3       	std	Y+36, r25	; 0x24
	u8 Arr[10];   //Array to Store Number
	u8 i = 0;
    24d6:	1e 8a       	std	Y+22, r1	; 0x16
	u8 j = 0;
    24d8:	1d 8a       	std	Y+21, r1	; 0x15
	u8 Number_Float_Exist = 0;   //Variable to Check For Float Number
    24da:	1c 8a       	std	Y+20, r1	; 0x14
	u8 Dot = 0;
    24dc:	1b 8a       	std	Y+19, r1	; 0x13
	u32 Number_int = Copy_u32Number;   //Store Integral Part of The Number
    24de:	69 a1       	ldd	r22, Y+33	; 0x21
    24e0:	7a a1       	ldd	r23, Y+34	; 0x22
    24e2:	8b a1       	ldd	r24, Y+35	; 0x23
    24e4:	9c a1       	ldd	r25, Y+36	; 0x24
    24e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	8f 87       	std	Y+15, r24	; 0x0f
    24f0:	98 8b       	std	Y+16, r25	; 0x10
    24f2:	a9 8b       	std	Y+17, r26	; 0x11
    24f4:	ba 8b       	std	Y+18, r27	; 0x12
	u32 Number_int_Copy = Copy_u32Number;
    24f6:	69 a1       	ldd	r22, Y+33	; 0x21
    24f8:	7a a1       	ldd	r23, Y+34	; 0x22
    24fa:	8b a1       	ldd	r24, Y+35	; 0x23
    24fc:	9c a1       	ldd	r25, Y+36	; 0x24
    24fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	8b 87       	std	Y+11, r24	; 0x0b
    2508:	9c 87       	std	Y+12, r25	; 0x0c
    250a:	ad 87       	std	Y+13, r26	; 0x0d
    250c:	be 87       	std	Y+14, r27	; 0x0e
	f32 Number_float = (Copy_u32Number - Number_int);   //Store Float Part of The Number
    250e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2510:	78 89       	ldd	r23, Y+16	; 0x10
    2512:	89 89       	ldd	r24, Y+17	; 0x11
    2514:	9a 89       	ldd	r25, Y+18	; 0x12
    2516:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    251a:	9b 01       	movw	r18, r22
    251c:	ac 01       	movw	r20, r24
    251e:	69 a1       	ldd	r22, Y+33	; 0x21
    2520:	7a a1       	ldd	r23, Y+34	; 0x22
    2522:	8b a1       	ldd	r24, Y+35	; 0x23
    2524:	9c a1       	ldd	r25, Y+36	; 0x24
    2526:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	8f 83       	std	Y+7, r24	; 0x07
    2530:	98 87       	std	Y+8, r25	; 0x08
    2532:	a9 87       	std	Y+9, r26	; 0x09
    2534:	ba 87       	std	Y+10, r27	; 0x0a
	f32 Number_float_remain = 0;
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	a0 e0       	ldi	r26, 0x00	; 0
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	8b 83       	std	Y+3, r24	; 0x03
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	ad 83       	std	Y+5, r26	; 0x05
    2544:	be 83       	std	Y+6, r27	; 0x06
    2546:	15 c0       	rjmp	.+42     	; 0x2572 <GLCD_VidSendNumber+0xbc>

	while(Number_int_Copy != 0)   //While The Integral Part is Not Zero
	{
		Number_int_Copy/=10;           //Divide By 10
    2548:	8b 85       	ldd	r24, Y+11	; 0x0b
    254a:	9c 85       	ldd	r25, Y+12	; 0x0c
    254c:	ad 85       	ldd	r26, Y+13	; 0x0d
    254e:	be 85       	ldd	r27, Y+14	; 0x0e
    2550:	2a e0       	ldi	r18, 0x0A	; 10
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e0       	ldi	r20, 0x00	; 0
    2556:	50 e0       	ldi	r21, 0x00	; 0
    2558:	bc 01       	movw	r22, r24
    255a:	cd 01       	movw	r24, r26
    255c:	0e 94 4d 1b 	call	0x369a	; 0x369a <__udivmodsi4>
    2560:	da 01       	movw	r26, r20
    2562:	c9 01       	movw	r24, r18
    2564:	8b 87       	std	Y+11, r24	; 0x0b
    2566:	9c 87       	std	Y+12, r25	; 0x0c
    2568:	ad 87       	std	Y+13, r26	; 0x0d
    256a:	be 87       	std	Y+14, r27	; 0x0e
		j++;                      //Count Integral Numbers
    256c:	8d 89       	ldd	r24, Y+21	; 0x15
    256e:	8f 5f       	subi	r24, 0xFF	; 255
    2570:	8d 8b       	std	Y+21, r24	; 0x15
	u32 Number_int = Copy_u32Number;   //Store Integral Part of The Number
	u32 Number_int_Copy = Copy_u32Number;
	f32 Number_float = (Copy_u32Number - Number_int);   //Store Float Part of The Number
	f32 Number_float_remain = 0;

	while(Number_int_Copy != 0)   //While The Integral Part is Not Zero
    2572:	8b 85       	ldd	r24, Y+11	; 0x0b
    2574:	9c 85       	ldd	r25, Y+12	; 0x0c
    2576:	ad 85       	ldd	r26, Y+13	; 0x0d
    2578:	be 85       	ldd	r27, Y+14	; 0x0e
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	a1 05       	cpc	r26, r1
    257e:	b1 05       	cpc	r27, r1
    2580:	19 f7       	brne	.-58     	; 0x2548 <GLCD_VidSendNumber+0x92>
	{
		Number_int_Copy/=10;           //Divide By 10
		j++;                      //Count Integral Numbers
	}

	if(Number_int == 0)  //Save Place For zero if Integral Number is Zero
    2582:	8f 85       	ldd	r24, Y+15	; 0x0f
    2584:	98 89       	ldd	r25, Y+16	; 0x10
    2586:	a9 89       	ldd	r26, Y+17	; 0x11
    2588:	ba 89       	ldd	r27, Y+18	; 0x12
    258a:	00 97       	sbiw	r24, 0x00	; 0
    258c:	a1 05       	cpc	r26, r1
    258e:	b1 05       	cpc	r27, r1
    2590:	11 f4       	brne	.+4      	; 0x2596 <GLCD_VidSendNumber+0xe0>
	{
		j = 1;
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	8d 8b       	std	Y+21, r24	; 0x15
	}

	if(Number_float !=0)   //Check If There is Float Numbers to Add Their Places
    2596:	6f 81       	ldd	r22, Y+7	; 0x07
    2598:	78 85       	ldd	r23, Y+8	; 0x08
    259a:	89 85       	ldd	r24, Y+9	; 0x09
    259c:	9a 85       	ldd	r25, Y+10	; 0x0a
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e0       	ldi	r20, 0x00	; 0
    25a4:	50 e0       	ldi	r21, 0x00	; 0
    25a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    25aa:	88 23       	and	r24, r24
    25ac:	21 f0       	breq	.+8      	; 0x25b6 <GLCD_VidSendNumber+0x100>
	{
		Number_Float_Exist = 3;
    25ae:	83 e0       	ldi	r24, 0x03	; 3
    25b0:	8c 8b       	std	Y+20, r24	; 0x14
		Dot = 5;
    25b2:	85 e0       	ldi	r24, 0x05	; 5
    25b4:	8b 8b       	std	Y+19, r24	; 0x13
	}

	if((Y+(((j+Number_Float_Exist)*6)+Dot)) > 128)   //Calculate Places Needed to Represent The Number
    25b6:	80 91 86 03 	lds	r24, 0x0386
    25ba:	48 2f       	mov	r20, r24
    25bc:	50 e0       	ldi	r21, 0x00	; 0
    25be:	8d 89       	ldd	r24, Y+21	; 0x15
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	8c 89       	ldd	r24, Y+20	; 0x14
    25c6:	88 2f       	mov	r24, r24
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	28 0f       	add	r18, r24
    25cc:	39 1f       	adc	r19, r25
    25ce:	c9 01       	movw	r24, r18
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	82 0f       	add	r24, r18
    25d6:	93 1f       	adc	r25, r19
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	9c 01       	movw	r18, r24
    25de:	8b 89       	ldd	r24, Y+19	; 0x13
    25e0:	88 2f       	mov	r24, r24
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	82 0f       	add	r24, r18
    25e6:	93 1f       	adc	r25, r19
    25e8:	84 0f       	add	r24, r20
    25ea:	95 1f       	adc	r25, r21
    25ec:	81 38       	cpi	r24, 0x81	; 129
    25ee:	91 05       	cpc	r25, r1
    25f0:	cc f0       	brlt	.+50     	; 0x2624 <GLCD_VidSendNumber+0x16e>
	{
		//Select CS1 (Left Side)
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_HIGH);
    25f2:	82 e0       	ldi	r24, 0x02	; 2
    25f4:	63 e0       	ldi	r22, 0x03	; 3
    25f6:	41 e0       	ldi	r20, 0x01	; 1
    25f8:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_LOW);
    25fc:	82 e0       	ldi	r24, 0x02	; 2
    25fe:	64 e0       	ldi	r22, 0x04	; 4
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
		GLCD_VidSendCommand(0xB8+X+1);   //Set Page & Increment to the next Page
    2606:	80 91 87 03 	lds	r24, 0x0387
    260a:	87 54       	subi	r24, 0x47	; 71
    260c:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
		GLCD_VidSendCommand(0x40);       //Set Column to address 0x40
    2610:	80 e4       	ldi	r24, 0x40	; 64
    2612:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
		X++;                             //Increment The Page Tracker Variable
    2616:	80 91 87 03 	lds	r24, 0x0387
    261a:	8f 5f       	subi	r24, 0xFF	; 255
    261c:	80 93 87 03 	sts	0x0387, r24
		Y = 0;                           //Reset The Column Tracker Variable
    2620:	10 92 86 03 	sts	0x0386, r1
	}
	if(Copy_u32Number != 0)   //If The Number is Not Zero (Both Integral & Float Part)
    2624:	69 a1       	ldd	r22, Y+33	; 0x21
    2626:	7a a1       	ldd	r23, Y+34	; 0x22
    2628:	8b a1       	ldd	r24, Y+35	; 0x23
    262a:	9c a1       	ldd	r25, Y+36	; 0x24
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    2638:	88 23       	and	r24, r24
    263a:	09 f4       	brne	.+2      	; 0x263e <GLCD_VidSendNumber+0x188>
    263c:	9a c1       	rjmp	.+820    	; 0x2972 <GLCD_VidSendNumber+0x4bc>
	{
		if(Number_int != 0)   //If The Integral Part is Not Zero
    263e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2640:	98 89       	ldd	r25, Y+16	; 0x10
    2642:	a9 89       	ldd	r26, Y+17	; 0x11
    2644:	ba 89       	ldd	r27, Y+18	; 0x12
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	a1 05       	cpc	r26, r1
    264a:	b1 05       	cpc	r27, r1
    264c:	09 f4       	brne	.+2      	; 0x2650 <GLCD_VidSendNumber+0x19a>
    264e:	ad c0       	rjmp	.+346    	; 0x27aa <GLCD_VidSendNumber+0x2f4>
		{
			j = 0;
    2650:	1d 8a       	std	Y+21, r1	; 0x15
    2652:	2d c0       	rjmp	.+90     	; 0x26ae <GLCD_VidSendNumber+0x1f8>
			while(Number_int != 0)   //While The Integral Part is Not Zero
			{
				Arr[j] = Number_int%10;   //Store The Reminder in The Array
    2654:	8d 89       	ldd	r24, Y+21	; 0x15
    2656:	08 2f       	mov	r16, r24
    2658:	10 e0       	ldi	r17, 0x00	; 0
    265a:	8f 85       	ldd	r24, Y+15	; 0x0f
    265c:	98 89       	ldd	r25, Y+16	; 0x10
    265e:	a9 89       	ldd	r26, Y+17	; 0x11
    2660:	ba 89       	ldd	r27, Y+18	; 0x12
    2662:	2a e0       	ldi	r18, 0x0A	; 10
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	50 e0       	ldi	r21, 0x00	; 0
    266a:	bc 01       	movw	r22, r24
    266c:	cd 01       	movw	r24, r26
    266e:	0e 94 4d 1b 	call	0x369a	; 0x369a <__udivmodsi4>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	28 2f       	mov	r18, r24
    2678:	ce 01       	movw	r24, r28
    267a:	47 96       	adiw	r24, 0x17	; 23
    267c:	fc 01       	movw	r30, r24
    267e:	e0 0f       	add	r30, r16
    2680:	f1 1f       	adc	r31, r17
    2682:	20 83       	st	Z, r18
				Number_int/=10;           //Divide By 10
    2684:	8f 85       	ldd	r24, Y+15	; 0x0f
    2686:	98 89       	ldd	r25, Y+16	; 0x10
    2688:	a9 89       	ldd	r26, Y+17	; 0x11
    268a:	ba 89       	ldd	r27, Y+18	; 0x12
    268c:	2a e0       	ldi	r18, 0x0A	; 10
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e0       	ldi	r20, 0x00	; 0
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	0e 94 4d 1b 	call	0x369a	; 0x369a <__udivmodsi4>
    269c:	da 01       	movw	r26, r20
    269e:	c9 01       	movw	r24, r18
    26a0:	8f 87       	std	Y+15, r24	; 0x0f
    26a2:	98 8b       	std	Y+16, r25	; 0x10
    26a4:	a9 8b       	std	Y+17, r26	; 0x11
    26a6:	ba 8b       	std	Y+18, r27	; 0x12
				j++;                      //Increment to The Next Position in The Array
    26a8:	8d 89       	ldd	r24, Y+21	; 0x15
    26aa:	8f 5f       	subi	r24, 0xFF	; 255
    26ac:	8d 8b       	std	Y+21, r24	; 0x15
	if(Copy_u32Number != 0)   //If The Number is Not Zero (Both Integral & Float Part)
	{
		if(Number_int != 0)   //If The Integral Part is Not Zero
		{
			j = 0;
			while(Number_int != 0)   //While The Integral Part is Not Zero
    26ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b0:	98 89       	ldd	r25, Y+16	; 0x10
    26b2:	a9 89       	ldd	r26, Y+17	; 0x11
    26b4:	ba 89       	ldd	r27, Y+18	; 0x12
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	a1 05       	cpc	r26, r1
    26ba:	b1 05       	cpc	r27, r1
    26bc:	59 f6       	brne	.-106    	; 0x2654 <GLCD_VidSendNumber+0x19e>
				Number_int/=10;           //Divide By 10
				j++;                      //Increment to The Next Position in The Array
			}

			//Print The Integral Part on The GLCD
			if(Y < 64)   //If Start Column is in the Left Side of The GLCD
    26be:	80 91 86 03 	lds	r24, 0x0386
    26c2:	80 34       	cpi	r24, 0x40	; 64
    26c4:	58 f4       	brcc	.+22     	; 0x26dc <GLCD_VidSendNumber+0x226>
			{
				//Select CS1 (Left Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_HIGH);
    26c6:	82 e0       	ldi	r24, 0x02	; 2
    26c8:	63 e0       	ldi	r22, 0x03	; 3
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_LOW);
    26d0:	82 e0       	ldi	r24, 0x02	; 2
    26d2:	64 e0       	ldi	r22, 0x04	; 4
    26d4:	40 e0       	ldi	r20, 0x00	; 0
    26d6:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
    26da:	0e c0       	rjmp	.+28     	; 0x26f8 <GLCD_VidSendNumber+0x242>
			}
			else if(Y >= 64)   //If Start Column is in the Right Side of The GLCD
    26dc:	80 91 86 03 	lds	r24, 0x0386
    26e0:	80 34       	cpi	r24, 0x40	; 64
    26e2:	50 f0       	brcs	.+20     	; 0x26f8 <GLCD_VidSendNumber+0x242>
			{
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_LOW);
    26e4:	82 e0       	ldi	r24, 0x02	; 2
    26e6:	63 e0       	ldi	r22, 0x03	; 3
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
    26ee:	82 e0       	ldi	r24, 0x02	; 2
    26f0:	64 e0       	ldi	r22, 0x04	; 4
    26f2:	41 e0       	ldi	r20, 0x01	; 1
    26f4:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			}

			for(s8 jj=j-1;jj>=0;jj--)  //For All Integral Numbers
    26f8:	8d 89       	ldd	r24, Y+21	; 0x15
    26fa:	81 50       	subi	r24, 0x01	; 1
    26fc:	8a 83       	std	Y+2, r24	; 0x02
    26fe:	50 c0       	rjmp	.+160    	; 0x27a0 <GLCD_VidSendNumber+0x2ea>
			{
				GLCD_VidSendingNumber((Arr[jj]+16));   //Send First Column of the Char in Font Array
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
    2702:	28 2f       	mov	r18, r24
    2704:	33 27       	eor	r19, r19
    2706:	27 fd       	sbrc	r18, 7
    2708:	30 95       	com	r19
    270a:	ce 01       	movw	r24, r28
    270c:	47 96       	adiw	r24, 0x17	; 23
    270e:	fc 01       	movw	r30, r24
    2710:	e2 0f       	add	r30, r18
    2712:	f3 1f       	adc	r31, r19
    2714:	80 81       	ld	r24, Z
    2716:	80 5f       	subi	r24, 0xF0	; 240
    2718:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <GLCD_VidSendingNumber>

				if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    271c:	80 91 86 03 	lds	r24, 0x0386
    2720:	80 34       	cpi	r24, 0x40	; 64
    2722:	b9 f4       	brne	.+46     	; 0x2752 <GLCD_VidSendNumber+0x29c>
				{
					//Select CS2 (Right Side)
					DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_LOW);
    2724:	82 e0       	ldi	r24, 0x02	; 2
    2726:	63 e0       	ldi	r22, 0x03	; 3
    2728:	40 e0       	ldi	r20, 0x00	; 0
    272a:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
					DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
    272e:	82 e0       	ldi	r24, 0x02	; 2
    2730:	64 e0       	ldi	r22, 0x04	; 4
    2732:	41 e0       	ldi	r20, 0x01	; 1
    2734:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
					GLCD_VidSendCommand(0xB8+X);   //Set Page
    2738:	80 91 87 03 	lds	r24, 0x0387
    273c:	88 54       	subi	r24, 0x48	; 72
    273e:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
					GLCD_VidSendCommand(0x40);     //Set Column to address 0x40
    2742:	80 e4       	ldi	r24, 0x40	; 64
    2744:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
					Y++;                           //Increment The Column Tracker Variable
    2748:	80 91 86 03 	lds	r24, 0x0386
    274c:	8f 5f       	subi	r24, 0xFF	; 255
    274e:	80 93 86 03 	sts	0x0386, r24
				}
				if((Arr[jj+1] != 32) && (Arr[jj] != 32))   //If The Char is Space or The Next Char is Space
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	99 27       	eor	r25, r25
    2756:	87 fd       	sbrc	r24, 7
    2758:	90 95       	com	r25
    275a:	9c 01       	movw	r18, r24
    275c:	2f 5f       	subi	r18, 0xFF	; 255
    275e:	3f 4f       	sbci	r19, 0xFF	; 255
    2760:	ce 01       	movw	r24, r28
    2762:	47 96       	adiw	r24, 0x17	; 23
    2764:	fc 01       	movw	r30, r24
    2766:	e2 0f       	add	r30, r18
    2768:	f3 1f       	adc	r31, r19
    276a:	80 81       	ld	r24, Z
    276c:	80 32       	cpi	r24, 0x20	; 32
    276e:	a9 f0       	breq	.+42     	; 0x279a <GLCD_VidSendNumber+0x2e4>
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	28 2f       	mov	r18, r24
    2774:	33 27       	eor	r19, r19
    2776:	27 fd       	sbrc	r18, 7
    2778:	30 95       	com	r19
    277a:	ce 01       	movw	r24, r28
    277c:	47 96       	adiw	r24, 0x17	; 23
    277e:	fc 01       	movw	r30, r24
    2780:	e2 0f       	add	r30, r18
    2782:	f3 1f       	adc	r31, r19
    2784:	80 81       	ld	r24, Z
    2786:	80 32       	cpi	r24, 0x20	; 32
    2788:	41 f0       	breq	.+16     	; 0x279a <GLCD_VidSendNumber+0x2e4>
				{
					GLCD_VidSendData(0x00);   //Send Zeroes to Display Space between Characters
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <GLCD_VidSendData>
					Y++;                      //Increment The Column Tracker Variable
    2790:	80 91 86 03 	lds	r24, 0x0386
    2794:	8f 5f       	subi	r24, 0xFF	; 255
    2796:	80 93 86 03 	sts	0x0386, r24
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_LOW);
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
			}

			for(s8 jj=j-1;jj>=0;jj--)  //For All Integral Numbers
    279a:	8a 81       	ldd	r24, Y+2	; 0x02
    279c:	81 50       	subi	r24, 0x01	; 1
    279e:	8a 83       	std	Y+2, r24	; 0x02
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	88 23       	and	r24, r24
    27a4:	0c f0       	brlt	.+2      	; 0x27a8 <GLCD_VidSendNumber+0x2f2>
    27a6:	ac cf       	rjmp	.-168    	; 0x2700 <GLCD_VidSendNumber+0x24a>
    27a8:	03 c0       	rjmp	.+6      	; 0x27b0 <GLCD_VidSendNumber+0x2fa>
				}
			}
		}
		else
		{
			GLCD_VidSendingNumber(16);   //Send '0'
    27aa:	80 e1       	ldi	r24, 0x10	; 16
    27ac:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <GLCD_VidSendingNumber>
		}

		if(Number_float != 0)   //If The Float Part is Not Zero
    27b0:	6f 81       	ldd	r22, Y+7	; 0x07
    27b2:	78 85       	ldd	r23, Y+8	; 0x08
    27b4:	89 85       	ldd	r24, Y+9	; 0x09
    27b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	50 e0       	ldi	r21, 0x00	; 0
    27c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    27c4:	88 23       	and	r24, r24
    27c6:	09 f4       	brne	.+2      	; 0x27ca <GLCD_VidSendNumber+0x314>
    27c8:	df c0       	rjmp	.+446    	; 0x2988 <GLCD_VidSendNumber+0x4d2>
		{
			GLCD_VidSendingNumber(14);  //Send '.'
    27ca:	8e e0       	ldi	r24, 0x0E	; 14
    27cc:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <GLCD_VidSendingNumber>
			j = 0;
    27d0:	1d 8a       	std	Y+21, r1	; 0x15
    27d2:	5b c0       	rjmp	.+182    	; 0x288a <GLCD_VidSendNumber+0x3d4>
			while(i<3)   //For 3 Decimal Point Precision
			{
				Arr[j] = (Number_float*10);                      //Store The Number in The Array
    27d4:	8d 89       	ldd	r24, Y+21	; 0x15
    27d6:	08 2f       	mov	r16, r24
    27d8:	10 e0       	ldi	r17, 0x00	; 0
    27da:	6f 81       	ldd	r22, Y+7	; 0x07
    27dc:	78 85       	ldd	r23, Y+8	; 0x08
    27de:	89 85       	ldd	r24, Y+9	; 0x09
    27e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	40 e2       	ldi	r20, 0x20	; 32
    27e8:	51 e4       	ldi	r21, 0x41	; 65
    27ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	bc 01       	movw	r22, r24
    27f4:	cd 01       	movw	r24, r26
    27f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	28 2f       	mov	r18, r24
    2800:	ce 01       	movw	r24, r28
    2802:	47 96       	adiw	r24, 0x17	; 23
    2804:	fc 01       	movw	r30, r24
    2806:	e0 0f       	add	r30, r16
    2808:	f1 1f       	adc	r31, r17
    280a:	20 83       	st	Z, r18
				Number_float = (Number_float*10);                //Multiply By 10
    280c:	6f 81       	ldd	r22, Y+7	; 0x07
    280e:	78 85       	ldd	r23, Y+8	; 0x08
    2810:	89 85       	ldd	r24, Y+9	; 0x09
    2812:	9a 85       	ldd	r25, Y+10	; 0x0a
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	40 e2       	ldi	r20, 0x20	; 32
    281a:	51 e4       	ldi	r21, 0x41	; 65
    281c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	8f 83       	std	Y+7, r24	; 0x07
    2826:	98 87       	std	Y+8, r25	; 0x08
    2828:	a9 87       	std	Y+9, r26	; 0x09
    282a:	ba 87       	std	Y+10, r27	; 0x0a
				Number_float_remain = (Number_float - Arr[j]);   //Store The Remain Numbers to Be Saved in The Array
    282c:	8d 89       	ldd	r24, Y+21	; 0x15
    282e:	28 2f       	mov	r18, r24
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	ce 01       	movw	r24, r28
    2834:	47 96       	adiw	r24, 0x17	; 23
    2836:	fc 01       	movw	r30, r24
    2838:	e2 0f       	add	r30, r18
    283a:	f3 1f       	adc	r31, r19
    283c:	80 81       	ld	r24, Z
    283e:	88 2f       	mov	r24, r24
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	aa 27       	eor	r26, r26
    2844:	97 fd       	sbrc	r25, 7
    2846:	a0 95       	com	r26
    2848:	ba 2f       	mov	r27, r26
    284a:	bc 01       	movw	r22, r24
    284c:	cd 01       	movw	r24, r26
    284e:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2852:	9b 01       	movw	r18, r22
    2854:	ac 01       	movw	r20, r24
    2856:	6f 81       	ldd	r22, Y+7	; 0x07
    2858:	78 85       	ldd	r23, Y+8	; 0x08
    285a:	89 85       	ldd	r24, Y+9	; 0x09
    285c:	9a 85       	ldd	r25, Y+10	; 0x0a
    285e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	8b 83       	std	Y+3, r24	; 0x03
    2868:	9c 83       	std	Y+4, r25	; 0x04
    286a:	ad 83       	std	Y+5, r26	; 0x05
    286c:	be 83       	std	Y+6, r27	; 0x06
				Number_float = Number_float_remain;              //Update The Float Number
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	9c 81       	ldd	r25, Y+4	; 0x04
    2872:	ad 81       	ldd	r26, Y+5	; 0x05
    2874:	be 81       	ldd	r27, Y+6	; 0x06
    2876:	8f 83       	std	Y+7, r24	; 0x07
    2878:	98 87       	std	Y+8, r25	; 0x08
    287a:	a9 87       	std	Y+9, r26	; 0x09
    287c:	ba 87       	std	Y+10, r27	; 0x0a
				j++;                                             //Increment to The Next Position in The Array
    287e:	8d 89       	ldd	r24, Y+21	; 0x15
    2880:	8f 5f       	subi	r24, 0xFF	; 255
    2882:	8d 8b       	std	Y+21, r24	; 0x15
				i++;
    2884:	8e 89       	ldd	r24, Y+22	; 0x16
    2886:	8f 5f       	subi	r24, 0xFF	; 255
    2888:	8e 8b       	std	Y+22, r24	; 0x16

		if(Number_float != 0)   //If The Float Part is Not Zero
		{
			GLCD_VidSendingNumber(14);  //Send '.'
			j = 0;
			while(i<3)   //For 3 Decimal Point Precision
    288a:	8e 89       	ldd	r24, Y+22	; 0x16
    288c:	83 30       	cpi	r24, 0x03	; 3
    288e:	08 f4       	brcc	.+2      	; 0x2892 <GLCD_VidSendNumber+0x3dc>
    2890:	a1 cf       	rjmp	.-190    	; 0x27d4 <GLCD_VidSendNumber+0x31e>
				Number_float_remain = (Number_float - Arr[j]);   //Store The Remain Numbers to Be Saved in The Array
				Number_float = Number_float_remain;              //Update The Float Number
				j++;                                             //Increment to The Next Position in The Array
				i++;
			}
			if(Y < 64)   //If Start Column is in the Left Side of The GLCD
    2892:	80 91 86 03 	lds	r24, 0x0386
    2896:	80 34       	cpi	r24, 0x40	; 64
    2898:	58 f4       	brcc	.+22     	; 0x28b0 <GLCD_VidSendNumber+0x3fa>
			{
				//Select CS1 (Left Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_HIGH);
    289a:	82 e0       	ldi	r24, 0x02	; 2
    289c:	63 e0       	ldi	r22, 0x03	; 3
    289e:	41 e0       	ldi	r20, 0x01	; 1
    28a0:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_LOW);
    28a4:	82 e0       	ldi	r24, 0x02	; 2
    28a6:	64 e0       	ldi	r22, 0x04	; 4
    28a8:	40 e0       	ldi	r20, 0x00	; 0
    28aa:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
    28ae:	0e c0       	rjmp	.+28     	; 0x28cc <GLCD_VidSendNumber+0x416>
			}
			else if(Y >= 64)   //If Start Column is in the Right Side of The GLCD
    28b0:	80 91 86 03 	lds	r24, 0x0386
    28b4:	80 34       	cpi	r24, 0x40	; 64
    28b6:	50 f0       	brcs	.+20     	; 0x28cc <GLCD_VidSendNumber+0x416>
			{
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_LOW);
    28b8:	82 e0       	ldi	r24, 0x02	; 2
    28ba:	63 e0       	ldi	r22, 0x03	; 3
    28bc:	40 e0       	ldi	r20, 0x00	; 0
    28be:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
    28c2:	82 e0       	ldi	r24, 0x02	; 2
    28c4:	64 e0       	ldi	r22, 0x04	; 4
    28c6:	41 e0       	ldi	r20, 0x01	; 1
    28c8:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			}

			for(u8 jj=0;jj<j;jj++)   //For All Float Numbers
    28cc:	19 82       	std	Y+1, r1	; 0x01
    28ce:	4b c0       	rjmp	.+150    	; 0x2966 <GLCD_VidSendNumber+0x4b0>
			{
				GLCD_VidSendingNumber((Arr[jj]+16));
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	ce 01       	movw	r24, r28
    28d8:	47 96       	adiw	r24, 0x17	; 23
    28da:	fc 01       	movw	r30, r24
    28dc:	e2 0f       	add	r30, r18
    28de:	f3 1f       	adc	r31, r19
    28e0:	80 81       	ld	r24, Z
    28e2:	80 5f       	subi	r24, 0xF0	; 240
    28e4:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <GLCD_VidSendingNumber>
				if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    28e8:	80 91 86 03 	lds	r24, 0x0386
    28ec:	80 34       	cpi	r24, 0x40	; 64
    28ee:	b9 f4       	brne	.+46     	; 0x291e <GLCD_VidSendNumber+0x468>
				{
					//Select CS2 (Right Side)
					DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_LOW);
    28f0:	82 e0       	ldi	r24, 0x02	; 2
    28f2:	63 e0       	ldi	r22, 0x03	; 3
    28f4:	40 e0       	ldi	r20, 0x00	; 0
    28f6:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
					DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
    28fa:	82 e0       	ldi	r24, 0x02	; 2
    28fc:	64 e0       	ldi	r22, 0x04	; 4
    28fe:	41 e0       	ldi	r20, 0x01	; 1
    2900:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
					GLCD_VidSendCommand(0xB8+X);   //Set Page
    2904:	80 91 87 03 	lds	r24, 0x0387
    2908:	88 54       	subi	r24, 0x48	; 72
    290a:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
					GLCD_VidSendCommand(0x40);     //Set Column to address 0x40
    290e:	80 e4       	ldi	r24, 0x40	; 64
    2910:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
					Y++;                           //Increment The Column Tracker Variable
    2914:	80 91 86 03 	lds	r24, 0x0386
    2918:	8f 5f       	subi	r24, 0xFF	; 255
    291a:	80 93 86 03 	sts	0x0386, r24
				}
				if((Arr[jj+1] != 32) && (Arr[jj] != 32))   //If The Char is Space or The Next Char is Space
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	88 2f       	mov	r24, r24
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	9c 01       	movw	r18, r24
    2926:	2f 5f       	subi	r18, 0xFF	; 255
    2928:	3f 4f       	sbci	r19, 0xFF	; 255
    292a:	ce 01       	movw	r24, r28
    292c:	47 96       	adiw	r24, 0x17	; 23
    292e:	fc 01       	movw	r30, r24
    2930:	e2 0f       	add	r30, r18
    2932:	f3 1f       	adc	r31, r19
    2934:	80 81       	ld	r24, Z
    2936:	80 32       	cpi	r24, 0x20	; 32
    2938:	99 f0       	breq	.+38     	; 0x2960 <GLCD_VidSendNumber+0x4aa>
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	28 2f       	mov	r18, r24
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	ce 01       	movw	r24, r28
    2942:	47 96       	adiw	r24, 0x17	; 23
    2944:	fc 01       	movw	r30, r24
    2946:	e2 0f       	add	r30, r18
    2948:	f3 1f       	adc	r31, r19
    294a:	80 81       	ld	r24, Z
    294c:	80 32       	cpi	r24, 0x20	; 32
    294e:	41 f0       	breq	.+16     	; 0x2960 <GLCD_VidSendNumber+0x4aa>
				{
					GLCD_VidSendData(0x00);   //Send Zeroes to Display Space between Characters
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <GLCD_VidSendData>
					Y++;                      //Increment The Column Tracker Variable
    2956:	80 91 86 03 	lds	r24, 0x0386
    295a:	8f 5f       	subi	r24, 0xFF	; 255
    295c:	80 93 86 03 	sts	0x0386, r24
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_LOW);
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
			}

			for(u8 jj=0;jj<j;jj++)   //For All Float Numbers
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	8f 5f       	subi	r24, 0xFF	; 255
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	99 81       	ldd	r25, Y+1	; 0x01
    2968:	8d 89       	ldd	r24, Y+21	; 0x15
    296a:	98 17       	cp	r25, r24
    296c:	08 f4       	brcc	.+2      	; 0x2970 <GLCD_VidSendNumber+0x4ba>
    296e:	b0 cf       	rjmp	.-160    	; 0x28d0 <GLCD_VidSendNumber+0x41a>
    2970:	0b c0       	rjmp	.+22     	; 0x2988 <GLCD_VidSendNumber+0x4d2>
			}
		}
	}
	else   //If The Number is Zero (Both Integral & Float Part)
	{
		GLCD_VidSendingNumber(16);   //Send '0'
    2972:	80 e1       	ldi	r24, 0x10	; 16
    2974:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <GLCD_VidSendingNumber>
		GLCD_VidSendData(0x00);      //Send Zeroes to Display Space between Characters
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <GLCD_VidSendData>
		Y++;                         //Increment The Column Tracker Variable
    297e:	80 91 86 03 	lds	r24, 0x0386
    2982:	8f 5f       	subi	r24, 0xFF	; 255
    2984:	80 93 86 03 	sts	0x0386, r24
	}
}
    2988:	a4 96       	adiw	r28, 0x24	; 36
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61
    2994:	cf 91       	pop	r28
    2996:	df 91       	pop	r29
    2998:	1f 91       	pop	r17
    299a:	0f 91       	pop	r16
    299c:	08 95       	ret

0000299e <GLCD_VidDrawPWM>:
//Draw PWM Waveform
void GLCD_VidDrawPWM(u8 Copy_u8Page, f32 Frequency, f32 DutyCycle)
{
    299e:	0f 93       	push	r16
    29a0:	1f 93       	push	r17
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
    29aa:	6f 97       	sbiw	r28, 0x1f	; 31
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	8f 8b       	std	Y+23, r24	; 0x17
    29b8:	48 8f       	std	Y+24, r20	; 0x18
    29ba:	59 8f       	std	Y+25, r21	; 0x19
    29bc:	6a 8f       	std	Y+26, r22	; 0x1a
    29be:	7b 8f       	std	Y+27, r23	; 0x1b
    29c0:	0c 8f       	std	Y+28, r16	; 0x1c
    29c2:	1d 8f       	std	Y+29, r17	; 0x1d
    29c4:	2e 8f       	std	Y+30, r18	; 0x1e
    29c6:	3f 8f       	std	Y+31, r19	; 0x1f
	u8 i;
	u8 Y = 0;   //Reset Column Tracker Variable
    29c8:	1d 8a       	std	Y+21, r1	; 0x15
	u32 PWMNumber = round(((Frequency*1000)*16.0)/244);   //Calculate Max Number of Waves to be Displayed in 128 Column
    29ca:	68 8d       	ldd	r22, Y+24	; 0x18
    29cc:	79 8d       	ldd	r23, Y+25	; 0x19
    29ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29d0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	4a e7       	ldi	r20, 0x7A	; 122
    29d8:	54 e4       	ldi	r21, 0x44	; 68
    29da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	bc 01       	movw	r22, r24
    29e4:	cd 01       	movw	r24, r26
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e8       	ldi	r20, 0x80	; 128
    29ec:	51 e4       	ldi	r21, 0x41	; 65
    29ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	bc 01       	movw	r22, r24
    29f8:	cd 01       	movw	r24, r26
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	44 e7       	ldi	r20, 0x74	; 116
    2a00:	53 e4       	ldi	r21, 0x43	; 67
    2a02:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	bc 01       	movw	r22, r24
    2a0c:	cd 01       	movw	r24, r26
    2a0e:	0e 94 a6 1b 	call	0x374c	; 0x374c <round>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	bc 01       	movw	r22, r24
    2a18:	cd 01       	movw	r24, r26
    2a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	89 8b       	std	Y+17, r24	; 0x11
    2a24:	9a 8b       	std	Y+18, r25	; 0x12
    2a26:	ab 8b       	std	Y+19, r26	; 0x13
    2a28:	bc 8b       	std	Y+20, r27	; 0x14
	u32 PWMLength = (128/PWMNumber);   //Calculate Wave Length
    2a2a:	80 e8       	ldi	r24, 0x80	; 128
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	a0 e0       	ldi	r26, 0x00	; 0
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	29 89       	ldd	r18, Y+17	; 0x11
    2a34:	3a 89       	ldd	r19, Y+18	; 0x12
    2a36:	4b 89       	ldd	r20, Y+19	; 0x13
    2a38:	5c 89       	ldd	r21, Y+20	; 0x14
    2a3a:	bc 01       	movw	r22, r24
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	0e 94 4d 1b 	call	0x369a	; 0x369a <__udivmodsi4>
    2a42:	da 01       	movw	r26, r20
    2a44:	c9 01       	movw	r24, r18
    2a46:	8d 87       	std	Y+13, r24	; 0x0d
    2a48:	9e 87       	std	Y+14, r25	; 0x0e
    2a4a:	af 87       	std	Y+15, r26	; 0x0f
    2a4c:	b8 8b       	std	Y+16, r27	; 0x10
	f32 Level = (PWMLength - 2);   //Subtract 2 From The WaveLength to be Represented as Edges
    2a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a52:	af 85       	ldd	r26, Y+15	; 0x0f
    2a54:	b8 89       	ldd	r27, Y+16	; 0x10
    2a56:	02 97       	sbiw	r24, 0x02	; 2
    2a58:	a1 09       	sbc	r26, r1
    2a5a:	b1 09       	sbc	r27, r1
    2a5c:	bc 01       	movw	r22, r24
    2a5e:	cd 01       	movw	r24, r26
    2a60:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	89 87       	std	Y+9, r24	; 0x09
    2a6a:	9a 87       	std	Y+10, r25	; 0x0a
    2a6c:	ab 87       	std	Y+11, r26	; 0x0b
    2a6e:	bc 87       	std	Y+12, r27	; 0x0c
	f32 Ton = round((Level*DutyCycle)/100);   //Calculate Ton
    2a70:	69 85       	ldd	r22, Y+9	; 0x09
    2a72:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a74:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a76:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a78:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2a7a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2a7c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2a7e:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	bc 01       	movw	r22, r24
    2a8a:	cd 01       	movw	r24, r26
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	48 ec       	ldi	r20, 0xC8	; 200
    2a92:	52 e4       	ldi	r21, 0x42	; 66
    2a94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	0e 94 a6 1b 	call	0x374c	; 0x374c <round>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	8d 83       	std	Y+5, r24	; 0x05
    2aaa:	9e 83       	std	Y+6, r25	; 0x06
    2aac:	af 83       	std	Y+7, r26	; 0x07
    2aae:	b8 87       	std	Y+8, r27	; 0x08
	u32 Toff = (Level - Ton);   //Calculate Toff
    2ab0:	69 85       	ldd	r22, Y+9	; 0x09
    2ab2:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ab4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ab6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ab8:	2d 81       	ldd	r18, Y+5	; 0x05
    2aba:	3e 81       	ldd	r19, Y+6	; 0x06
    2abc:	4f 81       	ldd	r20, Y+7	; 0x07
    2abe:	58 85       	ldd	r21, Y+8	; 0x08
    2ac0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	bc 01       	movw	r22, r24
    2aca:	cd 01       	movw	r24, r26
    2acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	89 83       	std	Y+1, r24	; 0x01
    2ad6:	9a 83       	std	Y+2, r25	; 0x02
    2ad8:	ab 83       	std	Y+3, r26	; 0x03
    2ada:	bc 83       	std	Y+4, r27	; 0x04
	GLCD_VidSendNumber(Ton);
	GLCD_VidSetPosition(7,64);
	GLCD_VidSendNumber(Toff);*/

	//Select CS1 (Left Side)
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_HIGH);
    2adc:	82 e0       	ldi	r24, 0x02	; 2
    2ade:	63 e0       	ldi	r22, 0x03	; 3
    2ae0:	41 e0       	ldi	r20, 0x01	; 1
    2ae2:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_LOW);
    2ae6:	82 e0       	ldi	r24, 0x02	; 2
    2ae8:	64 e0       	ldi	r22, 0x04	; 4
    2aea:	40 e0       	ldi	r20, 0x00	; 0
    2aec:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	GLCD_VidSendCommand(0xB8 + Copy_u8Page);   //Set Page
    2af0:	8f 89       	ldd	r24, Y+23	; 0x17
    2af2:	88 54       	subi	r24, 0x48	; 72
    2af4:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
	GLCD_VidSendCommand(0x40);                 //Set Column to address 0x40
    2af8:	80 e4       	ldi	r24, 0x40	; 64
    2afa:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>

	while(1)   //While Not Reaching The End of The GLCD
	{
		for(i=0;i<Ton;i++)   //For High Level Period (Ton)
    2afe:	1e 8a       	std	Y+22, r1	; 0x16
    2b00:	21 c0       	rjmp	.+66     	; 0x2b44 <GLCD_VidDrawPWM+0x1a6>
		{
			if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    2b02:	8d 89       	ldd	r24, Y+21	; 0x15
    2b04:	80 34       	cpi	r24, 0x40	; 64
    2b06:	89 f4       	brne	.+34     	; 0x2b2a <GLCD_VidDrawPWM+0x18c>
			{
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_LOW);
    2b08:	82 e0       	ldi	r24, 0x02	; 2
    2b0a:	63 e0       	ldi	r22, 0x03	; 3
    2b0c:	40 e0       	ldi	r20, 0x00	; 0
    2b0e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
    2b12:	82 e0       	ldi	r24, 0x02	; 2
    2b14:	64 e0       	ldi	r22, 0x04	; 4
    2b16:	41 e0       	ldi	r20, 0x01	; 1
    2b18:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				GLCD_VidSendCommand(0xB8 + Copy_u8Page);   //Set Page
    2b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b1e:	88 54       	subi	r24, 0x48	; 72
    2b20:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
				GLCD_VidSendCommand(0x40);                 //Set Column to address 0x40
    2b24:	80 e4       	ldi	r24, 0x40	; 64
    2b26:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			}
			if(Y == 128)   //Check if Column address reaches 128 (End of Right Side of GLCD)
    2b2a:	8d 89       	ldd	r24, Y+21	; 0x15
    2b2c:	80 38       	cpi	r24, 0x80	; 128
    2b2e:	09 f4       	brne	.+2      	; 0x2b32 <GLCD_VidDrawPWM+0x194>
    2b30:	b7 c0       	rjmp	.+366    	; 0x2ca0 <GLCD_VidDrawPWM+0x302>
			{
				return;   //Break From Function
			}
			GLCD_VidSendData(0x01);   //Send 0x01 to Display High Level
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <GLCD_VidSendData>
			Y++;                      //Increment The Column Tracker Variable
    2b38:	8d 89       	ldd	r24, Y+21	; 0x15
    2b3a:	8f 5f       	subi	r24, 0xFF	; 255
    2b3c:	8d 8b       	std	Y+21, r24	; 0x15
	GLCD_VidSendCommand(0xB8 + Copy_u8Page);   //Set Page
	GLCD_VidSendCommand(0x40);                 //Set Column to address 0x40

	while(1)   //While Not Reaching The End of The GLCD
	{
		for(i=0;i<Ton;i++)   //For High Level Period (Ton)
    2b3e:	8e 89       	ldd	r24, Y+22	; 0x16
    2b40:	8f 5f       	subi	r24, 0xFF	; 255
    2b42:	8e 8b       	std	Y+22, r24	; 0x16
    2b44:	8e 89       	ldd	r24, Y+22	; 0x16
    2b46:	88 2f       	mov	r24, r24
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	aa 27       	eor	r26, r26
    2b4c:	97 fd       	sbrc	r25, 7
    2b4e:	a0 95       	com	r26
    2b50:	ba 2f       	mov	r27, r26
    2b52:	bc 01       	movw	r22, r24
    2b54:	cd 01       	movw	r24, r26
    2b56:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	bc 01       	movw	r22, r24
    2b60:	cd 01       	movw	r24, r26
    2b62:	2d 81       	ldd	r18, Y+5	; 0x05
    2b64:	3e 81       	ldd	r19, Y+6	; 0x06
    2b66:	4f 81       	ldd	r20, Y+7	; 0x07
    2b68:	58 85       	ldd	r21, Y+8	; 0x08
    2b6a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b6e:	88 23       	and	r24, r24
    2b70:	44 f2       	brlt	.-112    	; 0x2b02 <GLCD_VidDrawPWM+0x164>
			}
			GLCD_VidSendData(0x01);   //Send 0x01 to Display High Level
			Y++;                      //Increment The Column Tracker Variable
		}

		if((Toff != 0) && (Ton != 0))   //If the Wave is not fully High/Low Level
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	9a 81       	ldd	r25, Y+2	; 0x02
    2b76:	ab 81       	ldd	r26, Y+3	; 0x03
    2b78:	bc 81       	ldd	r27, Y+4	; 0x04
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	a1 05       	cpc	r26, r1
    2b7e:	b1 05       	cpc	r27, r1
    2b80:	51 f1       	breq	.+84     	; 0x2bd6 <GLCD_VidDrawPWM+0x238>
    2b82:	6d 81       	ldd	r22, Y+5	; 0x05
    2b84:	7e 81       	ldd	r23, Y+6	; 0x06
    2b86:	8f 81       	ldd	r24, Y+7	; 0x07
    2b88:	98 85       	ldd	r25, Y+8	; 0x08
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e0       	ldi	r20, 0x00	; 0
    2b90:	50 e0       	ldi	r21, 0x00	; 0
    2b92:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    2b96:	88 23       	and	r24, r24
    2b98:	f1 f0       	breq	.+60     	; 0x2bd6 <GLCD_VidDrawPWM+0x238>
		{
			if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    2b9a:	8d 89       	ldd	r24, Y+21	; 0x15
    2b9c:	80 34       	cpi	r24, 0x40	; 64
    2b9e:	89 f4       	brne	.+34     	; 0x2bc2 <GLCD_VidDrawPWM+0x224>
			{
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_LOW);
    2ba0:	82 e0       	ldi	r24, 0x02	; 2
    2ba2:	63 e0       	ldi	r22, 0x03	; 3
    2ba4:	40 e0       	ldi	r20, 0x00	; 0
    2ba6:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
    2baa:	82 e0       	ldi	r24, 0x02	; 2
    2bac:	64 e0       	ldi	r22, 0x04	; 4
    2bae:	41 e0       	ldi	r20, 0x01	; 1
    2bb0:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				GLCD_VidSendCommand(0xB8 + Copy_u8Page);   //Set Page
    2bb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb6:	88 54       	subi	r24, 0x48	; 72
    2bb8:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
				GLCD_VidSendCommand(0x40);                 //Set Column to address 0x40
    2bbc:	80 e4       	ldi	r24, 0x40	; 64
    2bbe:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			}
			if(Y == 128)   //Check if Column address reaches 128 (End of Right Side of GLCD)
    2bc2:	8d 89       	ldd	r24, Y+21	; 0x15
    2bc4:	80 38       	cpi	r24, 0x80	; 128
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <GLCD_VidDrawPWM+0x22c>
    2bc8:	6b c0       	rjmp	.+214    	; 0x2ca0 <GLCD_VidDrawPWM+0x302>
			{
				return;   //Break From Function
			}
			GLCD_VidSendData(0xFF);   //Send 0xFF to Display Vertical Line (Represents Edge)
    2bca:	8f ef       	ldi	r24, 0xFF	; 255
    2bcc:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <GLCD_VidSendData>
			Y++;                      //Increment The Column Tracker Variable
    2bd0:	8d 89       	ldd	r24, Y+21	; 0x15
    2bd2:	8f 5f       	subi	r24, 0xFF	; 255
    2bd4:	8d 8b       	std	Y+21, r24	; 0x15
		}

		for(i=0;i<Toff;i++)   //For Low Level Period (Toff)
    2bd6:	1e 8a       	std	Y+22, r1	; 0x16
    2bd8:	21 c0       	rjmp	.+66     	; 0x2c1c <GLCD_VidDrawPWM+0x27e>
		{
			if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    2bda:	8d 89       	ldd	r24, Y+21	; 0x15
    2bdc:	80 34       	cpi	r24, 0x40	; 64
    2bde:	89 f4       	brne	.+34     	; 0x2c02 <GLCD_VidDrawPWM+0x264>
			{
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_LOW);
    2be0:	82 e0       	ldi	r24, 0x02	; 2
    2be2:	63 e0       	ldi	r22, 0x03	; 3
    2be4:	40 e0       	ldi	r20, 0x00	; 0
    2be6:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
    2bea:	82 e0       	ldi	r24, 0x02	; 2
    2bec:	64 e0       	ldi	r22, 0x04	; 4
    2bee:	41 e0       	ldi	r20, 0x01	; 1
    2bf0:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				GLCD_VidSendCommand(0xB8 + Copy_u8Page);   //Set Page
    2bf4:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf6:	88 54       	subi	r24, 0x48	; 72
    2bf8:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
				GLCD_VidSendCommand(0x40);                 //Set Column to address 0x40
    2bfc:	80 e4       	ldi	r24, 0x40	; 64
    2bfe:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			}
			if(Y == 128)   //Check if Column address reaches 128 (End of Right Side of GLCD)
    2c02:	8d 89       	ldd	r24, Y+21	; 0x15
    2c04:	80 38       	cpi	r24, 0x80	; 128
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <GLCD_VidDrawPWM+0x26c>
    2c08:	4b c0       	rjmp	.+150    	; 0x2ca0 <GLCD_VidDrawPWM+0x302>
			{
				return;   //Break From Function
			}
			GLCD_VidSendData(0x80);   //Send 0x80 to Display Low Level
    2c0a:	80 e8       	ldi	r24, 0x80	; 128
    2c0c:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <GLCD_VidSendData>
			Y++;                      //Increment The Column Tracker Variable
    2c10:	8d 89       	ldd	r24, Y+21	; 0x15
    2c12:	8f 5f       	subi	r24, 0xFF	; 255
    2c14:	8d 8b       	std	Y+21, r24	; 0x15
			}
			GLCD_VidSendData(0xFF);   //Send 0xFF to Display Vertical Line (Represents Edge)
			Y++;                      //Increment The Column Tracker Variable
		}

		for(i=0;i<Toff;i++)   //For Low Level Period (Toff)
    2c16:	8e 89       	ldd	r24, Y+22	; 0x16
    2c18:	8f 5f       	subi	r24, 0xFF	; 255
    2c1a:	8e 8b       	std	Y+22, r24	; 0x16
    2c1c:	8e 89       	ldd	r24, Y+22	; 0x16
    2c1e:	28 2f       	mov	r18, r24
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	40 e0       	ldi	r20, 0x00	; 0
    2c24:	50 e0       	ldi	r21, 0x00	; 0
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	9a 81       	ldd	r25, Y+2	; 0x02
    2c2a:	ab 81       	ldd	r26, Y+3	; 0x03
    2c2c:	bc 81       	ldd	r27, Y+4	; 0x04
    2c2e:	28 17       	cp	r18, r24
    2c30:	39 07       	cpc	r19, r25
    2c32:	4a 07       	cpc	r20, r26
    2c34:	5b 07       	cpc	r21, r27
    2c36:	88 f2       	brcs	.-94     	; 0x2bda <GLCD_VidDrawPWM+0x23c>
			}
			GLCD_VidSendData(0x80);   //Send 0x80 to Display Low Level
			Y++;                      //Increment The Column Tracker Variable
		}

		if((Toff != 0) && (Ton != 0))   //If the Wave is not fully High/Low Level
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3c:	ab 81       	ldd	r26, Y+3	; 0x03
    2c3e:	bc 81       	ldd	r27, Y+4	; 0x04
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	a1 05       	cpc	r26, r1
    2c44:	b1 05       	cpc	r27, r1
    2c46:	09 f4       	brne	.+2      	; 0x2c4a <GLCD_VidDrawPWM+0x2ac>
    2c48:	5a cf       	rjmp	.-332    	; 0x2afe <GLCD_VidDrawPWM+0x160>
    2c4a:	6d 81       	ldd	r22, Y+5	; 0x05
    2c4c:	7e 81       	ldd	r23, Y+6	; 0x06
    2c4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2c50:	98 85       	ldd	r25, Y+8	; 0x08
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e0       	ldi	r20, 0x00	; 0
    2c58:	50 e0       	ldi	r21, 0x00	; 0
    2c5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    2c5e:	88 23       	and	r24, r24
    2c60:	09 f4       	brne	.+2      	; 0x2c64 <GLCD_VidDrawPWM+0x2c6>
    2c62:	4d cf       	rjmp	.-358    	; 0x2afe <GLCD_VidDrawPWM+0x160>
		{
			if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    2c64:	8d 89       	ldd	r24, Y+21	; 0x15
    2c66:	80 34       	cpi	r24, 0x40	; 64
    2c68:	89 f4       	brne	.+34     	; 0x2c8c <GLCD_VidDrawPWM+0x2ee>
			{
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN3,PIN_LOW);
    2c6a:	82 e0       	ldi	r24, 0x02	; 2
    2c6c:	63 e0       	ldi	r22, 0x03	; 3
    2c6e:	40 e0       	ldi	r20, 0x00	; 0
    2c70:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,PIN4,PIN_HIGH);
    2c74:	82 e0       	ldi	r24, 0x02	; 2
    2c76:	64 e0       	ldi	r22, 0x04	; 4
    2c78:	41 e0       	ldi	r20, 0x01	; 1
    2c7a:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				GLCD_VidSendCommand(0xB8 + Copy_u8Page);   //Set Page
    2c7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c80:	88 54       	subi	r24, 0x48	; 72
    2c82:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
				GLCD_VidSendCommand(0x40);                 //Set Column to address 0x40
    2c86:	80 e4       	ldi	r24, 0x40	; 64
    2c88:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			}
			if(Y == 128)   //Check if Column address reaches 128 (End of Right Side of GLCD)
    2c8c:	8d 89       	ldd	r24, Y+21	; 0x15
    2c8e:	80 38       	cpi	r24, 0x80	; 128
    2c90:	39 f0       	breq	.+14     	; 0x2ca0 <GLCD_VidDrawPWM+0x302>
			{
				return;   //Break From Function
			}
			GLCD_VidSendData(0xFF);   //Send 0xFF to Display Vertical Line (Represents Edge)
    2c92:	8f ef       	ldi	r24, 0xFF	; 255
    2c94:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <GLCD_VidSendData>
			Y++;                      //Increment The Column Tracker Variable
    2c98:	8d 89       	ldd	r24, Y+21	; 0x15
    2c9a:	8f 5f       	subi	r24, 0xFF	; 255
    2c9c:	8d 8b       	std	Y+21, r24	; 0x15
    2c9e:	2f cf       	rjmp	.-418    	; 0x2afe <GLCD_VidDrawPWM+0x160>
		}
	}
}
    2ca0:	6f 96       	adiw	r28, 0x1f	; 31
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	1f 91       	pop	r17
    2cb2:	0f 91       	pop	r16
    2cb4:	08 95       	ret

00002cb6 <TIMER0_VidInit>:
#include "TIMER_Interface.h"
#include "TIMER_Config.h"

//Timer0 Initialization
void TIMER0_VidInit(void)
{
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
	/*Set Prescaler*/
	TCCR0&=0xF8;
    2cbe:	a3 e5       	ldi	r26, 0x53	; 83
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	e3 e5       	ldi	r30, 0x53	; 83
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	88 7f       	andi	r24, 0xF8	; 248
    2cca:	8c 93       	st	X, r24
	TCCR0|=TIMER0_SET_PRESCALER;
    2ccc:	a3 e5       	ldi	r26, 0x53	; 83
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	e3 e5       	ldi	r30, 0x53	; 83
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	82 60       	ori	r24, 0x02	; 2
    2cd8:	8c 93       	st	X, r24
#error "Timer0 OC0 Pin Option is not Valid"
#endif
	/*Enable CTC Interrupt*/
	SET_BIT(TIMSK,1);
#elif TIMER0_SET_MODE == TIMER0_FAST_PWM_MODE   //Select Fast PWM Mode
	SET_BIT(TCCR0,6);
    2cda:	a3 e5       	ldi	r26, 0x53	; 83
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	e3 e5       	ldi	r30, 0x53	; 83
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	80 64       	ori	r24, 0x40	; 64
    2ce6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    2ce8:	a3 e5       	ldi	r26, 0x53	; 83
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	e3 e5       	ldi	r30, 0x53	; 83
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	88 60       	ori	r24, 0x08	; 8
    2cf4:	8c 93       	st	X, r24
	//OC0 Pin Option
#if TIMER0_FAST_PWM_OC0_MODE == TIMER0_OC0_NON_INVERTING   //OC0 in Non Inverting Mode
	CLR_BIT(TCCR0,4);
    2cf6:	a3 e5       	ldi	r26, 0x53	; 83
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	e3 e5       	ldi	r30, 0x53	; 83
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	8f 7e       	andi	r24, 0xEF	; 239
    2d02:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    2d04:	a3 e5       	ldi	r26, 0x53	; 83
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	e3 e5       	ldi	r30, 0x53	; 83
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	80 62       	ori	r24, 0x20	; 32
    2d10:	8c 93       	st	X, r24
#error "Timer0 OC0 Pin Option is not Valid"
#endif
#else
#error "Timer0 Mode Option is not Valid"
#endif
}
    2d12:	cf 91       	pop	r28
    2d14:	df 91       	pop	r29
    2d16:	08 95       	ret

00002d18 <TIMER0_VidSetPreload>:
//Timer0 Set Preload
void TIMER0_VidSetPreload(u8 Copy_u8Preload)
{
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	0f 92       	push	r0
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
    2d22:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
    2d24:	e2 e5       	ldi	r30, 0x52	; 82
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	80 83       	st	Z, r24
}
    2d2c:	0f 90       	pop	r0
    2d2e:	cf 91       	pop	r28
    2d30:	df 91       	pop	r29
    2d32:	08 95       	ret

00002d34 <TIMER0_VidSetCTCValue>:
//Timer0 Set CTC Value
void TIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
    2d34:	df 93       	push	r29
    2d36:	cf 93       	push	r28
    2d38:	0f 92       	push	r0
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
    2d3e:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTCValue;
    2d40:	ec e5       	ldi	r30, 0x5C	; 92
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	80 83       	st	Z, r24
}
    2d48:	0f 90       	pop	r0
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	08 95       	ret

00002d50 <TIMER1_VidInit>:

//Timer1 Initialization
void TIMER1_VidInit(void)
{
    2d50:	df 93       	push	r29
    2d52:	cf 93       	push	r28
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
	/*Set Prescaler*/
	TCCR1B&=0xF8;
    2d58:	ae e4       	ldi	r26, 0x4E	; 78
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	ee e4       	ldi	r30, 0x4E	; 78
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	88 7f       	andi	r24, 0xF8	; 248
    2d64:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SET_PRESCALER;
    2d66:	ae e4       	ldi	r26, 0x4E	; 78
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	ee e4       	ldi	r30, 0x4E	; 78
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 81       	ld	r24, Z
    2d70:	82 60       	ori	r24, 0x02	; 2
    2d72:	8c 93       	st	X, r24
	/*Set Mode*/
#if TIMER1_SET_MODE == TIMER1_NORMAL_MODE   //Select Normal Mode
	CLR_BIT(TCCR1A,0);
    2d74:	af e4       	ldi	r26, 0x4F	; 79
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	ef e4       	ldi	r30, 0x4F	; 79
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	8e 7f       	andi	r24, 0xFE	; 254
    2d80:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
    2d82:	af e4       	ldi	r26, 0x4F	; 79
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	ef e4       	ldi	r30, 0x4F	; 79
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	8d 7f       	andi	r24, 0xFD	; 253
    2d8e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
    2d90:	ae e4       	ldi	r26, 0x4E	; 78
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	ee e4       	ldi	r30, 0x4E	; 78
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	87 7f       	andi	r24, 0xF7	; 247
    2d9c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);
    2d9e:	ae e4       	ldi	r26, 0x4E	; 78
    2da0:	b0 e0       	ldi	r27, 0x00	; 0
    2da2:	ee e4       	ldi	r30, 0x4E	; 78
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	80 81       	ld	r24, Z
    2da8:	8f 7e       	andi	r24, 0xEF	; 239
    2daa:	8c 93       	st	X, r24
	/*Enable Overflow Interrupt*/
	SET_BIT(TIMSK,2);
    2dac:	a9 e5       	ldi	r26, 0x59	; 89
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	e9 e5       	ldi	r30, 0x59	; 89
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 81       	ld	r24, Z
    2db6:	84 60       	ori	r24, 0x04	; 4
    2db8:	8c 93       	st	X, r24
#else
#error "Timer1 Mode Option is not Valid"
#endif


}
    2dba:	cf 91       	pop	r28
    2dbc:	df 91       	pop	r29
    2dbe:	08 95       	ret

00002dc0 <TIMER1_VidSetPreload>:
//Timer1 Set Preload
void TIMER1_VidSetPreload(u16 Copy_u16Preload)
{
    2dc0:	df 93       	push	r29
    2dc2:	cf 93       	push	r28
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <TIMER1_VidSetPreload+0x6>
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	9a 83       	std	Y+2, r25	; 0x02
    2dcc:	89 83       	std	Y+1, r24	; 0x01
	TCNT1  = Copy_u16Preload;
    2dce:	ec e4       	ldi	r30, 0x4C	; 76
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	80 83       	st	Z, r24
}
    2dda:	0f 90       	pop	r0
    2ddc:	0f 90       	pop	r0
    2dde:	cf 91       	pop	r28
    2de0:	df 91       	pop	r29
    2de2:	08 95       	ret

00002de4 <TIMER1_VidSetCTCValue>:
//Timer1 Set CTC Value
void TIMER1_VidSetCTCValue(u16 Copy_u16CTCValue)
{
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	00 d0       	rcall	.+0      	; 0x2dea <TIMER1_VidSetCTCValue+0x6>
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
    2dee:	9a 83       	std	Y+2, r25	; 0x02
    2df0:	89 83       	std	Y+1, r24	; 0x01
#if TIMER1_CHANNEL == TIMER1_CHANNEL_A
	OCR1A = Copy_u16CTCValue;
    2df2:	ea e4       	ldi	r30, 0x4A	; 74
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	80 83       	st	Z, r24
#elif TIMER1_CHANNEL == TIMER1_CHANNEL_B
	OCR1B = Copy_u16CTCValue;
#else
#error "Timer1 Channel Option is not Valid"
#endif
}
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <TIMER1_VidSetTopValue>:
//Timer1 Set Top Value
void TIMER1_VidSetTopValue(u16 Copy_u16TopValue)
{
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	00 d0       	rcall	.+0      	; 0x2e0e <TIMER1_VidSetTopValue+0x6>
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	9a 83       	std	Y+2, r25	; 0x02
    2e14:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16TopValue;
    2e16:	e6 e4       	ldi	r30, 0x46	; 70
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1e:	91 83       	std	Z+1, r25	; 0x01
    2e20:	80 83       	st	Z, r24
}
    2e22:	0f 90       	pop	r0
    2e24:	0f 90       	pop	r0
    2e26:	cf 91       	pop	r28
    2e28:	df 91       	pop	r29
    2e2a:	08 95       	ret

00002e2c <TIMER1_VidICUEnable>:
//Timer1 Select Sense Edge & Enable ICU Interrupt
void TIMER1_VidICUEnable(u8 Copy_u8Edge)
{
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	0f 92       	push	r0
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	89 83       	std	Y+1, r24	; 0x01
	/*Select Sense Control*/
	if(Copy_u8Edge == TIMER1_ICU_RAISING_EDGE)
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	88 23       	and	r24, r24
    2e3c:	41 f4       	brne	.+16     	; 0x2e4e <TIMER1_VidICUEnable+0x22>
	{
		SET_BIT(TCCR1B,6);
    2e3e:	ae e4       	ldi	r26, 0x4E	; 78
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	ee e4       	ldi	r30, 0x4E	; 78
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	80 81       	ld	r24, Z
    2e48:	80 64       	ori	r24, 0x40	; 64
    2e4a:	8c 93       	st	X, r24
    2e4c:	0a c0       	rjmp	.+20     	; 0x2e62 <TIMER1_VidICUEnable+0x36>
	}
	else if(Copy_u8Edge == TIMER1_ICU_FALLING_EDGE)
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	81 30       	cpi	r24, 0x01	; 1
    2e52:	39 f4       	brne	.+14     	; 0x2e62 <TIMER1_VidICUEnable+0x36>
	{
		CLR_BIT(TCCR1B,6);
    2e54:	ae e4       	ldi	r26, 0x4E	; 78
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	ee e4       	ldi	r30, 0x4E	; 78
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	8f 7b       	andi	r24, 0xBF	; 191
    2e60:	8c 93       	st	X, r24
	}
	/*ICU Interrupt Enable*/
	SET_BIT(TIMSK,5);
    2e62:	a9 e5       	ldi	r26, 0x59	; 89
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	e9 e5       	ldi	r30, 0x59	; 89
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	80 81       	ld	r24, Z
    2e6c:	80 62       	ori	r24, 0x20	; 32
    2e6e:	8c 93       	st	X, r24
}
    2e70:	0f 90       	pop	r0
    2e72:	cf 91       	pop	r28
    2e74:	df 91       	pop	r29
    2e76:	08 95       	ret

00002e78 <TIMER2_VidInit>:

//Timer2 Initialization
void TIMER2_VidInit(void)
{
    2e78:	df 93       	push	r29
    2e7a:	cf 93       	push	r28
    2e7c:	cd b7       	in	r28, 0x3d	; 61
    2e7e:	de b7       	in	r29, 0x3e	; 62
	/*Set Prescaler*/
	TCCR2&=0xF8;
    2e80:	a5 e4       	ldi	r26, 0x45	; 69
    2e82:	b0 e0       	ldi	r27, 0x00	; 0
    2e84:	e5 e4       	ldi	r30, 0x45	; 69
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	80 81       	ld	r24, Z
    2e8a:	91 81       	ldd	r25, Z+1	; 0x01
    2e8c:	88 7f       	andi	r24, 0xF8	; 248
    2e8e:	90 70       	andi	r25, 0x00	; 0
    2e90:	11 96       	adiw	r26, 0x01	; 1
    2e92:	9c 93       	st	X, r25
    2e94:	8e 93       	st	-X, r24
	TCCR2|=TIMER2_SET_PRESCALER;
    2e96:	a5 e4       	ldi	r26, 0x45	; 69
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	e5 e4       	ldi	r30, 0x45	; 69
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	91 81       	ldd	r25, Z+1	; 0x01
    2ea2:	83 60       	ori	r24, 0x03	; 3
    2ea4:	11 96       	adiw	r26, 0x01	; 1
    2ea6:	9c 93       	st	X, r25
    2ea8:	8e 93       	st	-X, r24
#error "Timer2 OC2 Pin Option is not Valid"
#endif
	/*Enable CTC Interrupt*/
	SET_BIT(TIMSK,7);
#elif TIMER2_SET_MODE == TIMER2_FAST_PWM_MODE   //Select Fast PWM Mode
	SET_BIT(TCCR2,6);
    2eaa:	a5 e4       	ldi	r26, 0x45	; 69
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	e5 e4       	ldi	r30, 0x45	; 69
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	91 81       	ldd	r25, Z+1	; 0x01
    2eb6:	80 64       	ori	r24, 0x40	; 64
    2eb8:	11 96       	adiw	r26, 0x01	; 1
    2eba:	9c 93       	st	X, r25
    2ebc:	8e 93       	st	-X, r24
	SET_BIT(TCCR2,3);
    2ebe:	a5 e4       	ldi	r26, 0x45	; 69
    2ec0:	b0 e0       	ldi	r27, 0x00	; 0
    2ec2:	e5 e4       	ldi	r30, 0x45	; 69
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	91 81       	ldd	r25, Z+1	; 0x01
    2eca:	88 60       	ori	r24, 0x08	; 8
    2ecc:	11 96       	adiw	r26, 0x01	; 1
    2ece:	9c 93       	st	X, r25
    2ed0:	8e 93       	st	-X, r24
	//OC2 Pin Option
#if TIMER2_FAST_PWM_OC2_MODE == TIMER2_OC2_NON_INVERTING   //OC2 in Non Inverting Mode
	CLR_BIT(TCCR2,4);
    2ed2:	a5 e4       	ldi	r26, 0x45	; 69
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	e5 e4       	ldi	r30, 0x45	; 69
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	91 81       	ldd	r25, Z+1	; 0x01
    2ede:	8f 7e       	andi	r24, 0xEF	; 239
    2ee0:	11 96       	adiw	r26, 0x01	; 1
    2ee2:	9c 93       	st	X, r25
    2ee4:	8e 93       	st	-X, r24
	SET_BIT(TCCR2,5);
    2ee6:	a5 e4       	ldi	r26, 0x45	; 69
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	e5 e4       	ldi	r30, 0x45	; 69
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	91 81       	ldd	r25, Z+1	; 0x01
    2ef2:	80 62       	ori	r24, 0x20	; 32
    2ef4:	11 96       	adiw	r26, 0x01	; 1
    2ef6:	9c 93       	st	X, r25
    2ef8:	8e 93       	st	-X, r24
#error "Timer2 OC2 Pin Option is not Valid"
#endif
#else
#error "Timer2 Mode Option is not Valid"
#endif
}
    2efa:	cf 91       	pop	r28
    2efc:	df 91       	pop	r29
    2efe:	08 95       	ret

00002f00 <TIMER2_VidSetPreload>:
//Timer2 Set Preload
void TIMER2_VidSetPreload(u8 Copy_u8Preload)
{
    2f00:	df 93       	push	r29
    2f02:	cf 93       	push	r28
    2f04:	0f 92       	push	r0
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload;
    2f0c:	e4 e4       	ldi	r30, 0x44	; 68
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	88 2f       	mov	r24, r24
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	91 83       	std	Z+1, r25	; 0x01
    2f18:	80 83       	st	Z, r24
}
    2f1a:	0f 90       	pop	r0
    2f1c:	cf 91       	pop	r28
    2f1e:	df 91       	pop	r29
    2f20:	08 95       	ret

00002f22 <TIMER2_VidSetCTCValue>:
//Timer2 Set CTC Value
void TIMER2_VidSetCTCValue(u8 Copy_u8CTCValue)
{
    2f22:	df 93       	push	r29
    2f24:	cf 93       	push	r28
    2f26:	0f 92       	push	r0
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
    2f2c:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTCValue;
    2f2e:	e3 e4       	ldi	r30, 0x43	; 67
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	89 81       	ldd	r24, Y+1	; 0x01
    2f34:	88 2f       	mov	r24, r24
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	91 83       	std	Z+1, r25	; 0x01
    2f3a:	80 83       	st	Z, r24
}
    2f3c:	0f 90       	pop	r0
    2f3e:	cf 91       	pop	r28
    2f40:	df 91       	pop	r29
    2f42:	08 95       	ret

00002f44 <main>:
u32 T1;
u32 T2;
u32 T3;

int main(void)
{
    2f44:	af 92       	push	r10
    2f46:	bf 92       	push	r11
    2f48:	cf 92       	push	r12
    2f4a:	df 92       	push	r13
    2f4c:	ef 92       	push	r14
    2f4e:	ff 92       	push	r15
    2f50:	0f 93       	push	r16
    2f52:	1f 93       	push	r17
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
    2f5c:	c1 57       	subi	r28, 0x71	; 113
    2f5e:	d0 40       	sbci	r29, 0x00	; 0
    2f60:	0f b6       	in	r0, 0x3f	; 63
    2f62:	f8 94       	cli
    2f64:	de bf       	out	0x3e, r29	; 62
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	cd bf       	out	0x3d, r28	; 61
	u8 Frequency_ARR[] ="Frequency = ";
    2f6a:	8e 01       	movw	r16, r28
    2f6c:	05 5e       	subi	r16, 0xE5	; 229
    2f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f70:	6b 96       	adiw	r28, 0x1b	; 27
    2f72:	1f af       	std	Y+63, r17	; 0x3f
    2f74:	0e af       	std	Y+62, r16	; 0x3e
    2f76:	6b 97       	sbiw	r28, 0x1b	; 27
    2f78:	80 e6       	ldi	r24, 0x60	; 96
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	6d 96       	adiw	r28, 0x1d	; 29
    2f7e:	9f af       	std	Y+63, r25	; 0x3f
    2f80:	8e af       	std	Y+62, r24	; 0x3e
    2f82:	6d 97       	sbiw	r28, 0x1d	; 29
    2f84:	9d e0       	ldi	r25, 0x0D	; 13
    2f86:	6e 96       	adiw	r28, 0x1e	; 30
    2f88:	9f af       	std	Y+63, r25	; 0x3f
    2f8a:	6e 97       	sbiw	r28, 0x1e	; 30
    2f8c:	6d 96       	adiw	r28, 0x1d	; 29
    2f8e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f90:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f92:	6d 97       	sbiw	r28, 0x1d	; 29
    2f94:	00 80       	ld	r0, Z
    2f96:	6d 96       	adiw	r28, 0x1d	; 29
    2f98:	0e ad       	ldd	r16, Y+62	; 0x3e
    2f9a:	1f ad       	ldd	r17, Y+63	; 0x3f
    2f9c:	6d 97       	sbiw	r28, 0x1d	; 29
    2f9e:	0f 5f       	subi	r16, 0xFF	; 255
    2fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa2:	6d 96       	adiw	r28, 0x1d	; 29
    2fa4:	1f af       	std	Y+63, r17	; 0x3f
    2fa6:	0e af       	std	Y+62, r16	; 0x3e
    2fa8:	6d 97       	sbiw	r28, 0x1d	; 29
    2faa:	6b 96       	adiw	r28, 0x1b	; 27
    2fac:	ee ad       	ldd	r30, Y+62	; 0x3e
    2fae:	ff ad       	ldd	r31, Y+63	; 0x3f
    2fb0:	6b 97       	sbiw	r28, 0x1b	; 27
    2fb2:	00 82       	st	Z, r0
    2fb4:	6b 96       	adiw	r28, 0x1b	; 27
    2fb6:	0e ad       	ldd	r16, Y+62	; 0x3e
    2fb8:	1f ad       	ldd	r17, Y+63	; 0x3f
    2fba:	6b 97       	sbiw	r28, 0x1b	; 27
    2fbc:	0f 5f       	subi	r16, 0xFF	; 255
    2fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc0:	6b 96       	adiw	r28, 0x1b	; 27
    2fc2:	1f af       	std	Y+63, r17	; 0x3f
    2fc4:	0e af       	std	Y+62, r16	; 0x3e
    2fc6:	6b 97       	sbiw	r28, 0x1b	; 27
    2fc8:	6e 96       	adiw	r28, 0x1e	; 30
    2fca:	1f ad       	ldd	r17, Y+63	; 0x3f
    2fcc:	6e 97       	sbiw	r28, 0x1e	; 30
    2fce:	11 50       	subi	r17, 0x01	; 1
    2fd0:	6e 96       	adiw	r28, 0x1e	; 30
    2fd2:	1f af       	std	Y+63, r17	; 0x3f
    2fd4:	6e 97       	sbiw	r28, 0x1e	; 30
    2fd6:	6e 96       	adiw	r28, 0x1e	; 30
    2fd8:	8f ad       	ldd	r24, Y+63	; 0x3f
    2fda:	6e 97       	sbiw	r28, 0x1e	; 30
    2fdc:	88 23       	and	r24, r24
    2fde:	b1 f6       	brne	.-84     	; 0x2f8c <main+0x48>
	u8 KHZ[] ="KHZ";
    2fe0:	80 91 6d 00 	lds	r24, 0x006D
    2fe4:	90 91 6e 00 	lds	r25, 0x006E
    2fe8:	a0 91 6f 00 	lds	r26, 0x006F
    2fec:	b0 91 70 00 	lds	r27, 0x0070
    2ff0:	88 a7       	std	Y+40, r24	; 0x28
    2ff2:	99 a7       	std	Y+41, r25	; 0x29
    2ff4:	aa a7       	std	Y+42, r26	; 0x2a
    2ff6:	bb a7       	std	Y+43, r27	; 0x2b
	u8 DutyCycle_ARR[] = "Duty Cycle = ";
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	bc 96       	adiw	r30, 0x2c	; 44
    2ffc:	a0 96       	adiw	r28, 0x20	; 32
    2ffe:	ff af       	std	Y+63, r31	; 0x3f
    3000:	ee af       	std	Y+62, r30	; 0x3e
    3002:	a0 97       	sbiw	r28, 0x20	; 32
    3004:	01 e7       	ldi	r16, 0x71	; 113
    3006:	10 e0       	ldi	r17, 0x00	; 0
    3008:	a2 96       	adiw	r28, 0x22	; 34
    300a:	1f af       	std	Y+63, r17	; 0x3f
    300c:	0e af       	std	Y+62, r16	; 0x3e
    300e:	a2 97       	sbiw	r28, 0x22	; 34
    3010:	1e e0       	ldi	r17, 0x0E	; 14
    3012:	a3 96       	adiw	r28, 0x23	; 35
    3014:	1f af       	std	Y+63, r17	; 0x3f
    3016:	a3 97       	sbiw	r28, 0x23	; 35
    3018:	a2 96       	adiw	r28, 0x22	; 34
    301a:	ee ad       	ldd	r30, Y+62	; 0x3e
    301c:	ff ad       	ldd	r31, Y+63	; 0x3f
    301e:	a2 97       	sbiw	r28, 0x22	; 34
    3020:	00 80       	ld	r0, Z
    3022:	a2 96       	adiw	r28, 0x22	; 34
    3024:	0e ad       	ldd	r16, Y+62	; 0x3e
    3026:	1f ad       	ldd	r17, Y+63	; 0x3f
    3028:	a2 97       	sbiw	r28, 0x22	; 34
    302a:	0f 5f       	subi	r16, 0xFF	; 255
    302c:	1f 4f       	sbci	r17, 0xFF	; 255
    302e:	a2 96       	adiw	r28, 0x22	; 34
    3030:	1f af       	std	Y+63, r17	; 0x3f
    3032:	0e af       	std	Y+62, r16	; 0x3e
    3034:	a2 97       	sbiw	r28, 0x22	; 34
    3036:	a0 96       	adiw	r28, 0x20	; 32
    3038:	ee ad       	ldd	r30, Y+62	; 0x3e
    303a:	ff ad       	ldd	r31, Y+63	; 0x3f
    303c:	a0 97       	sbiw	r28, 0x20	; 32
    303e:	00 82       	st	Z, r0
    3040:	a0 96       	adiw	r28, 0x20	; 32
    3042:	0e ad       	ldd	r16, Y+62	; 0x3e
    3044:	1f ad       	ldd	r17, Y+63	; 0x3f
    3046:	a0 97       	sbiw	r28, 0x20	; 32
    3048:	0f 5f       	subi	r16, 0xFF	; 255
    304a:	1f 4f       	sbci	r17, 0xFF	; 255
    304c:	a0 96       	adiw	r28, 0x20	; 32
    304e:	1f af       	std	Y+63, r17	; 0x3f
    3050:	0e af       	std	Y+62, r16	; 0x3e
    3052:	a0 97       	sbiw	r28, 0x20	; 32
    3054:	a3 96       	adiw	r28, 0x23	; 35
    3056:	1f ad       	ldd	r17, Y+63	; 0x3f
    3058:	a3 97       	sbiw	r28, 0x23	; 35
    305a:	11 50       	subi	r17, 0x01	; 1
    305c:	a3 96       	adiw	r28, 0x23	; 35
    305e:	1f af       	std	Y+63, r17	; 0x3f
    3060:	a3 97       	sbiw	r28, 0x23	; 35
    3062:	a3 96       	adiw	r28, 0x23	; 35
    3064:	8f ad       	ldd	r24, Y+63	; 0x3f
    3066:	a3 97       	sbiw	r28, 0x23	; 35
    3068:	88 23       	and	r24, r24
    306a:	b1 f6       	brne	.-84     	; 0x3018 <main+0xd4>
	u8 Percent[] ="%";
    306c:	80 91 7f 00 	lds	r24, 0x007F
    3070:	90 91 80 00 	lds	r25, 0x0080
    3074:	9b af       	std	Y+59, r25	; 0x3b
    3076:	8a af       	std	Y+58, r24	; 0x3a
	u8 TimePerid_ARR[] = "Time Period = ";
    3078:	fe 01       	movw	r30, r28
    307a:	fc 96       	adiw	r30, 0x3c	; 60
    307c:	a5 96       	adiw	r28, 0x25	; 37
    307e:	ff af       	std	Y+63, r31	; 0x3f
    3080:	ee af       	std	Y+62, r30	; 0x3e
    3082:	a5 97       	sbiw	r28, 0x25	; 37
    3084:	01 e8       	ldi	r16, 0x81	; 129
    3086:	10 e0       	ldi	r17, 0x00	; 0
    3088:	a7 96       	adiw	r28, 0x27	; 39
    308a:	1f af       	std	Y+63, r17	; 0x3f
    308c:	0e af       	std	Y+62, r16	; 0x3e
    308e:	a7 97       	sbiw	r28, 0x27	; 39
    3090:	1f e0       	ldi	r17, 0x0F	; 15
    3092:	a8 96       	adiw	r28, 0x28	; 40
    3094:	1f af       	std	Y+63, r17	; 0x3f
    3096:	a8 97       	sbiw	r28, 0x28	; 40
    3098:	a7 96       	adiw	r28, 0x27	; 39
    309a:	ee ad       	ldd	r30, Y+62	; 0x3e
    309c:	ff ad       	ldd	r31, Y+63	; 0x3f
    309e:	a7 97       	sbiw	r28, 0x27	; 39
    30a0:	00 80       	ld	r0, Z
    30a2:	a7 96       	adiw	r28, 0x27	; 39
    30a4:	0e ad       	ldd	r16, Y+62	; 0x3e
    30a6:	1f ad       	ldd	r17, Y+63	; 0x3f
    30a8:	a7 97       	sbiw	r28, 0x27	; 39
    30aa:	0f 5f       	subi	r16, 0xFF	; 255
    30ac:	1f 4f       	sbci	r17, 0xFF	; 255
    30ae:	a7 96       	adiw	r28, 0x27	; 39
    30b0:	1f af       	std	Y+63, r17	; 0x3f
    30b2:	0e af       	std	Y+62, r16	; 0x3e
    30b4:	a7 97       	sbiw	r28, 0x27	; 39
    30b6:	a5 96       	adiw	r28, 0x25	; 37
    30b8:	ee ad       	ldd	r30, Y+62	; 0x3e
    30ba:	ff ad       	ldd	r31, Y+63	; 0x3f
    30bc:	a5 97       	sbiw	r28, 0x25	; 37
    30be:	00 82       	st	Z, r0
    30c0:	a5 96       	adiw	r28, 0x25	; 37
    30c2:	0e ad       	ldd	r16, Y+62	; 0x3e
    30c4:	1f ad       	ldd	r17, Y+63	; 0x3f
    30c6:	a5 97       	sbiw	r28, 0x25	; 37
    30c8:	0f 5f       	subi	r16, 0xFF	; 255
    30ca:	1f 4f       	sbci	r17, 0xFF	; 255
    30cc:	a5 96       	adiw	r28, 0x25	; 37
    30ce:	1f af       	std	Y+63, r17	; 0x3f
    30d0:	0e af       	std	Y+62, r16	; 0x3e
    30d2:	a5 97       	sbiw	r28, 0x25	; 37
    30d4:	a8 96       	adiw	r28, 0x28	; 40
    30d6:	1f ad       	ldd	r17, Y+63	; 0x3f
    30d8:	a8 97       	sbiw	r28, 0x28	; 40
    30da:	11 50       	subi	r17, 0x01	; 1
    30dc:	a8 96       	adiw	r28, 0x28	; 40
    30de:	1f af       	std	Y+63, r17	; 0x3f
    30e0:	a8 97       	sbiw	r28, 0x28	; 40
    30e2:	a8 96       	adiw	r28, 0x28	; 40
    30e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    30e6:	a8 97       	sbiw	r28, 0x28	; 40
    30e8:	88 23       	and	r24, r24
    30ea:	b1 f6       	brne	.-84     	; 0x3098 <main+0x154>
	u8 ms[] ="ms";
    30ec:	ce 01       	movw	r24, r28
    30ee:	85 5b       	subi	r24, 0xB5	; 181
    30f0:	9f 4f       	sbci	r25, 0xFF	; 255
    30f2:	aa 96       	adiw	r28, 0x2a	; 42
    30f4:	9f af       	std	Y+63, r25	; 0x3f
    30f6:	8e af       	std	Y+62, r24	; 0x3e
    30f8:	aa 97       	sbiw	r28, 0x2a	; 42
    30fa:	e0 e9       	ldi	r30, 0x90	; 144
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	ac 96       	adiw	r28, 0x2c	; 44
    3100:	ff af       	std	Y+63, r31	; 0x3f
    3102:	ee af       	std	Y+62, r30	; 0x3e
    3104:	ac 97       	sbiw	r28, 0x2c	; 44
    3106:	f3 e0       	ldi	r31, 0x03	; 3
    3108:	ad 96       	adiw	r28, 0x2d	; 45
    310a:	ff af       	std	Y+63, r31	; 0x3f
    310c:	ad 97       	sbiw	r28, 0x2d	; 45
    310e:	ac 96       	adiw	r28, 0x2c	; 44
    3110:	ee ad       	ldd	r30, Y+62	; 0x3e
    3112:	ff ad       	ldd	r31, Y+63	; 0x3f
    3114:	ac 97       	sbiw	r28, 0x2c	; 44
    3116:	00 80       	ld	r0, Z
    3118:	ac 96       	adiw	r28, 0x2c	; 44
    311a:	0e ad       	ldd	r16, Y+62	; 0x3e
    311c:	1f ad       	ldd	r17, Y+63	; 0x3f
    311e:	ac 97       	sbiw	r28, 0x2c	; 44
    3120:	0f 5f       	subi	r16, 0xFF	; 255
    3122:	1f 4f       	sbci	r17, 0xFF	; 255
    3124:	ac 96       	adiw	r28, 0x2c	; 44
    3126:	1f af       	std	Y+63, r17	; 0x3f
    3128:	0e af       	std	Y+62, r16	; 0x3e
    312a:	ac 97       	sbiw	r28, 0x2c	; 44
    312c:	aa 96       	adiw	r28, 0x2a	; 42
    312e:	ee ad       	ldd	r30, Y+62	; 0x3e
    3130:	ff ad       	ldd	r31, Y+63	; 0x3f
    3132:	aa 97       	sbiw	r28, 0x2a	; 42
    3134:	00 82       	st	Z, r0
    3136:	aa 96       	adiw	r28, 0x2a	; 42
    3138:	0e ad       	ldd	r16, Y+62	; 0x3e
    313a:	1f ad       	ldd	r17, Y+63	; 0x3f
    313c:	aa 97       	sbiw	r28, 0x2a	; 42
    313e:	0f 5f       	subi	r16, 0xFF	; 255
    3140:	1f 4f       	sbci	r17, 0xFF	; 255
    3142:	aa 96       	adiw	r28, 0x2a	; 42
    3144:	1f af       	std	Y+63, r17	; 0x3f
    3146:	0e af       	std	Y+62, r16	; 0x3e
    3148:	aa 97       	sbiw	r28, 0x2a	; 42
    314a:	ad 96       	adiw	r28, 0x2d	; 45
    314c:	1f ad       	ldd	r17, Y+63	; 0x3f
    314e:	ad 97       	sbiw	r28, 0x2d	; 45
    3150:	11 50       	subi	r17, 0x01	; 1
    3152:	ad 96       	adiw	r28, 0x2d	; 45
    3154:	1f af       	std	Y+63, r17	; 0x3f
    3156:	ad 97       	sbiw	r28, 0x2d	; 45
    3158:	ad 96       	adiw	r28, 0x2d	; 45
    315a:	8f ad       	ldd	r24, Y+63	; 0x3f
    315c:	ad 97       	sbiw	r28, 0x2d	; 45
    315e:	88 23       	and	r24, r24
    3160:	b1 f6       	brne	.-84     	; 0x310e <main+0x1ca>
	u8 Welcome[] = "Welcome...";
    3162:	ce 01       	movw	r24, r28
    3164:	82 5b       	subi	r24, 0xB2	; 178
    3166:	9f 4f       	sbci	r25, 0xFF	; 255
    3168:	af 96       	adiw	r28, 0x2f	; 47
    316a:	9f af       	std	Y+63, r25	; 0x3f
    316c:	8e af       	std	Y+62, r24	; 0x3e
    316e:	af 97       	sbiw	r28, 0x2f	; 47
    3170:	e3 e9       	ldi	r30, 0x93	; 147
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	e1 96       	adiw	r28, 0x31	; 49
    3176:	ff af       	std	Y+63, r31	; 0x3f
    3178:	ee af       	std	Y+62, r30	; 0x3e
    317a:	e1 97       	sbiw	r28, 0x31	; 49
    317c:	fb e0       	ldi	r31, 0x0B	; 11
    317e:	e2 96       	adiw	r28, 0x32	; 50
    3180:	ff af       	std	Y+63, r31	; 0x3f
    3182:	e2 97       	sbiw	r28, 0x32	; 50
    3184:	e1 96       	adiw	r28, 0x31	; 49
    3186:	ee ad       	ldd	r30, Y+62	; 0x3e
    3188:	ff ad       	ldd	r31, Y+63	; 0x3f
    318a:	e1 97       	sbiw	r28, 0x31	; 49
    318c:	00 80       	ld	r0, Z
    318e:	e1 96       	adiw	r28, 0x31	; 49
    3190:	0e ad       	ldd	r16, Y+62	; 0x3e
    3192:	1f ad       	ldd	r17, Y+63	; 0x3f
    3194:	e1 97       	sbiw	r28, 0x31	; 49
    3196:	0f 5f       	subi	r16, 0xFF	; 255
    3198:	1f 4f       	sbci	r17, 0xFF	; 255
    319a:	e1 96       	adiw	r28, 0x31	; 49
    319c:	1f af       	std	Y+63, r17	; 0x3f
    319e:	0e af       	std	Y+62, r16	; 0x3e
    31a0:	e1 97       	sbiw	r28, 0x31	; 49
    31a2:	af 96       	adiw	r28, 0x2f	; 47
    31a4:	ee ad       	ldd	r30, Y+62	; 0x3e
    31a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    31a8:	af 97       	sbiw	r28, 0x2f	; 47
    31aa:	00 82       	st	Z, r0
    31ac:	af 96       	adiw	r28, 0x2f	; 47
    31ae:	0e ad       	ldd	r16, Y+62	; 0x3e
    31b0:	1f ad       	ldd	r17, Y+63	; 0x3f
    31b2:	af 97       	sbiw	r28, 0x2f	; 47
    31b4:	0f 5f       	subi	r16, 0xFF	; 255
    31b6:	1f 4f       	sbci	r17, 0xFF	; 255
    31b8:	af 96       	adiw	r28, 0x2f	; 47
    31ba:	1f af       	std	Y+63, r17	; 0x3f
    31bc:	0e af       	std	Y+62, r16	; 0x3e
    31be:	af 97       	sbiw	r28, 0x2f	; 47
    31c0:	e2 96       	adiw	r28, 0x32	; 50
    31c2:	1f ad       	ldd	r17, Y+63	; 0x3f
    31c4:	e2 97       	sbiw	r28, 0x32	; 50
    31c6:	11 50       	subi	r17, 0x01	; 1
    31c8:	e2 96       	adiw	r28, 0x32	; 50
    31ca:	1f af       	std	Y+63, r17	; 0x3f
    31cc:	e2 97       	sbiw	r28, 0x32	; 50
    31ce:	e2 96       	adiw	r28, 0x32	; 50
    31d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    31d2:	e2 97       	sbiw	r28, 0x32	; 50
    31d4:	88 23       	and	r24, r24
    31d6:	b1 f6       	brne	.-84     	; 0x3184 <main+0x240>

	/*Set OC2 as Output*/
	DIO_VidSetPinDirection(DIO_PORTD,7,PIN_OUTPUT);
    31d8:	83 e0       	ldi	r24, 0x03	; 3
    31da:	67 e0       	ldi	r22, 0x07	; 7
    31dc:	41 e0       	ldi	r20, 0x01	; 1
    31de:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
	/*Set ICP1 as Input*/
	DIO_VidSetPinDirection(DIO_PORTD,6,PIN_INPUT);
    31e2:	83 e0       	ldi	r24, 0x03	; 3
    31e4:	66 e0       	ldi	r22, 0x06	; 6
    31e6:	40 e0       	ldi	r20, 0x00	; 0
    31e8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>

	/*Set Data Pins Direction*/
	DIO_VidSetPortDirection(GLCD_DATA_PORT,PORT_OUTPUT);
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	6f ef       	ldi	r22, 0xFF	; 255
    31f0:	0e 94 03 0a 	call	0x1406	; 0x1406 <DIO_VidSetPortDirection>
	/*Set Control Pins Direction*/
	DIO_VidSetPortDirection(GLCD_CONTROL_PORT,PORT_OUTPUT);
    31f4:	82 e0       	ldi	r24, 0x02	; 2
    31f6:	6f ef       	ldi	r22, 0xFF	; 255
    31f8:	0e 94 03 0a 	call	0x1406	; 0x1406 <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(GLCD_CONTROL_PORT,PIN3,PIN_OUTPUT);
	DIO_VidSetPinDirection(GLCD_CONTROL_PORT,PIN4,PIN_OUTPUT);
	DIO_VidSetPinDirection(GLCD_CONTROL_PORT,PIN5,PIN_OUTPUT);*/

	//GLCD Initialization
	GLCD_VidInit();
    31fc:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <GLCD_VidInit>
	//Clear GLCD
	GLCD_VidClear();
    3200:	0e 94 92 10 	call	0x2124	; 0x2124 <GLCD_VidClear>

	/*ICU Select Raising Edge & Enable Interrupt*/
	TIMER1_VidICUEnable(TIMER1_ICU_RAISING_EDGE);
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <TIMER1_VidICUEnable>

	/*Timer1 Initialization - Prescaler 8*/
	TIMER1_VidInit();
    320a:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <TIMER1_VidInit>

	/*Timer2 CTC Value*/
	TIMER2_VidSetCTCValue(100);
    320e:	84 e6       	ldi	r24, 0x64	; 100
    3210:	0e 94 91 17 	call	0x2f22	; 0x2f22 <TIMER2_VidSetCTCValue>
	/*Timer2 Initialization - Prescaler 256*/
	TIMER2_VidInit();
    3214:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <TIMER2_VidInit>

	/*GLobal Interrupt Enable*/
	GIE_VidEnable();
    3218:	0e 94 83 0c 	call	0x1906	; 0x1906 <GIE_VidEnable>
	f32 Frequency;
	f32 DutyCycle;
	f32 TimePeriod;

	//Select Position
	GLCD_VidSetPosition(0,0);
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	60 e0       	ldi	r22, 0x00	; 0
    3220:	0e 94 c3 10 	call	0x2186	; 0x2186 <GLCD_VidSetPosition>
	GLCD_VidSendString(Welcome);
    3224:	ce 01       	movw	r24, r28
    3226:	82 5b       	subi	r24, 0xB2	; 178
    3228:	9f 4f       	sbci	r25, 0xFF	; 255
    322a:	0e 94 ff 10 	call	0x21fe	; 0x21fe <GLCD_VidSendString>
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	aa e7       	ldi	r26, 0x7A	; 122
    3234:	b4 e4       	ldi	r27, 0x44	; 68
    3236:	8b 87       	std	Y+11, r24	; 0x0b
    3238:	9c 87       	std	Y+12, r25	; 0x0c
    323a:	ad 87       	std	Y+13, r26	; 0x0d
    323c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    323e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3240:	7c 85       	ldd	r23, Y+12	; 0x0c
    3242:	8d 85       	ldd	r24, Y+13	; 0x0d
    3244:	9e 85       	ldd	r25, Y+14	; 0x0e
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	4a ef       	ldi	r20, 0xFA	; 250
    324c:	53 e4       	ldi	r21, 0x43	; 67
    324e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	8f 83       	std	Y+7, r24	; 0x07
    3258:	98 87       	std	Y+8, r25	; 0x08
    325a:	a9 87       	std	Y+9, r26	; 0x09
    325c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    325e:	6f 81       	ldd	r22, Y+7	; 0x07
    3260:	78 85       	ldd	r23, Y+8	; 0x08
    3262:	89 85       	ldd	r24, Y+9	; 0x09
    3264:	9a 85       	ldd	r25, Y+10	; 0x0a
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	40 e8       	ldi	r20, 0x80	; 128
    326c:	5f e3       	ldi	r21, 0x3F	; 63
    326e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3272:	88 23       	and	r24, r24
    3274:	2c f4       	brge	.+10     	; 0x3280 <main+0x33c>
		__ticks = 1;
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	9e 83       	std	Y+6, r25	; 0x06
    327c:	8d 83       	std	Y+5, r24	; 0x05
    327e:	3f c0       	rjmp	.+126    	; 0x32fe <main+0x3ba>
	else if (__tmp > 65535)
    3280:	6f 81       	ldd	r22, Y+7	; 0x07
    3282:	78 85       	ldd	r23, Y+8	; 0x08
    3284:	89 85       	ldd	r24, Y+9	; 0x09
    3286:	9a 85       	ldd	r25, Y+10	; 0x0a
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	3f ef       	ldi	r19, 0xFF	; 255
    328c:	4f e7       	ldi	r20, 0x7F	; 127
    328e:	57 e4       	ldi	r21, 0x47	; 71
    3290:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3294:	18 16       	cp	r1, r24
    3296:	4c f5       	brge	.+82     	; 0x32ea <main+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3298:	6b 85       	ldd	r22, Y+11	; 0x0b
    329a:	7c 85       	ldd	r23, Y+12	; 0x0c
    329c:	8d 85       	ldd	r24, Y+13	; 0x0d
    329e:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	40 e2       	ldi	r20, 0x20	; 32
    32a6:	51 e4       	ldi	r21, 0x41	; 65
    32a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	bc 01       	movw	r22, r24
    32b2:	cd 01       	movw	r24, r26
    32b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	9e 83       	std	Y+6, r25	; 0x06
    32be:	8d 83       	std	Y+5, r24	; 0x05
    32c0:	0f c0       	rjmp	.+30     	; 0x32e0 <main+0x39c>
    32c2:	82 e3       	ldi	r24, 0x32	; 50
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	9c 83       	std	Y+4, r25	; 0x04
    32c8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32ca:	8b 81       	ldd	r24, Y+3	; 0x03
    32cc:	9c 81       	ldd	r25, Y+4	; 0x04
    32ce:	01 97       	sbiw	r24, 0x01	; 1
    32d0:	f1 f7       	brne	.-4      	; 0x32ce <main+0x38a>
    32d2:	9c 83       	std	Y+4, r25	; 0x04
    32d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d6:	8d 81       	ldd	r24, Y+5	; 0x05
    32d8:	9e 81       	ldd	r25, Y+6	; 0x06
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	9e 83       	std	Y+6, r25	; 0x06
    32de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e0:	8d 81       	ldd	r24, Y+5	; 0x05
    32e2:	9e 81       	ldd	r25, Y+6	; 0x06
    32e4:	00 97       	sbiw	r24, 0x00	; 0
    32e6:	69 f7       	brne	.-38     	; 0x32c2 <main+0x37e>
    32e8:	14 c0       	rjmp	.+40     	; 0x3312 <main+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ea:	6f 81       	ldd	r22, Y+7	; 0x07
    32ec:	78 85       	ldd	r23, Y+8	; 0x08
    32ee:	89 85       	ldd	r24, Y+9	; 0x09
    32f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	9e 83       	std	Y+6, r25	; 0x06
    32fc:	8d 83       	std	Y+5, r24	; 0x05
    32fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3300:	9e 81       	ldd	r25, Y+6	; 0x06
    3302:	9a 83       	std	Y+2, r25	; 0x02
    3304:	89 83       	std	Y+1, r24	; 0x01
    3306:	89 81       	ldd	r24, Y+1	; 0x01
    3308:	9a 81       	ldd	r25, Y+2	; 0x02
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	f1 f7       	brne	.-4      	; 0x330a <main+0x3c6>
    330e:	9a 83       	std	Y+2, r25	; 0x02
    3310:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	//Clear GLCD
	GLCD_VidClear();
    3312:	0e 94 92 10 	call	0x2124	; 0x2124 <GLCD_VidClear>

	while(1)
	{
		if(flag == 3)
    3316:	80 91 89 03 	lds	r24, 0x0389
    331a:	83 30       	cpi	r24, 0x03	; 3
    331c:	e1 f7       	brne	.-8      	; 0x3316 <main+0x3d2>
		{
			Frequency = (1000/(((T3*8.0)/2)-((T1*8.0)/2))); //Calculate Frequency in KHz
    331e:	80 91 8e 03 	lds	r24, 0x038E
    3322:	90 91 8f 03 	lds	r25, 0x038F
    3326:	a0 91 90 03 	lds	r26, 0x0390
    332a:	b0 91 91 03 	lds	r27, 0x0391
    332e:	bc 01       	movw	r22, r24
    3330:	cd 01       	movw	r24, r26
    3332:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	bc 01       	movw	r22, r24
    333c:	cd 01       	movw	r24, r26
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	40 e0       	ldi	r20, 0x00	; 0
    3344:	51 e4       	ldi	r21, 0x41	; 65
    3346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	bc 01       	movw	r22, r24
    3350:	cd 01       	movw	r24, r26
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	40 e0       	ldi	r20, 0x00	; 0
    3358:	50 e4       	ldi	r21, 0x40	; 64
    335a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	7c 01       	movw	r14, r24
    3364:	8d 01       	movw	r16, r26
    3366:	80 91 92 03 	lds	r24, 0x0392
    336a:	90 91 93 03 	lds	r25, 0x0393
    336e:	a0 91 94 03 	lds	r26, 0x0394
    3372:	b0 91 95 03 	lds	r27, 0x0395
    3376:	bc 01       	movw	r22, r24
    3378:	cd 01       	movw	r24, r26
    337a:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	bc 01       	movw	r22, r24
    3384:	cd 01       	movw	r24, r26
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	40 e0       	ldi	r20, 0x00	; 0
    338c:	51 e4       	ldi	r21, 0x41	; 65
    338e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	bc 01       	movw	r22, r24
    3398:	cd 01       	movw	r24, r26
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	40 e0       	ldi	r20, 0x00	; 0
    33a0:	50 ec       	ldi	r21, 0xC0	; 192
    33a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    33a6:	dc 01       	movw	r26, r24
    33a8:	cb 01       	movw	r24, r22
    33aa:	9c 01       	movw	r18, r24
    33ac:	ad 01       	movw	r20, r26
    33ae:	c8 01       	movw	r24, r16
    33b0:	b7 01       	movw	r22, r14
    33b2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	9c 01       	movw	r18, r24
    33bc:	ad 01       	movw	r20, r26
    33be:	60 e0       	ldi	r22, 0x00	; 0
    33c0:	70 e0       	ldi	r23, 0x00	; 0
    33c2:	8a e7       	ldi	r24, 0x7A	; 122
    33c4:	94 e4       	ldi	r25, 0x44	; 68
    33c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	8f 8b       	std	Y+23, r24	; 0x17
    33d0:	98 8f       	std	Y+24, r25	; 0x18
    33d2:	a9 8f       	std	Y+25, r26	; 0x19
    33d4:	ba 8f       	std	Y+26, r27	; 0x1a
			DutyCycle = (((T2-T1)*100.0)/(T3-T1));          //Calculate Duty Cycle
    33d6:	20 91 8a 03 	lds	r18, 0x038A
    33da:	30 91 8b 03 	lds	r19, 0x038B
    33de:	40 91 8c 03 	lds	r20, 0x038C
    33e2:	50 91 8d 03 	lds	r21, 0x038D
    33e6:	80 91 92 03 	lds	r24, 0x0392
    33ea:	90 91 93 03 	lds	r25, 0x0393
    33ee:	a0 91 94 03 	lds	r26, 0x0394
    33f2:	b0 91 95 03 	lds	r27, 0x0395
    33f6:	59 01       	movw	r10, r18
    33f8:	6a 01       	movw	r12, r20
    33fa:	a8 1a       	sub	r10, r24
    33fc:	b9 0a       	sbc	r11, r25
    33fe:	ca 0a       	sbc	r12, r26
    3400:	db 0a       	sbc	r13, r27
    3402:	d6 01       	movw	r26, r12
    3404:	c5 01       	movw	r24, r10
    3406:	bc 01       	movw	r22, r24
    3408:	cd 01       	movw	r24, r26
    340a:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	bc 01       	movw	r22, r24
    3414:	cd 01       	movw	r24, r26
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	48 ec       	ldi	r20, 0xC8	; 200
    341c:	52 e4       	ldi	r21, 0x42	; 66
    341e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	7c 01       	movw	r14, r24
    3428:	8d 01       	movw	r16, r26
    342a:	20 91 8e 03 	lds	r18, 0x038E
    342e:	30 91 8f 03 	lds	r19, 0x038F
    3432:	40 91 90 03 	lds	r20, 0x0390
    3436:	50 91 91 03 	lds	r21, 0x0391
    343a:	80 91 92 03 	lds	r24, 0x0392
    343e:	90 91 93 03 	lds	r25, 0x0393
    3442:	a0 91 94 03 	lds	r26, 0x0394
    3446:	b0 91 95 03 	lds	r27, 0x0395
    344a:	59 01       	movw	r10, r18
    344c:	6a 01       	movw	r12, r20
    344e:	a8 1a       	sub	r10, r24
    3450:	b9 0a       	sbc	r11, r25
    3452:	ca 0a       	sbc	r12, r26
    3454:	db 0a       	sbc	r13, r27
    3456:	d6 01       	movw	r26, r12
    3458:	c5 01       	movw	r24, r10
    345a:	bc 01       	movw	r22, r24
    345c:	cd 01       	movw	r24, r26
    345e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3462:	9b 01       	movw	r18, r22
    3464:	ac 01       	movw	r20, r24
    3466:	c8 01       	movw	r24, r16
    3468:	b7 01       	movw	r22, r14
    346a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    346e:	dc 01       	movw	r26, r24
    3470:	cb 01       	movw	r24, r22
    3472:	8b 8b       	std	Y+19, r24	; 0x13
    3474:	9c 8b       	std	Y+20, r25	; 0x14
    3476:	ad 8b       	std	Y+21, r26	; 0x15
    3478:	be 8b       	std	Y+22, r27	; 0x16
			TimePeriod = (1/Frequency);
    347a:	60 e0       	ldi	r22, 0x00	; 0
    347c:	70 e0       	ldi	r23, 0x00	; 0
    347e:	80 e8       	ldi	r24, 0x80	; 128
    3480:	9f e3       	ldi	r25, 0x3F	; 63
    3482:	2f 89       	ldd	r18, Y+23	; 0x17
    3484:	38 8d       	ldd	r19, Y+24	; 0x18
    3486:	49 8d       	ldd	r20, Y+25	; 0x19
    3488:	5a 8d       	ldd	r21, Y+26	; 0x1a
    348a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	8f 87       	std	Y+15, r24	; 0x0f
    3494:	98 8b       	std	Y+16, r25	; 0x10
    3496:	a9 8b       	std	Y+17, r26	; 0x11
    3498:	ba 8b       	std	Y+18, r27	; 0x12
			GLCD_VidSetPosition(0,0);                       //Select Page 0 Column 0
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	60 e0       	ldi	r22, 0x00	; 0
    349e:	0e 94 c3 10 	call	0x2186	; 0x2186 <GLCD_VidSetPosition>
			GLCD_VidSendString(Frequency_ARR);
    34a2:	ce 01       	movw	r24, r28
    34a4:	4b 96       	adiw	r24, 0x1b	; 27
    34a6:	0e 94 ff 10 	call	0x21fe	; 0x21fe <GLCD_VidSendString>
			GLCD_VidSendNumber(Frequency);                  //Display Frequency
    34aa:	8f 89       	ldd	r24, Y+23	; 0x17
    34ac:	98 8d       	ldd	r25, Y+24	; 0x18
    34ae:	a9 8d       	ldd	r26, Y+25	; 0x19
    34b0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    34b2:	bc 01       	movw	r22, r24
    34b4:	cd 01       	movw	r24, r26
    34b6:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <GLCD_VidSendNumber>
			GLCD_VidSendString(KHZ);
    34ba:	ce 01       	movw	r24, r28
    34bc:	88 96       	adiw	r24, 0x28	; 40
    34be:	0e 94 ff 10 	call	0x21fe	; 0x21fe <GLCD_VidSendString>
			GLCD_VidSetPosition(2,0);                       //Select Page 1 Column 0//Select Position
    34c2:	82 e0       	ldi	r24, 0x02	; 2
    34c4:	60 e0       	ldi	r22, 0x00	; 0
    34c6:	0e 94 c3 10 	call	0x2186	; 0x2186 <GLCD_VidSetPosition>
			GLCD_VidSendString(DutyCycle_ARR);
    34ca:	ce 01       	movw	r24, r28
    34cc:	8c 96       	adiw	r24, 0x2c	; 44
    34ce:	0e 94 ff 10 	call	0x21fe	; 0x21fe <GLCD_VidSendString>
			GLCD_VidSendNumber(DutyCycle);                  //Display Duty Cycle
    34d2:	8b 89       	ldd	r24, Y+19	; 0x13
    34d4:	9c 89       	ldd	r25, Y+20	; 0x14
    34d6:	ad 89       	ldd	r26, Y+21	; 0x15
    34d8:	be 89       	ldd	r27, Y+22	; 0x16
    34da:	bc 01       	movw	r22, r24
    34dc:	cd 01       	movw	r24, r26
    34de:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <GLCD_VidSendNumber>
			GLCD_VidSendString(Percent);
    34e2:	ce 01       	movw	r24, r28
    34e4:	ca 96       	adiw	r24, 0x3a	; 58
    34e6:	0e 94 ff 10 	call	0x21fe	; 0x21fe <GLCD_VidSendString>
			GLCD_VidSetPosition(4,0);                       //Select Page 2 Column 0
    34ea:	84 e0       	ldi	r24, 0x04	; 4
    34ec:	60 e0       	ldi	r22, 0x00	; 0
    34ee:	0e 94 c3 10 	call	0x2186	; 0x2186 <GLCD_VidSetPosition>
			GLCD_VidSendString(TimePerid_ARR);
    34f2:	ce 01       	movw	r24, r28
    34f4:	cc 96       	adiw	r24, 0x3c	; 60
    34f6:	0e 94 ff 10 	call	0x21fe	; 0x21fe <GLCD_VidSendString>
			GLCD_VidSendNumber(TimePeriod);                 //Display Tp in ms
    34fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    34fc:	98 89       	ldd	r25, Y+16	; 0x10
    34fe:	a9 89       	ldd	r26, Y+17	; 0x11
    3500:	ba 89       	ldd	r27, Y+18	; 0x12
    3502:	bc 01       	movw	r22, r24
    3504:	cd 01       	movw	r24, r26
    3506:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <GLCD_VidSendNumber>
			GLCD_VidSendString(ms);
    350a:	ce 01       	movw	r24, r28
    350c:	85 5b       	subi	r24, 0xB5	; 181
    350e:	9f 4f       	sbci	r25, 0xFF	; 255
    3510:	0e 94 ff 10 	call	0x21fe	; 0x21fe <GLCD_VidSendString>
			//GLCD_VidSendNumber(0);
			//GLCD_VidSetPosition(2,93);
			//GLCD_VidSendString("H");

			//Draw PWM
			GLCD_VidDrawPWM(6,Frequency,DutyCycle);
    3514:	2f 89       	ldd	r18, Y+23	; 0x17
    3516:	38 8d       	ldd	r19, Y+24	; 0x18
    3518:	49 8d       	ldd	r20, Y+25	; 0x19
    351a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    351c:	eb 88       	ldd	r14, Y+19	; 0x13
    351e:	fc 88       	ldd	r15, Y+20	; 0x14
    3520:	0d 89       	ldd	r16, Y+21	; 0x15
    3522:	1e 89       	ldd	r17, Y+22	; 0x16
    3524:	86 e0       	ldi	r24, 0x06	; 6
    3526:	ba 01       	movw	r22, r20
    3528:	a9 01       	movw	r20, r18
    352a:	98 01       	movw	r18, r16
    352c:	87 01       	movw	r16, r14
    352e:	0e 94 cf 14 	call	0x299e	; 0x299e <GLCD_VidDrawPWM>

			flag = 4;
    3532:	84 e0       	ldi	r24, 0x04	; 4
    3534:	80 93 89 03 	sts	0x0389, r24
    3538:	ee ce       	rjmp	.-548    	; 0x3316 <main+0x3d2>

0000353a <__vector_9>:
}

//ISR For Timer1 OverFlow
void __vector_9(void)       __attribute__((signal));
void __vector_9(void)
{
    353a:	1f 92       	push	r1
    353c:	0f 92       	push	r0
    353e:	0f b6       	in	r0, 0x3f	; 63
    3540:	0f 92       	push	r0
    3542:	11 24       	eor	r1, r1
    3544:	8f 93       	push	r24
    3546:	df 93       	push	r29
    3548:	cf 93       	push	r28
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62
	count++;   //Increment Counter When OverFlow Occurs
    354e:	80 91 88 03 	lds	r24, 0x0388
    3552:	8f 5f       	subi	r24, 0xFF	; 255
    3554:	80 93 88 03 	sts	0x0388, r24
}
    3558:	cf 91       	pop	r28
    355a:	df 91       	pop	r29
    355c:	8f 91       	pop	r24
    355e:	0f 90       	pop	r0
    3560:	0f be       	out	0x3f, r0	; 63
    3562:	0f 90       	pop	r0
    3564:	1f 90       	pop	r1
    3566:	18 95       	reti

00003568 <__vector_6>:

//ISR For Timer1 ICU
void __vector_6(void)       __attribute__((signal));
void __vector_6(void)
{
    3568:	1f 92       	push	r1
    356a:	0f 92       	push	r0
    356c:	0f b6       	in	r0, 0x3f	; 63
    356e:	0f 92       	push	r0
    3570:	11 24       	eor	r1, r1
    3572:	2f 93       	push	r18
    3574:	3f 93       	push	r19
    3576:	4f 93       	push	r20
    3578:	5f 93       	push	r21
    357a:	6f 93       	push	r22
    357c:	7f 93       	push	r23
    357e:	8f 93       	push	r24
    3580:	9f 93       	push	r25
    3582:	af 93       	push	r26
    3584:	bf 93       	push	r27
    3586:	ef 93       	push	r30
    3588:	ff 93       	push	r31
    358a:	df 93       	push	r29
    358c:	cf 93       	push	r28
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
	if(flag == 0)
    3592:	80 91 89 03 	lds	r24, 0x0389
    3596:	88 23       	and	r24, r24
    3598:	19 f5       	brne	.+70     	; 0x35e0 <__vector_6+0x78>
	{
		T1 = ICR1 + (count*65536);                      //Store Counts For The Raising Edge
    359a:	e6 e4       	ldi	r30, 0x46	; 70
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	80 81       	ld	r24, Z
    35a0:	91 81       	ldd	r25, Z+1	; 0x01
    35a2:	9c 01       	movw	r18, r24
    35a4:	40 e0       	ldi	r20, 0x00	; 0
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	80 91 88 03 	lds	r24, 0x0388
    35ac:	88 2f       	mov	r24, r24
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	a0 e0       	ldi	r26, 0x00	; 0
    35b2:	b0 e0       	ldi	r27, 0x00	; 0
    35b4:	dc 01       	movw	r26, r24
    35b6:	99 27       	eor	r25, r25
    35b8:	88 27       	eor	r24, r24
    35ba:	82 0f       	add	r24, r18
    35bc:	93 1f       	adc	r25, r19
    35be:	a4 1f       	adc	r26, r20
    35c0:	b5 1f       	adc	r27, r21
    35c2:	80 93 92 03 	sts	0x0392, r24
    35c6:	90 93 93 03 	sts	0x0393, r25
    35ca:	a0 93 94 03 	sts	0x0394, r26
    35ce:	b0 93 95 03 	sts	0x0395, r27
		TIMER1_VidICUEnable(TIMER1_ICU_FALLING_EDGE);   //Wait For Falling Edge
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <TIMER1_VidICUEnable>
		flag = 1;
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	80 93 89 03 	sts	0x0389, r24
    35de:	4a c0       	rjmp	.+148    	; 0x3674 <__vector_6+0x10c>
	}
	else if(flag == 1)
    35e0:	80 91 89 03 	lds	r24, 0x0389
    35e4:	81 30       	cpi	r24, 0x01	; 1
    35e6:	19 f5       	brne	.+70     	; 0x362e <__vector_6+0xc6>
	{
		T2 = ICR1 + (count*65536);                      //Store Counts For The Falling Edge
    35e8:	e6 e4       	ldi	r30, 0x46	; 70
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	80 81       	ld	r24, Z
    35ee:	91 81       	ldd	r25, Z+1	; 0x01
    35f0:	9c 01       	movw	r18, r24
    35f2:	40 e0       	ldi	r20, 0x00	; 0
    35f4:	50 e0       	ldi	r21, 0x00	; 0
    35f6:	80 91 88 03 	lds	r24, 0x0388
    35fa:	88 2f       	mov	r24, r24
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	a0 e0       	ldi	r26, 0x00	; 0
    3600:	b0 e0       	ldi	r27, 0x00	; 0
    3602:	dc 01       	movw	r26, r24
    3604:	99 27       	eor	r25, r25
    3606:	88 27       	eor	r24, r24
    3608:	82 0f       	add	r24, r18
    360a:	93 1f       	adc	r25, r19
    360c:	a4 1f       	adc	r26, r20
    360e:	b5 1f       	adc	r27, r21
    3610:	80 93 8a 03 	sts	0x038A, r24
    3614:	90 93 8b 03 	sts	0x038B, r25
    3618:	a0 93 8c 03 	sts	0x038C, r26
    361c:	b0 93 8d 03 	sts	0x038D, r27
		TIMER1_VidICUEnable(TIMER1_ICU_RAISING_EDGE);   //Wait For Raising Edge
    3620:	80 e0       	ldi	r24, 0x00	; 0
    3622:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <TIMER1_VidICUEnable>
		flag = 2;
    3626:	82 e0       	ldi	r24, 0x02	; 2
    3628:	80 93 89 03 	sts	0x0389, r24
    362c:	23 c0       	rjmp	.+70     	; 0x3674 <__vector_6+0x10c>
	}
	else if(flag == 2)
    362e:	80 91 89 03 	lds	r24, 0x0389
    3632:	82 30       	cpi	r24, 0x02	; 2
    3634:	f9 f4       	brne	.+62     	; 0x3674 <__vector_6+0x10c>
	{
		T3 = ICR1 + (count*65536);   //Store Counts For The Raising Edge
    3636:	e6 e4       	ldi	r30, 0x46	; 70
    3638:	f0 e0       	ldi	r31, 0x00	; 0
    363a:	80 81       	ld	r24, Z
    363c:	91 81       	ldd	r25, Z+1	; 0x01
    363e:	9c 01       	movw	r18, r24
    3640:	40 e0       	ldi	r20, 0x00	; 0
    3642:	50 e0       	ldi	r21, 0x00	; 0
    3644:	80 91 88 03 	lds	r24, 0x0388
    3648:	88 2f       	mov	r24, r24
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	a0 e0       	ldi	r26, 0x00	; 0
    364e:	b0 e0       	ldi	r27, 0x00	; 0
    3650:	dc 01       	movw	r26, r24
    3652:	99 27       	eor	r25, r25
    3654:	88 27       	eor	r24, r24
    3656:	82 0f       	add	r24, r18
    3658:	93 1f       	adc	r25, r19
    365a:	a4 1f       	adc	r26, r20
    365c:	b5 1f       	adc	r27, r21
    365e:	80 93 8e 03 	sts	0x038E, r24
    3662:	90 93 8f 03 	sts	0x038F, r25
    3666:	a0 93 90 03 	sts	0x0390, r26
    366a:	b0 93 91 03 	sts	0x0391, r27
		flag = 3;
    366e:	83 e0       	ldi	r24, 0x03	; 3
    3670:	80 93 89 03 	sts	0x0389, r24
	}
}
    3674:	cf 91       	pop	r28
    3676:	df 91       	pop	r29
    3678:	ff 91       	pop	r31
    367a:	ef 91       	pop	r30
    367c:	bf 91       	pop	r27
    367e:	af 91       	pop	r26
    3680:	9f 91       	pop	r25
    3682:	8f 91       	pop	r24
    3684:	7f 91       	pop	r23
    3686:	6f 91       	pop	r22
    3688:	5f 91       	pop	r21
    368a:	4f 91       	pop	r20
    368c:	3f 91       	pop	r19
    368e:	2f 91       	pop	r18
    3690:	0f 90       	pop	r0
    3692:	0f be       	out	0x3f, r0	; 63
    3694:	0f 90       	pop	r0
    3696:	1f 90       	pop	r1
    3698:	18 95       	reti

0000369a <__udivmodsi4>:
    369a:	a1 e2       	ldi	r26, 0x21	; 33
    369c:	1a 2e       	mov	r1, r26
    369e:	aa 1b       	sub	r26, r26
    36a0:	bb 1b       	sub	r27, r27
    36a2:	fd 01       	movw	r30, r26
    36a4:	0d c0       	rjmp	.+26     	; 0x36c0 <__udivmodsi4_ep>

000036a6 <__udivmodsi4_loop>:
    36a6:	aa 1f       	adc	r26, r26
    36a8:	bb 1f       	adc	r27, r27
    36aa:	ee 1f       	adc	r30, r30
    36ac:	ff 1f       	adc	r31, r31
    36ae:	a2 17       	cp	r26, r18
    36b0:	b3 07       	cpc	r27, r19
    36b2:	e4 07       	cpc	r30, r20
    36b4:	f5 07       	cpc	r31, r21
    36b6:	20 f0       	brcs	.+8      	; 0x36c0 <__udivmodsi4_ep>
    36b8:	a2 1b       	sub	r26, r18
    36ba:	b3 0b       	sbc	r27, r19
    36bc:	e4 0b       	sbc	r30, r20
    36be:	f5 0b       	sbc	r31, r21

000036c0 <__udivmodsi4_ep>:
    36c0:	66 1f       	adc	r22, r22
    36c2:	77 1f       	adc	r23, r23
    36c4:	88 1f       	adc	r24, r24
    36c6:	99 1f       	adc	r25, r25
    36c8:	1a 94       	dec	r1
    36ca:	69 f7       	brne	.-38     	; 0x36a6 <__udivmodsi4_loop>
    36cc:	60 95       	com	r22
    36ce:	70 95       	com	r23
    36d0:	80 95       	com	r24
    36d2:	90 95       	com	r25
    36d4:	9b 01       	movw	r18, r22
    36d6:	ac 01       	movw	r20, r24
    36d8:	bd 01       	movw	r22, r26
    36da:	cf 01       	movw	r24, r30
    36dc:	08 95       	ret

000036de <__prologue_saves__>:
    36de:	2f 92       	push	r2
    36e0:	3f 92       	push	r3
    36e2:	4f 92       	push	r4
    36e4:	5f 92       	push	r5
    36e6:	6f 92       	push	r6
    36e8:	7f 92       	push	r7
    36ea:	8f 92       	push	r8
    36ec:	9f 92       	push	r9
    36ee:	af 92       	push	r10
    36f0:	bf 92       	push	r11
    36f2:	cf 92       	push	r12
    36f4:	df 92       	push	r13
    36f6:	ef 92       	push	r14
    36f8:	ff 92       	push	r15
    36fa:	0f 93       	push	r16
    36fc:	1f 93       	push	r17
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
    3702:	cd b7       	in	r28, 0x3d	; 61
    3704:	de b7       	in	r29, 0x3e	; 62
    3706:	ca 1b       	sub	r28, r26
    3708:	db 0b       	sbc	r29, r27
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	f8 94       	cli
    370e:	de bf       	out	0x3e, r29	; 62
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	cd bf       	out	0x3d, r28	; 61
    3714:	09 94       	ijmp

00003716 <__epilogue_restores__>:
    3716:	2a 88       	ldd	r2, Y+18	; 0x12
    3718:	39 88       	ldd	r3, Y+17	; 0x11
    371a:	48 88       	ldd	r4, Y+16	; 0x10
    371c:	5f 84       	ldd	r5, Y+15	; 0x0f
    371e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3720:	7d 84       	ldd	r7, Y+13	; 0x0d
    3722:	8c 84       	ldd	r8, Y+12	; 0x0c
    3724:	9b 84       	ldd	r9, Y+11	; 0x0b
    3726:	aa 84       	ldd	r10, Y+10	; 0x0a
    3728:	b9 84       	ldd	r11, Y+9	; 0x09
    372a:	c8 84       	ldd	r12, Y+8	; 0x08
    372c:	df 80       	ldd	r13, Y+7	; 0x07
    372e:	ee 80       	ldd	r14, Y+6	; 0x06
    3730:	fd 80       	ldd	r15, Y+5	; 0x05
    3732:	0c 81       	ldd	r16, Y+4	; 0x04
    3734:	1b 81       	ldd	r17, Y+3	; 0x03
    3736:	aa 81       	ldd	r26, Y+2	; 0x02
    3738:	b9 81       	ldd	r27, Y+1	; 0x01
    373a:	ce 0f       	add	r28, r30
    373c:	d1 1d       	adc	r29, r1
    373e:	0f b6       	in	r0, 0x3f	; 63
    3740:	f8 94       	cli
    3742:	de bf       	out	0x3e, r29	; 62
    3744:	0f be       	out	0x3f, r0	; 63
    3746:	cd bf       	out	0x3d, r28	; 61
    3748:	ed 01       	movw	r28, r26
    374a:	08 95       	ret

0000374c <round>:
    374c:	50 d0       	rcall	.+160    	; 0x37ee <__fp_splitA>
    374e:	e0 f0       	brcs	.+56     	; 0x3788 <round+0x3c>
    3750:	9e 37       	cpi	r25, 0x7E	; 126
    3752:	d8 f0       	brcs	.+54     	; 0x378a <round+0x3e>
    3754:	96 39       	cpi	r25, 0x96	; 150
    3756:	b8 f4       	brcc	.+46     	; 0x3786 <round+0x3a>
    3758:	9e 38       	cpi	r25, 0x8E	; 142
    375a:	48 f4       	brcc	.+18     	; 0x376e <round+0x22>
    375c:	67 2f       	mov	r22, r23
    375e:	78 2f       	mov	r23, r24
    3760:	88 27       	eor	r24, r24
    3762:	98 5f       	subi	r25, 0xF8	; 248
    3764:	f9 cf       	rjmp	.-14     	; 0x3758 <round+0xc>
    3766:	86 95       	lsr	r24
    3768:	77 95       	ror	r23
    376a:	67 95       	ror	r22
    376c:	93 95       	inc	r25
    376e:	95 39       	cpi	r25, 0x95	; 149
    3770:	d0 f3       	brcs	.-12     	; 0x3766 <round+0x1a>
    3772:	b6 2f       	mov	r27, r22
    3774:	b1 70       	andi	r27, 0x01	; 1
    3776:	6b 0f       	add	r22, r27
    3778:	71 1d       	adc	r23, r1
    377a:	81 1d       	adc	r24, r1
    377c:	20 f4       	brcc	.+8      	; 0x3786 <round+0x3a>
    377e:	87 95       	ror	r24
    3780:	77 95       	ror	r23
    3782:	67 95       	ror	r22
    3784:	93 95       	inc	r25
    3786:	02 c0       	rjmp	.+4      	; 0x378c <__fp_mintl>
    3788:	1c c0       	rjmp	.+56     	; 0x37c2 <__fp_mpack>
    378a:	4c c0       	rjmp	.+152    	; 0x3824 <__fp_szero>

0000378c <__fp_mintl>:
    378c:	88 23       	and	r24, r24
    378e:	71 f4       	brne	.+28     	; 0x37ac <__fp_mintl+0x20>
    3790:	77 23       	and	r23, r23
    3792:	21 f0       	breq	.+8      	; 0x379c <__fp_mintl+0x10>
    3794:	98 50       	subi	r25, 0x08	; 8
    3796:	87 2b       	or	r24, r23
    3798:	76 2f       	mov	r23, r22
    379a:	07 c0       	rjmp	.+14     	; 0x37aa <__fp_mintl+0x1e>
    379c:	66 23       	and	r22, r22
    379e:	11 f4       	brne	.+4      	; 0x37a4 <__fp_mintl+0x18>
    37a0:	99 27       	eor	r25, r25
    37a2:	0d c0       	rjmp	.+26     	; 0x37be <__fp_mintl+0x32>
    37a4:	90 51       	subi	r25, 0x10	; 16
    37a6:	86 2b       	or	r24, r22
    37a8:	70 e0       	ldi	r23, 0x00	; 0
    37aa:	60 e0       	ldi	r22, 0x00	; 0
    37ac:	2a f0       	brmi	.+10     	; 0x37b8 <__fp_mintl+0x2c>
    37ae:	9a 95       	dec	r25
    37b0:	66 0f       	add	r22, r22
    37b2:	77 1f       	adc	r23, r23
    37b4:	88 1f       	adc	r24, r24
    37b6:	da f7       	brpl	.-10     	; 0x37ae <__fp_mintl+0x22>
    37b8:	88 0f       	add	r24, r24
    37ba:	96 95       	lsr	r25
    37bc:	87 95       	ror	r24
    37be:	97 f9       	bld	r25, 7
    37c0:	08 95       	ret

000037c2 <__fp_mpack>:
    37c2:	9f 3f       	cpi	r25, 0xFF	; 255
    37c4:	31 f0       	breq	.+12     	; 0x37d2 <__fp_mpack_finite+0xc>

000037c6 <__fp_mpack_finite>:
    37c6:	91 50       	subi	r25, 0x01	; 1
    37c8:	20 f4       	brcc	.+8      	; 0x37d2 <__fp_mpack_finite+0xc>
    37ca:	87 95       	ror	r24
    37cc:	77 95       	ror	r23
    37ce:	67 95       	ror	r22
    37d0:	b7 95       	ror	r27
    37d2:	88 0f       	add	r24, r24
    37d4:	91 1d       	adc	r25, r1
    37d6:	96 95       	lsr	r25
    37d8:	87 95       	ror	r24
    37da:	97 f9       	bld	r25, 7
    37dc:	08 95       	ret

000037de <__fp_split3>:
    37de:	57 fd       	sbrc	r21, 7
    37e0:	90 58       	subi	r25, 0x80	; 128
    37e2:	44 0f       	add	r20, r20
    37e4:	55 1f       	adc	r21, r21
    37e6:	59 f0       	breq	.+22     	; 0x37fe <__fp_splitA+0x10>
    37e8:	5f 3f       	cpi	r21, 0xFF	; 255
    37ea:	71 f0       	breq	.+28     	; 0x3808 <__fp_splitA+0x1a>
    37ec:	47 95       	ror	r20

000037ee <__fp_splitA>:
    37ee:	88 0f       	add	r24, r24
    37f0:	97 fb       	bst	r25, 7
    37f2:	99 1f       	adc	r25, r25
    37f4:	61 f0       	breq	.+24     	; 0x380e <__fp_splitA+0x20>
    37f6:	9f 3f       	cpi	r25, 0xFF	; 255
    37f8:	79 f0       	breq	.+30     	; 0x3818 <__fp_splitA+0x2a>
    37fa:	87 95       	ror	r24
    37fc:	08 95       	ret
    37fe:	12 16       	cp	r1, r18
    3800:	13 06       	cpc	r1, r19
    3802:	14 06       	cpc	r1, r20
    3804:	55 1f       	adc	r21, r21
    3806:	f2 cf       	rjmp	.-28     	; 0x37ec <__fp_split3+0xe>
    3808:	46 95       	lsr	r20
    380a:	f1 df       	rcall	.-30     	; 0x37ee <__fp_splitA>
    380c:	08 c0       	rjmp	.+16     	; 0x381e <__fp_splitA+0x30>
    380e:	16 16       	cp	r1, r22
    3810:	17 06       	cpc	r1, r23
    3812:	18 06       	cpc	r1, r24
    3814:	99 1f       	adc	r25, r25
    3816:	f1 cf       	rjmp	.-30     	; 0x37fa <__fp_splitA+0xc>
    3818:	86 95       	lsr	r24
    381a:	71 05       	cpc	r23, r1
    381c:	61 05       	cpc	r22, r1
    381e:	08 94       	sec
    3820:	08 95       	ret

00003822 <__fp_zero>:
    3822:	e8 94       	clt

00003824 <__fp_szero>:
    3824:	bb 27       	eor	r27, r27
    3826:	66 27       	eor	r22, r22
    3828:	77 27       	eor	r23, r23
    382a:	cb 01       	movw	r24, r22
    382c:	97 f9       	bld	r25, 7
    382e:	08 95       	ret

00003830 <_exit>:
    3830:	f8 94       	cli

00003832 <__stop_program>:
    3832:	ff cf       	rjmp	.-2      	; 0x3832 <__stop_program>
